
QUTMS_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800496c  0800496c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800496c  0800496c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  080049e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080049e4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d136  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e8  00000000  00000000  0002d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016066  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af85  00000000  00000000  00046826  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000751d5  00000000  00000000  000517ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  000c69fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047d0 	.word	0x080047d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080047d0 	.word	0x080047d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <bq769x0_reg_write_byte>:

static uint8_t adc_voltage_gain = 0;
static uint8_t adc_voltage_offset = 0;

HAL_StatusTypeDef bq769x0_reg_write_byte(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t value) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	0008      	movs	r0, r1
 800040e:	0011      	movs	r1, r2
 8000410:	1cfb      	adds	r3, r7, #3
 8000412:	1c02      	adds	r2, r0, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	1c0a      	adds	r2, r1, #0
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800041c:	210f      	movs	r1, #15
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	701a      	strb	r2, [r3, #0]

	// no crc as chip doesn't support it

	uint8_t data[2] = { reg, value };
 8000424:	200c      	movs	r0, #12
 8000426:	183b      	adds	r3, r7, r0
 8000428:	1cfa      	adds	r2, r7, #3
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	183b      	adds	r3, r7, r0
 8000430:	1cba      	adds	r2, r7, #2
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	705a      	strb	r2, [r3, #1]

	return HAL_I2C_Master_Transmit(hi2c, address, data, sizeof(data),
 8000436:	187b      	adds	r3, r7, r1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b299      	uxth	r1, r3
 800043c:	183a      	adds	r2, r7, r0
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <bq769x0_reg_write_byte+0x50>)
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2302      	movs	r3, #2
 8000446:	f001 ff17 	bl	8002278 <HAL_I2C_Master_Transmit>
 800044a:	0003      	movs	r3, r0
	TIMEOUT_MINUTE);
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b004      	add	sp, #16
 8000452:	bd80      	pop	{r7, pc}
 8000454:	0000ea60 	.word	0x0000ea60

08000458 <bq769x0_reg_read_byte>:

	return result;
}

HAL_StatusTypeDef bq769x0_reg_read_byte(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t *value) {
 8000458:	b5b0      	push	{r4, r5, r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af02      	add	r7, sp, #8
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	200b      	movs	r0, #11
 8000464:	183b      	adds	r3, r7, r0
 8000466:	1c0a      	adds	r2, r1, #0
 8000468:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800046a:	2117      	movs	r1, #23
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2230      	movs	r2, #48	; 0x30
 8000470:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1,
 8000472:	187b      	adds	r3, r7, r1
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b299      	uxth	r1, r3
 8000478:	2516      	movs	r5, #22
 800047a:	197c      	adds	r4, r7, r5
 800047c:	183a      	adds	r2, r7, r0
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	f001 fef7 	bl	8002278 <HAL_I2C_Master_Transmit>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]
	TIMEOUT_MINUTE);

	if (result != HAL_OK) {
 800048e:	197b      	adds	r3, r7, r5
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d003      	beq.n	800049e <bq769x0_reg_read_byte+0x46>
		// unable to send read request correctly
		return result;
 8000496:	2316      	movs	r3, #22
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	e00b      	b.n	80004b6 <bq769x0_reg_read_byte+0x5e>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, value, 1, TIMEOUT_MINUTE);
 800049e:	2317      	movs	r3, #23
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b299      	uxth	r1, r3
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	f001 ffea 	bl	8002488 <HAL_I2C_Master_Receive>
 80004b4:	0003      	movs	r3, r0
	}
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bdb0      	pop	{r4, r5, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	0000ea60 	.word	0x0000ea60

080004c4 <bq769x0_reg_read_bytes>:

HAL_StatusTypeDef bq769x0_reg_read_bytes(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t *buffer, size_t length) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	200b      	movs	r0, #11
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	1c0a      	adds	r2, r1, #0
 80004d6:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 80004d8:	2117      	movs	r1, #23
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2230      	movs	r2, #48	; 0x30
 80004de:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1,
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b299      	uxth	r1, r3
 80004e6:	2516      	movs	r5, #22
 80004e8:	197c      	adds	r4, r7, r5
 80004ea:	183a      	adds	r2, r7, r0
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	f001 fec0 	bl	8002278 <HAL_I2C_Master_Transmit>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]
	TIMEOUT_MINUTE);

	if (result != HAL_OK) {
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d003      	beq.n	800050c <bq769x0_reg_read_bytes+0x48>
		// unable to send read request correctly
		return result;
 8000504:	2316      	movs	r3, #22
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	e00d      	b.n	8000528 <bq769x0_reg_read_bytes+0x64>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, buffer, length,
 800050c:	2317      	movs	r3, #23
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b299      	uxth	r1, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b29c      	uxth	r4, r3
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0023      	movs	r3, r4
 8000522:	f001 ffb1 	bl	8002488 <HAL_I2C_Master_Receive>
 8000526:	0003      	movs	r3, r0
		TIMEOUT_MINUTE);
	}
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b006      	add	sp, #24
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	0000ea60 	.word	0x0000ea60

08000534 <bq769x0_read_gain_and_offset>:

HAL_StatusTypeDef bq769x0_read_gain_and_offset(I2C_HandleTypeDef *hi2c,
		uint8_t *gain, uint8_t *offset) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	uint8_t reading = 0;
 8000540:	2116      	movs	r1, #22
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result;

	// ADCOFFSET[7:0] = OFFSET[7:0]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCOFFSET, &reading);
 8000548:	2517      	movs	r5, #23
 800054a:	197c      	adds	r4, r7, r5
 800054c:	187a      	adds	r2, r7, r1
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2151      	movs	r1, #81	; 0x51
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff ff80 	bl	8000458 <bq769x0_reg_read_byte>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <bq769x0_read_gain_and_offset+0x44>
		*gain = 0;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
		return result;
 8000570:	2317      	movs	r3, #23
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	e05a      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*offset = reading;
 8000578:	2116      	movs	r1, #22
 800057a:	187b      	adds	r3, r7, r1
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	701a      	strb	r2, [r3, #0]
	reading = 0;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]

	// ADCGAIN2[7:5] = GAIN[2:0]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCGAIN2, &reading);
 8000588:	2517      	movs	r5, #23
 800058a:	197c      	adds	r4, r7, r5
 800058c:	187a      	adds	r2, r7, r1
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2159      	movs	r1, #89	; 0x59
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff60 	bl	8000458 <bq769x0_reg_read_byte>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d009      	beq.n	80005b8 <bq769x0_read_gain_and_offset+0x84>
		*gain = 0;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
		return result;
 80005b0:	2317      	movs	r3, #23
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	e03a      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*gain = (reading & 0b11100000) >> 5;
 80005b8:	2116      	movs	r1, #22
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	701a      	strb	r2, [r3, #0]
	reading = 0;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

	// ADCGAIN1[3:2] = GAIN[4:3]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCGAIN1, &reading);
 80005cc:	2517      	movs	r5, #23
 80005ce:	197c      	adds	r4, r7, r5
 80005d0:	187a      	adds	r2, r7, r1
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2150      	movs	r1, #80	; 0x50
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff3e 	bl	8000458 <bq769x0_reg_read_byte>
 80005dc:	0003      	movs	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80005e0:	197b      	adds	r3, r7, r5
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d009      	beq.n	80005fc <bq769x0_read_gain_and_offset+0xc8>
		*gain = 0;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		return result;
 80005f4:	2317      	movs	r3, #23
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	e018      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*gain |= ((reading & 0b00001100) << 1);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25a      	sxtb	r2, r3
 8000602:	2316      	movs	r3, #22
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	b25b      	sxtb	r3, r3
 800060c:	2118      	movs	r1, #24
 800060e:	400b      	ands	r3, r1
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2da      	uxtb	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	701a      	strb	r2, [r3, #0]

	adc_voltage_gain = *gain;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <bq769x0_read_gain_and_offset+0x104>)
 8000622:	701a      	strb	r2, [r3, #0]
	adc_voltage_offset = *offset;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <bq769x0_read_gain_and_offset+0x108>)
 800062a:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	0018      	movs	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	b006      	add	sp, #24
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	2000008c 	.word	0x2000008c
 800063c:	2000008d 	.word	0x2000008d

08000640 <bq769x0_read_voltage>:

HAL_StatusTypeDef bq769x0_read_voltage(I2C_HandleTypeDef *hi2c, int cell,
		uint16_t *voltage) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	if (adc_voltage_gain == 0 || adc_voltage_offset == 0) {
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <bq769x0_read_voltage+0x1c>
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <bq769x0_read_voltage+0x28>
		bq769x0_read_gain_and_offset(hi2c, &adc_voltage_gain,
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 800065e:	4925      	ldr	r1, [pc, #148]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ff66 	bl	8000534 <bq769x0_read_gain_and_offset>
				&adc_voltage_offset);
	}

	uint8_t reg = BQ769X0_REG_VC1_HI + cell * 2;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3306      	adds	r3, #6
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2117      	movs	r1, #23
 8000670:	187a      	adds	r2, r7, r1
 8000672:	18db      	adds	r3, r3, r3
 8000674:	7013      	strb	r3, [r2, #0]
	uint8_t buffer[2];

	// FIXME
	HAL_StatusTypeDef ret = bq769x0_reg_read_bytes(hi2c, reg, buffer, 2);
 8000676:	2516      	movs	r5, #22
 8000678:	197c      	adds	r4, r7, r5
 800067a:	2310      	movs	r3, #16
 800067c:	18fa      	adds	r2, r7, r3
 800067e:	187b      	adds	r3, r7, r1
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	2302      	movs	r3, #2
 8000686:	f7ff ff1d 	bl	80004c4 <bq769x0_reg_read_bytes>
 800068a:	0003      	movs	r3, r0
 800068c:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <bq769x0_read_voltage+0x5e>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		return ret;
 8000696:	2316      	movs	r3, #22
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	e026      	b.n	80006ec <bq769x0_read_voltage+0xac>
	}

	uint16_t adc_value = ((buffer[0] & 0b00111111) << 8) | buffer[1];
 800069e:	2110      	movs	r1, #16
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	23fc      	movs	r3, #252	; 0xfc
 80006aa:	019b      	lsls	r3, r3, #6
 80006ac:	4013      	ands	r3, r2
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	2114      	movs	r1, #20
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	801a      	strh	r2, [r3, #0]
	*voltage = adc_value * (365 + adc_voltage_gain) / 1000 + adc_voltage_offset;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	326e      	adds	r2, #110	; 0x6e
 80006ca:	32ff      	adds	r2, #255	; 0xff
 80006cc:	435a      	muls	r2, r3
 80006ce:	23fa      	movs	r3, #250	; 0xfa
 80006d0:	0099      	lsls	r1, r3, #2
 80006d2:	0010      	movs	r0, r2
 80006d4:	f7ff fdaa 	bl	800022c <__divsi3>
 80006d8:	0003      	movs	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	18d3      	adds	r3, r2, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b006      	add	sp, #24
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	2000008d 	.word	0x2000008d

080006fc <bq769x0_read_pack_voltage>:

HAL_StatusTypeDef bq769x0_read_pack_voltage(I2C_HandleTypeDef *hi2c,
		int total_cells, uint16_t *voltage) {
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	if (adc_voltage_gain == 0 || adc_voltage_offset == 0) {
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <bq769x0_read_pack_voltage+0x1c>
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d105      	bne.n	8000724 <bq769x0_read_pack_voltage+0x28>
		bq769x0_read_gain_and_offset(hi2c, &adc_voltage_gain,
 8000718:	4a30      	ldr	r2, [pc, #192]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 800071a:	492f      	ldr	r1, [pc, #188]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff ff08 	bl	8000534 <bq769x0_read_gain_and_offset>
				&adc_voltage_offset);
	}

	uint8_t buffer = 0;
 8000724:	2113      	movs	r1, #19
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]

	// FIXME
	HAL_StatusTypeDef ret = bq769x0_reg_read_byte(hi2c, BQ_BAT_HI, &buffer);
 800072c:	2517      	movs	r5, #23
 800072e:	197c      	adds	r4, r7, r5
 8000730:	187a      	adds	r2, r7, r1
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	212a      	movs	r1, #42	; 0x2a
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fe8e 	bl	8000458 <bq769x0_reg_read_byte>
 800073c:	0003      	movs	r3, r0
 800073e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8000740:	197b      	adds	r3, r7, r5
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <bq769x0_read_pack_voltage+0x5a>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		*voltage = 0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	801a      	strh	r2, [r3, #0]
		return ret;
 800074e:	2317      	movs	r3, #23
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	e03b      	b.n	80007ce <bq769x0_read_pack_voltage+0xd2>
	}
	uint16_t rawPackVoltage = buffer << 8;
 8000756:	2113      	movs	r1, #19
 8000758:	187b      	adds	r3, r7, r1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	2314      	movs	r3, #20
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0212      	lsls	r2, r2, #8
 8000764:	801a      	strh	r2, [r3, #0]
	ret = bq769x0_reg_read_byte(hi2c, BQ_BAT_LO, &buffer);
 8000766:	2517      	movs	r5, #23
 8000768:	197c      	adds	r4, r7, r5
 800076a:	187a      	adds	r2, r7, r1
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	212b      	movs	r1, #43	; 0x2b
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fe71 	bl	8000458 <bq769x0_reg_read_byte>
 8000776:	0003      	movs	r3, r0
 8000778:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800077a:	197b      	adds	r3, r7, r5
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <bq769x0_read_pack_voltage+0x94>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		*voltage = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
		return ret;
 8000788:	2317      	movs	r3, #23
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e01e      	b.n	80007ce <bq769x0_read_pack_voltage+0xd2>
	}
	rawPackVoltage |= buffer;
 8000790:	2313      	movs	r3, #19
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b299      	uxth	r1, r3
 8000798:	2014      	movs	r0, #20
 800079a:	183b      	adds	r3, r7, r0
 800079c:	183a      	adds	r2, r7, r0
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	430a      	orrs	r2, r1
 80007a2:	801a      	strh	r2, [r3, #0]

	*voltage = (4 * adc_voltage_gain * rawPackVoltage)
			+ (total_cells * adc_voltage_offset);
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	183a      	adds	r2, r7, r0
 80007ac:	8812      	ldrh	r2, [r2, #0]
 80007ae:	4353      	muls	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	b289      	uxth	r1, r1
 80007c0:	434b      	muls	r3, r1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	b29a      	uxth	r2, r3
	*voltage = (4 * adc_voltage_gain * rawPackVoltage)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80007cc:	2300      	movs	r3, #0

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b006      	add	sp, #24
 80007d4:	bdb0      	pop	{r4, r5, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	2000008d 	.word	0x2000008d

080007e0 <bq769x0_set_DSG>:
	uint8_t OV_TRIP = ((OV_TRIP_FULL >> 4) & 0b11111111);

	return bq769x0_reg_write_byte(hi2c, BQ_OV_TRIP, OV_TRIP);
}

HAL_StatusTypeDef bq769x0_set_DSG(I2C_HandleTypeDef *hi2c, uint8_t value) {
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	000a      	movs	r2, r1
 80007ea:	1cfb      	adds	r3, r7, #3
 80007ec:	701a      	strb	r2, [r3, #0]
	uint8_t currentReg = 0;
 80007ee:	210e      	movs	r1, #14
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = bq769x0_reg_read_byte(hi2c, BQ_SYS_CTRL2,
 80007f6:	250f      	movs	r5, #15
 80007f8:	197c      	adds	r4, r7, r5
 80007fa:	187a      	adds	r2, r7, r1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2105      	movs	r1, #5
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fe29 	bl	8000458 <bq769x0_reg_read_byte>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]
			&currentReg);

	if (result != HAL_OK) {
 800080a:	197b      	adds	r3, r7, r5
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <bq769x0_set_DSG+0x3a>
		return result;
 8000812:	230f      	movs	r3, #15
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	e01a      	b.n	8000850 <bq769x0_set_DSG+0x70>
	}

	// clear DSG_ON
	currentReg &= ~(1<<0);
 800081a:	210e      	movs	r1, #14
 800081c:	187b      	adds	r3, r7, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2201      	movs	r2, #1
 8000822:	4393      	bics	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	187b      	adds	r3, r7, r1
 8000828:	701a      	strb	r2, [r3, #0]

	// set DSG VALUE
	currentReg |= ((1<<0) & value);
 800082a:	1cfb      	adds	r3, r7, #3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	187b      	adds	r3, r7, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4313      	orrs	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	187b      	adds	r3, r7, r1
 800083e:	701a      	strb	r2, [r3, #0]

	// write back to register
	return bq769x0_reg_write_byte(hi2c, BQ_SYS_CTRL2, currentReg);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2105      	movs	r1, #5
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fddb 	bl	8000404 <bq769x0_reg_write_byte>
 800084e:	0003      	movs	r3, r0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b004      	add	sp, #16
 8000856:	bdb0      	pop	{r4, r5, r7, pc}

08000858 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	b0ca      	sub	sp, #296	; 0x128
 800085c:	af00      	add	r7, sp, #0

	char msg[256];

  hcan.Instance = CAN;
 800085e:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000860:	4a6c      	ldr	r2, [pc, #432]	; (8000a14 <MX_CAN_Init+0x1bc>)
 8000862:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000864:	4b6a      	ldr	r3, [pc, #424]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000866:	2220      	movs	r2, #32
 8000868:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <MX_CAN_Init+0x1b8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000870:	4b67      	ldr	r3, [pc, #412]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000876:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0312      	lsls	r2, r2, #12
 800087c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000880:	22e0      	movs	r2, #224	; 0xe0
 8000882:	03d2      	lsls	r2, r2, #15
 8000884:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800088c:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <MX_CAN_Init+0x1b8>)
 800088e:	2200      	movs	r2, #0
 8000890:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000894:	2200      	movs	r2, #0
 8000896:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_CAN_Init+0x1b8>)
 800089a:	2200      	movs	r2, #0
 800089c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <MX_CAN_Init+0x1b8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008a4:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <MX_CAN_Init+0x1b8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MX_CAN_Init+0x1b8>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fead 	bl	800160c <HAL_CAN_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d01a      	beq.n	80008ec <MX_CAN_Init+0x94>
  {
    Error_Handler();
 80008b6:	f000 fcd9 	bl	800126c <Error_Handler>
    sprintf(msg, "CAN: error init.\r\n");
 80008ba:	2028      	movs	r0, #40	; 0x28
 80008bc:	183b      	adds	r3, r7, r0
 80008be:	4a56      	ldr	r2, [pc, #344]	; (8000a18 <MX_CAN_Init+0x1c0>)
 80008c0:	ca32      	ldmia	r2!, {r1, r4, r5}
 80008c2:	c332      	stmia	r3!, {r1, r4, r5}
 80008c4:	6811      	ldr	r1, [r2, #0]
 80008c6:	6019      	str	r1, [r3, #0]
 80008c8:	8891      	ldrh	r1, [r2, #4]
 80008ca:	8099      	strh	r1, [r3, #4]
 80008cc:	7992      	ldrb	r2, [r2, #6]
 80008ce:	719a      	strb	r2, [r3, #6]
    	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 80008d0:	0004      	movs	r4, r0
 80008d2:	183b      	adds	r3, r7, r0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fc17 	bl	8000108 <strlen>
 80008da:	0003      	movs	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	2301      	movs	r3, #1
 80008e0:	425b      	negs	r3, r3
 80008e2:	0020      	movs	r0, r4
 80008e4:	1839      	adds	r1, r7, r0
 80008e6:	484d      	ldr	r0, [pc, #308]	; (8000a1c <MX_CAN_Init+0x1c4>)
 80008e8:	f002 ff92 	bl	8003810 <HAL_UART_Transmit>
  }


  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterBank = 0;
 80008ec:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <MX_CAN_Init+0x1c8>)
 80008ee:	2294      	movs	r2, #148	; 0x94
 80008f0:	0052      	lsls	r2, r2, #1
 80008f2:	4694      	mov	ip, r2
 80008f4:	44bc      	add	ip, r7
 80008f6:	4463      	add	r3, ip
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008fc:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <MX_CAN_Init+0x1c8>)
 80008fe:	2294      	movs	r2, #148	; 0x94
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	4694      	mov	ip, r2
 8000904:	44bc      	add	ip, r7
 8000906:	4463      	add	r3, ip
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800090e:	2294      	movs	r2, #148	; 0x94
 8000910:	0052      	lsls	r2, r2, #1
 8000912:	4694      	mov	ip, r2
 8000914:	44bc      	add	ip, r7
 8000916:	4463      	add	r3, ip
 8000918:	2201      	movs	r2, #1
 800091a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800091e:	2294      	movs	r2, #148	; 0x94
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	4694      	mov	ip, r2
 8000924:	44bc      	add	ip, r7
 8000926:	4463      	add	r3, ip
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0001;
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800092e:	2294      	movs	r2, #148	; 0x94
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	4694      	mov	ip, r2
 8000934:	44bc      	add	ip, r7
 8000936:	4463      	add	r3, ip
 8000938:	2201      	movs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800093e:	2294      	movs	r2, #148	; 0x94
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	4694      	mov	ip, r2
 8000944:	44bc      	add	ip, r7
 8000946:	4463      	add	r3, ip
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800094e:	2294      	movs	r2, #148	; 0x94
 8000950:	0052      	lsls	r2, r2, #1
 8000952:	4694      	mov	ip, r2
 8000954:	44bc      	add	ip, r7
 8000956:	4463      	add	r3, ip
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800095e:	2294      	movs	r2, #148	; 0x94
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	4694      	mov	ip, r2
 8000964:	44bc      	add	ip, r7
 8000966:	4463      	add	r3, ip
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800096e:	2294      	movs	r2, #148	; 0x94
 8000970:	0052      	lsls	r2, r2, #1
 8000972:	4694      	mov	ip, r2
 8000974:	44bc      	add	ip, r7
 8000976:	4463      	add	r3, ip
 8000978:	2201      	movs	r2, #1
 800097a:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_CAN_Init+0x1c8>)
 800097e:	2294      	movs	r2, #148	; 0x94
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	4694      	mov	ip, r2
 8000984:	44bc      	add	ip, r7
 8000986:	4463      	add	r3, ip
 8000988:	220e      	movs	r2, #14
 800098a:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800098c:	003a      	movs	r2, r7
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_CAN_Init+0x1b8>)
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f000 ff38 	bl	8001808 <HAL_CAN_ConfigFilter>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d014      	beq.n	80009c6 <MX_CAN_Init+0x16e>
  {
    /* Filter configuration Error */
    Error_Handler();
 800099c:	f000 fc66 	bl	800126c <Error_Handler>
    sprintf(msg, "CAN: filter init.\r\n");
 80009a0:	2428      	movs	r4, #40	; 0x28
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <MX_CAN_Init+0x1cc>)
 80009a6:	ca23      	ldmia	r2!, {r0, r1, r5}
 80009a8:	c323      	stmia	r3!, {r0, r1, r5}
 80009aa:	ca03      	ldmia	r2!, {r0, r1}
 80009ac:	c303      	stmia	r3!, {r0, r1}
        	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fba9 	bl	8000108 <strlen>
 80009b6:	0003      	movs	r3, r0
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	1939      	adds	r1, r7, r4
 80009c0:	4816      	ldr	r0, [pc, #88]	; (8000a1c <MX_CAN_Init+0x1c4>)
 80009c2:	f002 ff25 	bl	8003810 <HAL_UART_Transmit>
        			HAL_MAX_DELAY);
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_CAN_Init+0x1b8>)
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f80f 	bl	80019ec <HAL_CAN_Start>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d01a      	beq.n	8000a08 <MX_CAN_Init+0x1b0>
  {
    /* Start Error */
    Error_Handler();
 80009d2:	f000 fc4b 	bl	800126c <Error_Handler>
    sprintf(msg, "CAN: start init.\r\n");
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_CAN_Init+0x1d0>)
 80009dc:	ca32      	ldmia	r2!, {r1, r4, r5}
 80009de:	c332      	stmia	r3!, {r1, r4, r5}
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	6019      	str	r1, [r3, #0]
 80009e4:	8891      	ldrh	r1, [r2, #4]
 80009e6:	8099      	strh	r1, [r3, #4]
 80009e8:	7992      	ldrb	r2, [r2, #6]
 80009ea:	719a      	strb	r2, [r3, #6]
        	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 80009ec:	0004      	movs	r4, r0
 80009ee:	183b      	adds	r3, r7, r0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fb89 	bl	8000108 <strlen>
 80009f6:	0003      	movs	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2301      	movs	r3, #1
 80009fc:	425b      	negs	r3, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	1839      	adds	r1, r7, r0
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_CAN_Init+0x1c4>)
 8000a04:	f002 ff04 	bl	8003810 <HAL_UART_Transmit>
        			HAL_MAX_DELAY);
  }

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b04a      	add	sp, #296	; 0x128
 8000a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a10:	2000009c 	.word	0x2000009c
 8000a14:	40006400 	.word	0x40006400
 8000a18:	080047e8 	.word	0x080047e8
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	fffffed8 	.word	0xfffffed8
 8000a24:	080047fc 	.word	0x080047fc
 8000a28:	08004810 	.word	0x08004810

08000a2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	2314      	movs	r3, #20
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f003 fabf 	bl	8003fc2 <memset>
  if(canHandle->Instance==CAN)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_CAN_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d133      	bne.n	8000ab6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0489      	lsls	r1, r1, #18
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	049b      	lsls	r3, r3, #18
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a86:	2114      	movs	r1, #20
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	22c0      	movs	r2, #192	; 0xc0
 8000a8c:	0152      	lsls	r2, r2, #5
 8000a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2202      	movs	r2, #2
 8000a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	2390      	movs	r3, #144	; 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 f99f 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00a      	add	sp, #40	; 0x28
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	240c      	movs	r4, #12
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f003 fa72 	bl	8003fc2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	03c9      	lsls	r1, r1, #15
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	03db      	lsls	r3, r3, #15
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	02c9      	lsls	r1, r1, #11
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	02db      	lsls	r3, r3, #11
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0xdc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f001 fac2 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <MX_GPIO_Init+0xe0>)
 8000b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	193a      	adds	r2, r7, r4
 8000b54:	2390      	movs	r3, #144	; 0x90
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f94a 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b60:	0021      	movs	r1, r4
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	01d2      	lsls	r2, r2, #7
 8000b68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <MX_GPIO_Init+0xdc>)
 8000b80:	0019      	movs	r1, r3
 8000b82:	0010      	movs	r0, r2
 8000b84:	f001 f936 	bl	8001df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2006      	movs	r0, #6
 8000b8e:	f001 f8ff 	bl	8001d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b92:	2006      	movs	r0, #6
 8000b94:	f001 f911 	bl	8001dba <HAL_NVIC_EnableIRQ>

}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b009      	add	sp, #36	; 0x24
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	10110000 	.word	0x10110000

08000bac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 faaf 	bl	800214c <HAL_I2C_Init>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 fb3b 	bl	800126c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 ff30 	bl	8002a60 <HAL_I2CEx_ConfigAnalogFilter>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 fb32 	bl	800126c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 ff73 	bl	8002af8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 fb29 	bl	800126c <Error_Handler>
  }

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000c4 	.word	0x200000c4
 8000c24:	40005400 	.word	0x40005400
 8000c28:	2000090e 	.word	0x2000090e

08000c2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2314      	movs	r3, #20
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 f9bf 	bl	8003fc2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <HAL_I2C_MspInit+0x90>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d131      	bne.n	8000cb2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	02c9      	lsls	r1, r1, #11
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	02db      	lsls	r3, r3, #11
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6a:	2114      	movs	r1, #20
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	22c0      	movs	r2, #192	; 0xc0
 8000c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2212      	movs	r2, #18
 8000c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2203      	movs	r2, #3
 8000c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2201      	movs	r2, #1
 8000c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_I2C_MspInit+0x98>)
 8000c8e:	0019      	movs	r1, r3
 8000c90:	0010      	movs	r0, r2
 8000c92:	f001 f8af 	bl	8001df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0389      	lsls	r1, r1, #14
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_I2C_MspInit+0x94>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	039b      	lsls	r3, r3, #14
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b00a      	add	sp, #40	; 0x28
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b0cb      	sub	sp, #300	; 0x12c
 8000ccc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char msg[256];

	TxHeader.ExtId = 0x02;
 8000cce:	4b73      	ldr	r3, [pc, #460]	; (8000e9c <main+0x1d4>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 8000cd4:	4b71      	ldr	r3, [pc, #452]	; (8000e9c <main+0x1d4>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <main+0x1d4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8000ce0:	4b6e      	ldr	r3, [pc, #440]	; (8000e9c <main+0x1d4>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000ce6:	4b6d      	ldr	r3, [pc, #436]	; (8000e9c <main+0x1d4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fc08 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 fa62 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f7ff fee8 	bl	8000ac8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf8:	f7ff ff58 	bl	8000bac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cfc:	f000 fb40 	bl	8001380 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000d00:	f7ff fdaa 	bl	8000858 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	uint16_t underVoltage = 27;
 8000d04:	238d      	movs	r3, #141	; 0x8d
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	221b      	movs	r2, #27
 8000d0c:	801a      	strh	r2, [r3, #0]
	uint16_t overVoltage = 3700;
 8000d0e:	238c      	movs	r3, #140	; 0x8c
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	4a62      	ldr	r2, [pc, #392]	; (8000ea0 <main+0x1d8>)
 8000d16:	801a      	strh	r2, [r3, #0]

	sprintf(msg, "startup.\r\n");
 8000d18:	200c      	movs	r0, #12
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	4a61      	ldr	r2, [pc, #388]	; (8000ea4 <main+0x1dc>)
 8000d1e:	ca12      	ldmia	r2!, {r1, r4}
 8000d20:	c312      	stmia	r3!, {r1, r4}
 8000d22:	8811      	ldrh	r1, [r2, #0]
 8000d24:	8019      	strh	r1, [r3, #0]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000d2a:	0004      	movs	r4, r0
 8000d2c:	183b      	adds	r3, r7, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff f9ea 	bl	8000108 <strlen>
 8000d34:	0003      	movs	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	0020      	movs	r0, r4
 8000d3e:	1839      	adds	r1, r7, r0
 8000d40:	4859      	ldr	r0, [pc, #356]	; (8000ea8 <main+0x1e0>)
 8000d42:	f002 fd65 	bl	8003810 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	int idx = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	228e      	movs	r2, #142	; 0x8e
 8000d4a:	0052      	lsls	r2, r2, #1
 8000d4c:	18ba      	adds	r2, r7, r2
 8000d4e:	6013      	str	r3, [r2, #0]
	uint8_t sys_stat = 0;
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <main+0x1e4>)
 8000d52:	2290      	movs	r2, #144	; 0x90
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	4694      	mov	ip, r2
 8000d58:	44bc      	add	ip, r7
 8000d5a:	4463      	add	r3, ip
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT,
 8000d60:	2518      	movs	r5, #24
 8000d62:	35ff      	adds	r5, #255	; 0xff
 8000d64:	197c      	adds	r4, r7, r5
 8000d66:	230b      	movs	r3, #11
 8000d68:	18fa      	adds	r2, r7, r3
 8000d6a:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <main+0x1e8>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fb72 	bl	8000458 <bq769x0_reg_read_byte>
 8000d74:	0003      	movs	r3, r0
 8000d76:	7023      	strb	r3, [r4, #0]
			&sys_stat);

	if (result != HAL_OK) {
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d017      	beq.n	8000db0 <main+0xe8>
		sprintf(msg, "error reading sys_stat.\r\n");
 8000d80:	210c      	movs	r1, #12
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <main+0x1ec>)
 8000d86:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d88:	c331      	stmia	r3!, {r0, r4, r5}
 8000d8a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d8c:	c331      	stmia	r3!, {r0, r4, r5}
 8000d8e:	8812      	ldrh	r2, [r2, #0]
 8000d90:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000d92:	000c      	movs	r4, r1
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff f9b6 	bl	8000108 <strlen>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	0021      	movs	r1, r4
 8000da6:	1879      	adds	r1, r7, r1
 8000da8:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <main+0x1e0>)
 8000daa:	f002 fd31 	bl	8003810 <HAL_UART_Transmit>
 8000dae:	e04d      	b.n	8000e4c <main+0x184>
				HAL_MAX_DELAY);
	} else {
		sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <main+0x1e4>)
 8000db2:	2290      	movs	r2, #144	; 0x90
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	4694      	mov	ip, r2
 8000db8:	44bc      	add	ip, r7
 8000dba:	4463      	add	r3, ip
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	493d      	ldr	r1, [pc, #244]	; (8000eb8 <main+0x1f0>)
 8000dc2:	240c      	movs	r4, #12
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f003 f9be 	bl	8004148 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff f99a 	bl	8000108 <strlen>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	1939      	adds	r1, r7, r4
 8000dde:	4832      	ldr	r0, [pc, #200]	; (8000ea8 <main+0x1e0>)
 8000de0:	f002 fd16 	bl	8003810 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		if (sys_stat > 0) {
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <main+0x1e4>)
 8000de6:	2290      	movs	r2, #144	; 0x90
 8000de8:	0052      	lsls	r2, r2, #1
 8000dea:	4694      	mov	ip, r2
 8000dec:	44bc      	add	ip, r7
 8000dee:	4463      	add	r3, ip
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d02a      	beq.n	8000e4c <main+0x184>
			uint8_t clear = sys_stat;// & 0b00010011;
 8000df6:	218b      	movs	r1, #139	; 0x8b
 8000df8:	0049      	lsls	r1, r1, #1
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <main+0x1e4>)
 8000dfe:	2090      	movs	r0, #144	; 0x90
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	4684      	mov	ip, r0
 8000e04:	44bc      	add	ip, r7
 8000e06:	4462      	add	r2, ip
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
			// SCD
			HAL_StatusTypeDef result = bq769x0_reg_write_byte(&hi2c1,
 8000e0c:	2516      	movs	r5, #22
 8000e0e:	35ff      	adds	r5, #255	; 0xff
 8000e10:	197c      	adds	r4, r7, r5
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <main+0x1e8>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff faf2 	bl	8000404 <bq769x0_reg_write_byte>
 8000e20:	0003      	movs	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
					BQ_SYS_STAT, clear);
			sprintf(msg, "result: %d\r\n", result);
 8000e24:	197b      	adds	r3, r7, r5
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4924      	ldr	r1, [pc, #144]	; (8000ebc <main+0x1f4>)
 8000e2a:	240c      	movs	r4, #12
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f003 f98a 	bl	8004148 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff f966 	bl	8000108 <strlen>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	2301      	movs	r3, #1
 8000e42:	425b      	negs	r3, r3
 8000e44:	1939      	adds	r1, r7, r4
 8000e46:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <main+0x1e0>)
 8000e48:	f002 fce2 	bl	8003810 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
	}

	result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT, &sys_stat);
 8000e4c:	2518      	movs	r5, #24
 8000e4e:	35ff      	adds	r5, #255	; 0xff
 8000e50:	197c      	adds	r4, r7, r5
 8000e52:	230b      	movs	r3, #11
 8000e54:	18fa      	adds	r2, r7, r3
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <main+0x1e8>)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fafc 	bl	8000458 <bq769x0_reg_read_byte>
 8000e60:	0003      	movs	r3, r0
 8000e62:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8000e64:	197b      	adds	r3, r7, r5
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d029      	beq.n	8000ec0 <main+0x1f8>
		sprintf(msg, "error reading sys_stat.\r\n");
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <main+0x1ec>)
 8000e72:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e74:	c331      	stmia	r3!, {r0, r4, r5}
 8000e76:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e78:	c331      	stmia	r3!, {r0, r4, r5}
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000e7e:	000c      	movs	r4, r1
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff f940 	bl	8000108 <strlen>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	0021      	movs	r1, r4
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <main+0x1e0>)
 8000e96:	f002 fcbb 	bl	8003810 <HAL_UART_Transmit>
 8000e9a:	e02b      	b.n	8000ef4 <main+0x22c>
 8000e9c:	2000011c 	.word	0x2000011c
 8000ea0:	00000e74 	.word	0x00000e74
 8000ea4:	08004824 	.word	0x08004824
 8000ea8:	20000134 	.word	0x20000134
 8000eac:	fffffeeb 	.word	0xfffffeeb
 8000eb0:	200000c4 	.word	0x200000c4
 8000eb4:	08004830 	.word	0x08004830
 8000eb8:	0800484c 	.word	0x0800484c
 8000ebc:	0800485c 	.word	0x0800485c
				HAL_MAX_DELAY);
	} else {
		sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 8000ec0:	4baa      	ldr	r3, [pc, #680]	; (800116c <main+0x4a4>)
 8000ec2:	2290      	movs	r2, #144	; 0x90
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	001a      	movs	r2, r3
 8000ed0:	49a7      	ldr	r1, [pc, #668]	; (8001170 <main+0x4a8>)
 8000ed2:	240c      	movs	r4, #12
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f003 f936 	bl	8004148 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff f912 	bl	8000108 <strlen>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2301      	movs	r3, #1
 8000eea:	425b      	negs	r3, r3
 8000eec:	1939      	adds	r1, r7, r4
 8000eee:	48a1      	ldr	r0, [pc, #644]	; (8001174 <main+0x4ac>)
 8000ef0:	f002 fc8e 	bl	8003810 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	uint8_t gain = 0;
 8000ef4:	4ba0      	ldr	r3, [pc, #640]	; (8001178 <main+0x4b0>)
 8000ef6:	2290      	movs	r2, #144	; 0x90
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	4694      	mov	ip, r2
 8000efc:	44bc      	add	ip, r7
 8000efe:	4463      	add	r3, ip
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 8000f04:	4b9d      	ldr	r3, [pc, #628]	; (800117c <main+0x4b4>)
 8000f06:	2290      	movs	r2, #144	; 0x90
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	44bc      	add	ip, r7
 8000f0e:	4463      	add	r3, ip
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
	bq769x0_read_gain_and_offset(&hi2c1, &gain, &offset);
 8000f14:	2309      	movs	r3, #9
 8000f16:	18fa      	adds	r2, r7, r3
 8000f18:	230a      	movs	r3, #10
 8000f1a:	18f9      	adds	r1, r7, r3
 8000f1c:	4b98      	ldr	r3, [pc, #608]	; (8001180 <main+0x4b8>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fb08 	bl	8000534 <bq769x0_read_gain_and_offset>

	sprintf(msg, "gain: %d, offset: %d.\r\n", gain, offset);
 8000f24:	4b94      	ldr	r3, [pc, #592]	; (8001178 <main+0x4b0>)
 8000f26:	2290      	movs	r2, #144	; 0x90
 8000f28:	0052      	lsls	r2, r2, #1
 8000f2a:	4694      	mov	ip, r2
 8000f2c:	44bc      	add	ip, r7
 8000f2e:	4463      	add	r3, ip
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	001a      	movs	r2, r3
 8000f34:	4b91      	ldr	r3, [pc, #580]	; (800117c <main+0x4b4>)
 8000f36:	2190      	movs	r1, #144	; 0x90
 8000f38:	0049      	lsls	r1, r1, #1
 8000f3a:	468c      	mov	ip, r1
 8000f3c:	44bc      	add	ip, r7
 8000f3e:	4463      	add	r3, ip
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4990      	ldr	r1, [pc, #576]	; (8001184 <main+0x4bc>)
 8000f44:	250c      	movs	r5, #12
 8000f46:	1978      	adds	r0, r7, r5
 8000f48:	f003 f8fe 	bl	8004148 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000f4c:	197b      	adds	r3, r7, r5
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff f8da 	bl	8000108 <strlen>
 8000f54:	0003      	movs	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	1979      	adds	r1, r7, r5
 8000f5e:	4885      	ldr	r0, [pc, #532]	; (8001174 <main+0x4ac>)
 8000f60:	f002 fc56 	bl	8003810 <HAL_UART_Transmit>
	sprintf(msg, "result: %d, under_voltage: %d, over_voltage: %d.\r\n", result, underVoltage, overVoltage);
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
				HAL_MAX_DELAY);
				*/

	uint8_t dsg_on = 0;
 8000f64:	218a      	movs	r1, #138	; 0x8a
 8000f66:	0049      	lsls	r1, r1, #1
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	result = bq769x0_set_DSG(&hi2c1, dsg_on);
 8000f6e:	2418      	movs	r4, #24
 8000f70:	34ff      	adds	r4, #255	; 0xff
 8000f72:	0026      	movs	r6, r4
 8000f74:	193c      	adds	r4, r7, r4
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <main+0x4b8>)
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fc2e 	bl	80007e0 <bq769x0_set_DSG>
 8000f84:	0003      	movs	r3, r0
 8000f86:	7023      	strb	r3, [r4, #0]
	sprintf(msg, "result: %d, dsg_on: %d.\r\n", result, dsg_on);
 8000f88:	0034      	movs	r4, r6
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	218a      	movs	r1, #138	; 0x8a
 8000f90:	0049      	lsls	r1, r1, #1
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	497c      	ldr	r1, [pc, #496]	; (8001188 <main+0x4c0>)
 8000f98:	1978      	adds	r0, r7, r5
 8000f9a:	f003 f8d5 	bl	8004148 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000f9e:	197b      	adds	r3, r7, r5
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff f8b1 	bl	8000108 <strlen>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	2301      	movs	r3, #1
 8000fac:	425b      	negs	r3, r3
 8000fae:	1979      	adds	r1, r7, r5
 8000fb0:	4870      	ldr	r0, [pc, #448]	; (8001174 <main+0x4ac>)
 8000fb2:	f002 fc2d 	bl	8003810 <HAL_UART_Transmit>
						HAL_MAX_DELAY);

	uint8_t sysctl2reg = 0;
 8000fb6:	4b75      	ldr	r3, [pc, #468]	; (800118c <main+0x4c4>)
 8000fb8:	2290      	movs	r2, #144	; 0x90
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	44bc      	add	ip, r7
 8000fc0:	4463      	add	r3, ip
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_CTRL2, &sysctl2reg);
 8000fc6:	0026      	movs	r6, r4
 8000fc8:	193c      	adds	r4, r7, r4
 8000fca:	2308      	movs	r3, #8
 8000fcc:	18fa      	adds	r2, r7, r3
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <main+0x4b8>)
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fa40 	bl	8000458 <bq769x0_reg_read_byte>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	7023      	strb	r3, [r4, #0]
	sprintf(msg, "result: %d, sys_ctrl2: %d.\r\n", result, sysctl2reg);
 8000fdc:	0034      	movs	r4, r6
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b6a      	ldr	r3, [pc, #424]	; (800118c <main+0x4c4>)
 8000fe4:	2190      	movs	r1, #144	; 0x90
 8000fe6:	0049      	lsls	r1, r1, #1
 8000fe8:	468c      	mov	ip, r1
 8000fea:	44bc      	add	ip, r7
 8000fec:	4463      	add	r3, ip
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4967      	ldr	r1, [pc, #412]	; (8001190 <main+0x4c8>)
 8000ff2:	1978      	adds	r0, r7, r5
 8000ff4:	f003 f8a8 	bl	8004148 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000ff8:	197b      	adds	r3, r7, r5
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f884 	bl	8000108 <strlen>
 8001000:	0003      	movs	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	2301      	movs	r3, #1
 8001006:	425b      	negs	r3, r3
 8001008:	1979      	adds	r1, r7, r5
 800100a:	485a      	ldr	r0, [pc, #360]	; (8001174 <main+0x4ac>)
 800100c:	f002 fc00 	bl	8003810 <HAL_UART_Transmit>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		int cell = 7;
 8001010:	2307      	movs	r3, #7
 8001012:	2188      	movs	r1, #136	; 0x88
 8001014:	0049      	lsls	r1, r1, #1
 8001016:	187a      	adds	r2, r7, r1
 8001018:	6013      	str	r3, [r2, #0]

		uint16_t voltage = 0;
 800101a:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <main+0x4cc>)
 800101c:	2290      	movs	r2, #144	; 0x90
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	4694      	mov	ip, r2
 8001022:	44bc      	add	ip, r7
 8001024:	4463      	add	r3, ip
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef volRes = bq769x0_read_voltage(&hi2c1, cell, &voltage);
 800102a:	2510      	movs	r5, #16
 800102c:	35ff      	adds	r5, #255	; 0xff
 800102e:	197c      	adds	r4, r7, r5
 8001030:	1dba      	adds	r2, r7, #6
 8001032:	187b      	adds	r3, r7, r1
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	4b52      	ldr	r3, [pc, #328]	; (8001180 <main+0x4b8>)
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff fb01 	bl	8000640 <bq769x0_read_voltage>
 800103e:	0003      	movs	r3, r0
 8001040:	7023      	strb	r3, [r4, #0]

		uint8_t vol_low = voltage;
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <main+0x4cc>)
 8001044:	2290      	movs	r2, #144	; 0x90
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	4694      	mov	ip, r2
 800104a:	44bc      	add	ip, r7
 800104c:	4463      	add	r3, ip
 800104e:	881a      	ldrh	r2, [r3, #0]
 8001050:	2687      	movs	r6, #135	; 0x87
 8001052:	0076      	lsls	r6, r6, #1
 8001054:	19bb      	adds	r3, r7, r6
 8001056:	701a      	strb	r2, [r3, #0]
		uint8_t vol_high = voltage >> 8;
 8001058:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <main+0x4cc>)
 800105a:	2290      	movs	r2, #144	; 0x90
 800105c:	0052      	lsls	r2, r2, #1
 800105e:	4694      	mov	ip, r2
 8001060:	44bc      	add	ip, r7
 8001062:	4463      	add	r3, ip
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29a      	uxth	r2, r3
 800106a:	230e      	movs	r3, #14
 800106c:	33ff      	adds	r3, #255	; 0xff
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	701a      	strb	r2, [r3, #0]

		uint16_t pack_voltage = 0;
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <main+0x4d0>)
 8001074:	2290      	movs	r2, #144	; 0x90
 8001076:	0052      	lsls	r2, r2, #1
 8001078:	4694      	mov	ip, r2
 800107a:	44bc      	add	ip, r7
 800107c:	4463      	add	r3, ip
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
		volRes = bq769x0_read_pack_voltage(&hi2c1, 10, &pack_voltage);
 8001082:	197c      	adds	r4, r7, r5
 8001084:	1d3a      	adds	r2, r7, #4
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <main+0x4b8>)
 8001088:	210a      	movs	r1, #10
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fb36 	bl	80006fc <bq769x0_read_pack_voltage>
 8001090:	0003      	movs	r3, r0
 8001092:	7023      	strb	r3, [r4, #0]

		sprintf(msg, "result: %d, v_low: %d, v_high: %d, voltage: %d\r\n", volRes, vol_low, vol_high, voltage);
 8001094:	197b      	adds	r3, r7, r5
 8001096:	781c      	ldrb	r4, [r3, #0]
 8001098:	19bb      	adds	r3, r7, r6
 800109a:	781d      	ldrb	r5, [r3, #0]
 800109c:	230e      	movs	r3, #14
 800109e:	33ff      	adds	r3, #255	; 0xff
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <main+0x4cc>)
 80010a6:	2190      	movs	r1, #144	; 0x90
 80010a8:	0049      	lsls	r1, r1, #1
 80010aa:	468c      	mov	ip, r1
 80010ac:	44bc      	add	ip, r7
 80010ae:	4462      	add	r2, ip
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	493a      	ldr	r1, [pc, #232]	; (800119c <main+0x4d4>)
 80010b4:	200c      	movs	r0, #12
 80010b6:	1838      	adds	r0, r7, r0
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	002b      	movs	r3, r5
 80010be:	0022      	movs	r2, r4
 80010c0:	f003 f842 	bl	8004148 <siprintf>
		//sprintf(msg, "result: %d, voltage (%d): %d, pack voltage: %d.\r\n", volRes, cell, voltage, pack_voltage);
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 80010c4:	200c      	movs	r0, #12
 80010c6:	0004      	movs	r4, r0
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff f81c 	bl	8000108 <strlen>
 80010d0:	0003      	movs	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	1939      	adds	r1, r7, r4
 80010da:	4826      	ldr	r0, [pc, #152]	; (8001174 <main+0x4ac>)
 80010dc:	f002 fb98 	bl	8003810 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		TxData[0] = vol_low;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <main+0x4d8>)
 80010e2:	19ba      	adds	r2, r7, r6
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	701a      	strb	r2, [r3, #0]
		TxData[1] = vol_high;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <main+0x4d8>)
 80010ea:	220e      	movs	r2, #14
 80010ec:	32ff      	adds	r2, #255	; 0xff
 80010ee:	18ba      	adds	r2, r7, r2
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	705a      	strb	r2, [r3, #1]
		// Request transmisison
					if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox)
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <main+0x4dc>)
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <main+0x4d8>)
 80010f8:	492b      	ldr	r1, [pc, #172]	; (80011a8 <main+0x4e0>)
 80010fa:	482c      	ldr	r0, [pc, #176]	; (80011ac <main+0x4e4>)
 80010fc:	f000 fcbc 	bl	8001a78 <HAL_CAN_AddTxMessage>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d012      	beq.n	800112a <main+0x462>
							!= HAL_OK) {
						sprintf(msg, "can error\r\n");
 8001104:	240c      	movs	r4, #12
 8001106:	193b      	adds	r3, r7, r4
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <main+0x4e8>)
 800110a:	ca23      	ldmia	r2!, {r0, r1, r5}
 800110c:	c323      	stmia	r3!, {r0, r1, r5}
								//sprintf(msg, "result: %d, voltage (%d): %d, pack voltage: %d.\r\n", volRes, cell, voltage, pack_voltage);
								HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 800110e:	193b      	adds	r3, r7, r4
 8001110:	0018      	movs	r0, r3
 8001112:	f7fe fff9 	bl	8000108 <strlen>
 8001116:	0003      	movs	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	425b      	negs	r3, r3
 800111e:	1939      	adds	r1, r7, r4
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <main+0x4ac>)
 8001122:	f002 fb75 	bl	8003810 <HAL_UART_Transmit>
										HAL_MAX_DELAY);
						Error_Handler();
 8001126:	f000 f8a1 	bl	800126c <Error_Handler>
					}

		idx++;
 800112a:	228e      	movs	r2, #142	; 0x8e
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	18bb      	adds	r3, r7, r2
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	18ba      	adds	r2, r7, r2
 8001136:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	481d      	ldr	r0, [pc, #116]	; (80011b4 <main+0x4ec>)
 800113e:	2200      	movs	r2, #0
 8001140:	0019      	movs	r1, r3
 8001142:	f000 ffbf 	bl	80020c4 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8001146:	23fa      	movs	r3, #250	; 0xfa
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fa3c 	bl	80015c8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	01db      	lsls	r3, r3, #7
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <main+0x4ec>)
 8001156:	2201      	movs	r2, #1
 8001158:	0019      	movs	r1, r3
 800115a:	f000 ffb3 	bl	80020c4 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 800115e:	23fa      	movs	r3, #250	; 0xfa
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fa30 	bl	80015c8 <HAL_Delay>
	while (1) {
 8001168:	e752      	b.n	8001010 <main+0x348>
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	fffffeeb 	.word	0xfffffeeb
 8001170:	0800484c 	.word	0x0800484c
 8001174:	20000134 	.word	0x20000134
 8001178:	fffffeea 	.word	0xfffffeea
 800117c:	fffffee9 	.word	0xfffffee9
 8001180:	200000c4 	.word	0x200000c4
 8001184:	0800486c 	.word	0x0800486c
 8001188:	08004884 	.word	0x08004884
 800118c:	fffffee8 	.word	0xfffffee8
 8001190:	080048a0 	.word	0x080048a0
 8001194:	fffffee6 	.word	0xfffffee6
 8001198:	fffffee4 	.word	0xfffffee4
 800119c:	080048c0 	.word	0x080048c0
 80011a0:	20000110 	.word	0x20000110
 80011a4:	20000118 	.word	0x20000118
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	2000009c 	.word	0x2000009c
 80011b0:	080048f4 	.word	0x080048f4
 80011b4:	48000400 	.word	0x48000400

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b099      	sub	sp, #100	; 0x64
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	242c      	movs	r4, #44	; 0x2c
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	2334      	movs	r3, #52	; 0x34
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f002 fefa 	bl	8003fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ce:	231c      	movs	r3, #28
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	0018      	movs	r0, r3
 80011d4:	2310      	movs	r3, #16
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f002 fef2 	bl	8003fc2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2318      	movs	r3, #24
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f002 feeb 	bl	8003fc2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	0021      	movs	r1, r4
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2202      	movs	r2, #2
 80011f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2201      	movs	r2, #1
 80011f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2210      	movs	r2, #16
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	187b      	adds	r3, r7, r1
 8001208:	0018      	movs	r0, r3
 800120a:	f001 fcc1 	bl	8002b90 <HAL_RCC_OscConfig>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001212:	f000 f82b 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	211c      	movs	r1, #28
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2207      	movs	r2, #7
 800121c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2100      	movs	r1, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f002 f831 	bl	800329c <HAL_RCC_ClockConfig>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800123e:	f000 f815 	bl	800126c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2221      	movs	r2, #33	; 0x21
 8001246:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	0018      	movs	r0, r3
 8001258:	f002 f998 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001260:	f000 f804 	bl	800126c <Error_Handler>
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b019      	add	sp, #100	; 0x64
 800126a:	bd90      	pop	{r4, r7, pc}

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_MspInit+0x44>)
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_MspInit+0x44>)
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_MspInit+0x44>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2201      	movs	r2, #1
 8001290:	4013      	ands	r3, r2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_MspInit+0x44>)
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_MspInit+0x44>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0549      	lsls	r1, r1, #21
 80012a0:	430a      	orrs	r2, r1
 80012a2:	61da      	str	r2, [r3, #28]
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_MspInit+0x44>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	055b      	lsls	r3, r3, #21
 80012ac:	4013      	ands	r3, r2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f952 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012f6:	2004      	movs	r0, #4
 80012f8:	f000 ff02 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012fc:	2008      	movs	r0, #8
 80012fe:	f000 feff 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f002 fe10 	bl	8003f5c <__errno>
 800133c:	0003      	movs	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	18d2      	adds	r2, r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b006      	add	sp, #24
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20001800 	.word	0x20001800
 8001368:	00000400 	.word	0x00000400
 800136c:	20000090 	.word	0x20000090
 8001370:	200001c0 	.word	0x200001c0

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART1_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800138c:	2296      	movs	r2, #150	; 0x96
 800138e:	0212      	lsls	r2, r2, #8
 8001390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013c4:	0018      	movs	r0, r3
 80013c6:	f002 f9cf 	bl	8003768 <HAL_UART_Init>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f7ff ff4d 	bl	800126c <Error_Handler>
  }

}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000134 	.word	0x20000134
 80013dc:	40013800 	.word	0x40013800

080013e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	2314      	movs	r3, #20
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	0018      	movs	r0, r3
 80013ee:	2314      	movs	r3, #20
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	f002 fde5 	bl	8003fc2 <memset>
  if(uartHandle->Instance==USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_UART_MspInit+0x94>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d133      	bne.n	800146a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_UART_MspInit+0x98>)
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_UART_MspInit+0x98>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	01c9      	lsls	r1, r1, #7
 800140c:	430a      	orrs	r2, r1
 800140e:	619a      	str	r2, [r3, #24]
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_UART_MspInit+0x98>)
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_UART_MspInit+0x98>)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x98>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0289      	lsls	r1, r1, #10
 8001428:	430a      	orrs	r2, r1
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_UART_MspInit+0x98>)
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143a:	2114      	movs	r1, #20
 800143c:	187b      	adds	r3, r7, r1
 800143e:	22c0      	movs	r2, #192	; 0xc0
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2202      	movs	r2, #2
 8001448:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2203      	movs	r2, #3
 8001454:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2201      	movs	r2, #1
 800145a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	187a      	adds	r2, r7, r1
 800145e:	2390      	movs	r3, #144	; 0x90
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fcc5 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b00a      	add	sp, #40	; 0x28
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000

0800147c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001482:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001484:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <LoopForever+0xa>)
    CMP R1, R2
 8001488:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800148a:	d105      	bne.n	8001498 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800148e:	4913      	ldr	r1, [pc, #76]	; (80014dc <LoopForever+0x12>)
    STR R1, [R0]
 8001490:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001494:	4913      	ldr	r1, [pc, #76]	; (80014e4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001496:	6001      	str	r1, [r0, #0]

08001498 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800149a:	4914      	ldr	r1, [pc, #80]	; (80014ec <LoopForever+0x22>)
  ldr r2, =_sidata
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <LoopForever+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80014b0:	4c11      	ldr	r4, [pc, #68]	; (80014f8 <LoopForever+0x2e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014be:	f7ff ff59 	bl	8001374 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014c2:	f002 fd51 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff fbff 	bl	8000cc8 <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   r0, =_estack
 80014cc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80014d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80014d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80014d8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80014dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f0:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 80014f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014f8:	200001bc 	.word	0x200001bc

080014fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_IRQHandler>
	...

08001500 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_Init+0x24>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_Init+0x24>)
 800150a:	2110      	movs	r1, #16
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f809 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001516:	f7ff feaf 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_InitTick+0x5c>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_InitTick+0x60>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	0098      	lsls	r0, r3, #2
 800153e:	f7fe fdeb 	bl	8000118 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fde6 	bl	8000118 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 fc43 	bl	8001dda <HAL_SYSTICK_Config>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d001      	beq.n	800155c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e00f      	b.n	800157c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d80b      	bhi.n	800157a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2301      	movs	r3, #1
 8001566:	425b      	negs	r3, r3
 8001568:	2200      	movs	r2, #0
 800156a:	0018      	movs	r0, r3
 800156c:	f000 fc10 	bl	8001d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_InitTick+0x64>)
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b003      	add	sp, #12
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	18d2      	adds	r2, r2, r3
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000008 	.word	0x20000008
 80015b0:	200001b4 	.word	0x200001b4

080015b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	200001b4 	.word	0x200001b4

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_Delay+0x40>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	001a      	movs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	f7ff ffe0 	bl	80015b4 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0f0      	b.n	8001800 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff f9fd 	bl	8000a2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2102      	movs	r1, #2
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001642:	f7ff ffb7 	bl	80015b4 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164a:	e013      	b.n	8001674 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164c:	f7ff ffb2 	bl	80015b4 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d90c      	bls.n	8001674 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	0292      	lsls	r2, r2, #10
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	2105      	movs	r1, #5
 800166e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0c5      	b.n	8001800 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d1e5      	bne.n	800164c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ff90 	bl	80015b4 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001698:	e013      	b.n	80016c2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800169a:	f7ff ff8b 	bl	80015b4 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	d90c      	bls.n	80016c2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	0292      	lsls	r2, r2, #10
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	2105      	movs	r1, #5
 80016bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09e      	b.n	8001800 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0e5      	beq.n	800169a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e1b      	ldrb	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	438a      	bics	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e5b      	ldrb	r3, [r3, #25]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	438a      	bics	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e9b      	ldrb	r3, [r3, #26]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2120      	movs	r1, #32
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2120      	movs	r1, #32
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7edb      	ldrb	r3, [r3, #27]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2110      	movs	r1, #16
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2110      	movs	r1, #16
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7f1b      	ldrb	r3, [r3, #28]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2108      	movs	r1, #8
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2108      	movs	r1, #8
 800179c:	438a      	bics	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f5b      	ldrb	r3, [r3, #29]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2104      	movs	r1, #4
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2104      	movs	r1, #4
 80017c6:	438a      	bics	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	431a      	orrs	r2, r3
 80017e0:	0011      	movs	r1, r2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	1e5a      	subs	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001818:	2013      	movs	r0, #19
 800181a:	183b      	adds	r3, r7, r0
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	2120      	movs	r1, #32
 8001820:	5c52      	ldrb	r2, [r2, r1]
 8001822:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001824:	183b      	adds	r3, r7, r0
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_CAN_ConfigFilter+0x30>
 800182c:	2313      	movs	r3, #19
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d000      	beq.n	8001838 <HAL_CAN_ConfigFilter+0x30>
 8001836:	e0cd      	b.n	80019d4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	58d3      	ldr	r3, [r2, r3]
 8001840:	2201      	movs	r2, #1
 8001842:	431a      	orrs	r2, r3
 8001844:	0011      	movs	r1, r2
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	221f      	movs	r2, #31
 8001854:	4013      	ands	r3, r2
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	2387      	movs	r3, #135	; 0x87
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	58d3      	ldr	r3, [r2, r3]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	2387      	movs	r3, #135	; 0x87
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d129      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	2383      	movs	r3, #131	; 0x83
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	58d3      	ldr	r3, [r2, r3]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	43d2      	mvns	r2, r2
 800188a:	401a      	ands	r2, r3
 800188c:	0011      	movs	r1, r2
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	2383      	movs	r3, #131	; 0x83
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018a8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3248      	adds	r2, #72	; 0x48
 80018ae:	00d2      	lsls	r2, r2, #3
 80018b0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c6:	6979      	ldr	r1, [r7, #20]
 80018c8:	3348      	adds	r3, #72	; 0x48
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	3304      	adds	r3, #4
 80018d0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d128      	bne.n	800192c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	2383      	movs	r3, #131	; 0x83
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	58d2      	ldr	r2, [r2, r3]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	0011      	movs	r1, r2
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	2383      	movs	r3, #131	; 0x83
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001902:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3248      	adds	r2, #72	; 0x48
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001920:	6979      	ldr	r1, [r7, #20]
 8001922:	3348      	adds	r3, #72	; 0x48
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	18cb      	adds	r3, r1, r3
 8001928:	3304      	adds	r3, #4
 800192a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10c      	bne.n	800194e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	2381      	movs	r3, #129	; 0x81
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	58d3      	ldr	r3, [r2, r3]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	43d2      	mvns	r2, r2
 8001940:	401a      	ands	r2, r3
 8001942:	0011      	movs	r1, r2
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2381      	movs	r3, #129	; 0x81
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	50d1      	str	r1, [r2, r3]
 800194c:	e00a      	b.n	8001964 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	2381      	movs	r3, #129	; 0x81
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	58d2      	ldr	r2, [r2, r3]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	431a      	orrs	r2, r3
 800195a:	0011      	movs	r1, r2
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	2381      	movs	r3, #129	; 0x81
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	2385      	movs	r3, #133	; 0x85
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	58d3      	ldr	r3, [r2, r3]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	43d2      	mvns	r2, r2
 8001978:	401a      	ands	r2, r3
 800197a:	0011      	movs	r1, r2
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	2385      	movs	r3, #133	; 0x85
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	50d1      	str	r1, [r2, r3]
 8001984:	e00a      	b.n	800199c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	2385      	movs	r3, #133	; 0x85
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	58d2      	ldr	r2, [r2, r3]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	0011      	movs	r1, r2
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	2385      	movs	r3, #133	; 0x85
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10a      	bne.n	80019ba <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	2387      	movs	r3, #135	; 0x87
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	58d2      	ldr	r2, [r2, r3]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	0011      	movs	r1, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	2387      	movs	r3, #135	; 0x87
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	58d3      	ldr	r3, [r2, r3]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	02d2      	lsls	r2, r2, #11
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b006      	add	sp, #24
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d12f      	bne.n	8001a60 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	2102      	movs	r1, #2
 8001a06:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fdcc 	bl	80015b4 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a20:	e013      	b.n	8001a4a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a22:	f7ff fdc7 	bl	80015b4 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d90c      	bls.n	8001a4a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0292      	lsls	r2, r2, #10
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	2105      	movs	r1, #5
 8001a44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e012      	b.n	8001a70 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1e5      	bne.n	8001a22 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e007      	b.n	8001a70 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	0312      	lsls	r2, r2, #12
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
  }
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a86:	201f      	movs	r0, #31
 8001a88:	183b      	adds	r3, r7, r0
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	5c52      	ldrb	r2, [r2, r1]
 8001a90:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_CAN_AddTxMessage+0x36>
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d000      	beq.n	8001aae <HAL_CAN_AddTxMessage+0x36>
 8001aac:	e0b7      	b.n	8001c1e <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	04db      	lsls	r3, r3, #19
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d10a      	bne.n	8001ace <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	051b      	lsls	r3, r3, #20
 8001abe:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ac0:	d105      	bne.n	8001ace <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	055b      	lsls	r3, r3, #21
 8001ac8:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aca:	d100      	bne.n	8001ace <HAL_CAN_AddTxMessage+0x56>
 8001acc:	e09e      	b.n	8001c0c <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	0e1b      	lsrs	r3, r3, #24
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d908      	bls.n	8001af0 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	0412      	lsls	r2, r2, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e09e      	b.n	8001c2e <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001af0:	2201      	movs	r2, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	409a      	lsls	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4311      	orrs	r1, r2
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	3218      	adds	r2, #24
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	50d1      	str	r1, [r2, r3]
 8001b1a:	e00f      	b.n	8001b3c <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b26:	431a      	orrs	r2, r3
 8001b28:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001b32:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	3218      	adds	r2, #24
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3318      	adds	r3, #24
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	18cb      	adds	r3, r1, r3
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	7d1b      	ldrb	r3, [r3, #20]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d112      	bne.n	8001b7e <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3318      	adds	r3, #24
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	18d3      	adds	r3, r2, r3
 8001b64:	3304      	adds	r3, #4
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3318      	adds	r3, #24
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	18cb      	adds	r3, r1, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3307      	adds	r3, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	061a      	lsls	r2, r3, #24
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3306      	adds	r3, #6
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3305      	adds	r3, #5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	23c6      	movs	r3, #198	; 0xc6
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	0109      	lsls	r1, r1, #4
 8001bb0:	1841      	adds	r1, r0, r1
 8001bb2:	18cb      	adds	r3, r1, r3
 8001bb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	061a      	lsls	r2, r3, #24
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	23c4      	movs	r3, #196	; 0xc4
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	0109      	lsls	r1, r1, #4
 8001be6:	1841      	adds	r1, r0, r1
 8001be8:	18cb      	adds	r3, r1, r3
 8001bea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	3218      	adds	r2, #24
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	58d2      	ldr	r2, [r2, r3]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	3218      	adds	r2, #24
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e010      	b.n	8001c2e <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	0392      	lsls	r2, r2, #14
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e007      	b.n	8001c2e <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	02d2      	lsls	r2, r2, #11
 8001c26:	431a      	orrs	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b008      	add	sp, #32
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4a:	d809      	bhi.n	8001c60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	001a      	movs	r2, r3
 8001c52:	231f      	movs	r3, #31
 8001c54:	401a      	ands	r2, r3
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_EnableIRQ+0x30>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4091      	lsls	r1, r2
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
  }
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	0002      	movs	r2, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c80:	d828      	bhi.n	8001cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c82:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <__NVIC_SetPriority+0xd4>)
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	33c0      	adds	r3, #192	; 0xc0
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	589b      	ldr	r3, [r3, r2]
 8001c92:	1dfa      	adds	r2, r7, #7
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	0011      	movs	r1, r2
 8001c98:	2203      	movs	r2, #3
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	00d2      	lsls	r2, r2, #3
 8001c9e:	21ff      	movs	r1, #255	; 0xff
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	43d2      	mvns	r2, r2
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	22ff      	movs	r2, #255	; 0xff
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	2303      	movs	r3, #3
 8001cba:	4003      	ands	r3, r0
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc0:	481f      	ldr	r0, [pc, #124]	; (8001d40 <__NVIC_SetPriority+0xd4>)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	33c0      	adds	r3, #192	; 0xc0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cd2:	e031      	b.n	8001d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <__NVIC_SetPriority+0xd8>)
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	0019      	movs	r1, r3
 8001cdc:	230f      	movs	r3, #15
 8001cde:	400b      	ands	r3, r1
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3306      	adds	r3, #6
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	3304      	adds	r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1dfa      	adds	r2, r7, #7
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	00d2      	lsls	r2, r2, #3
 8001cfa:	21ff      	movs	r1, #255	; 0xff
 8001cfc:	4091      	lsls	r1, r2
 8001cfe:	000a      	movs	r2, r1
 8001d00:	43d2      	mvns	r2, r2
 8001d02:	401a      	ands	r2, r3
 8001d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	22ff      	movs	r2, #255	; 0xff
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	0018      	movs	r0, r3
 8001d14:	2303      	movs	r3, #3
 8001d16:	4003      	ands	r3, r0
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <__NVIC_SetPriority+0xd8>)
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	001c      	movs	r4, r3
 8001d24:	230f      	movs	r3, #15
 8001d26:	4023      	ands	r3, r4
 8001d28:	3b08      	subs	r3, #8
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	3306      	adds	r3, #6
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	18c3      	adds	r3, r0, r3
 8001d34:	3304      	adds	r3, #4
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b003      	add	sp, #12
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <SysTick_Config+0x40>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e010      	b.n	8001d80 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <SysTick_Config+0x44>)
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	3a01      	subs	r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	2301      	movs	r3, #1
 8001d68:	425b      	negs	r3, r3
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff7d 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SysTick_Config+0x44>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x44>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	00ffffff 	.word	0x00ffffff
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	0011      	movs	r1, r2
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff ff5d 	bl	8001c6c <__NVIC_SetPriority>
}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b004      	add	sp, #16
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff ff33 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ffaf 	bl	8001d48 <SysTick_Config>
 8001dea:	0003      	movs	r3, r0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e149      	b.n	8002098 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <HAL_GPIO_Init+0x28>
 8001e1a:	e13a      	b.n	8002092 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d00b      	beq.n	8001e3c <HAL_GPIO_Init+0x48>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e30:	2b11      	cmp	r3, #17
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	2201      	movs	r2, #1
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0xea>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d123      	bne.n	8001f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	58d3      	ldr	r3, [r2, r3]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	43da      	mvns	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2107      	movs	r1, #7
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	6939      	ldr	r1, [r7, #16]
 8001f24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	401a      	ands	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	055b      	lsls	r3, r3, #21
 8001f62:	4013      	ands	r3, r2
 8001f64:	d100      	bne.n	8001f68 <HAL_GPIO_Init+0x174>
 8001f66:	e094      	b.n	8002092 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	619a      	str	r2, [r3, #24]
 8001f74:	4b4e      	ldr	r3, [pc, #312]	; (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f80:	4a4c      	ldr	r2, [pc, #304]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2203      	movs	r2, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	2390      	movs	r3, #144	; 0x90
 8001fa8:	05db      	lsls	r3, r3, #23
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x1d6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_GPIO_Init+0x2c4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x1d2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a40      	ldr	r2, [pc, #256]	; (80020bc <HAL_GPIO_Init+0x2c8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x1ce>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x1d8>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x1d8>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x1d8>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	2103      	movs	r1, #3
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fdc:	4935      	ldr	r1, [pc, #212]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	4013      	ands	r3, r2
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43da      	mvns	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43da      	mvns	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	035b      	lsls	r3, r3, #13
 8002056:	4013      	ands	r3, r2
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43da      	mvns	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	039b      	lsls	r3, r3, #14
 8002080:	4013      	ands	r3, r2
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	40da      	lsrs	r2, r3
 80020a0:	1e13      	subs	r3, r2, #0
 80020a2:	d000      	beq.n	80020a6 <HAL_GPIO_Init+0x2b2>
 80020a4:	e6ae      	b.n	8001e04 <HAL_GPIO_Init+0x10>
  } 
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	48000800 	.word	0x48000800
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	0008      	movs	r0, r1
 80020ce:	0011      	movs	r1, r2
 80020d0:	1cbb      	adds	r3, r7, #2
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	1c7b      	adds	r3, r7, #1
 80020d8:	1c0a      	adds	r2, r1, #0
 80020da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	1c7b      	adds	r3, r7, #1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e4:	1cbb      	adds	r3, r7, #2
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ee:	1cbb      	adds	r3, r7, #2
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	0002      	movs	r2, r0
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	1dba      	adds	r2, r7, #6
 8002112:	8812      	ldrh	r2, [r2, #0]
 8002114:	4013      	ands	r3, r2
 8002116:	d008      	beq.n	800212a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800211a:	1dba      	adds	r2, r7, #6
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f807 	bl	8002138 <HAL_GPIO_EXTI_Callback>
  }
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e082      	b.n	8002264 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f7fe fd59 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2241      	movs	r2, #65	; 0x41
 800217e:	2124      	movs	r1, #36	; 0x24
 8002180:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	438a      	bics	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4934      	ldr	r1, [pc, #208]	; (800226c <HAL_I2C_Init+0x120>)
 800219c:	400a      	ands	r2, r1
 800219e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4931      	ldr	r1, [pc, #196]	; (8002270 <HAL_I2C_Init+0x124>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	0209      	lsls	r1, r1, #8
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e007      	b.n	80021da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2184      	movs	r1, #132	; 0x84
 80021d4:	0209      	lsls	r1, r1, #8
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d104      	bne.n	80021ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	491f      	ldr	r1, [pc, #124]	; (8002274 <HAL_I2C_Init+0x128>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	491a      	ldr	r1, [pc, #104]	; (8002270 <HAL_I2C_Init+0x124>)
 8002208:	400a      	ands	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	431a      	orrs	r2, r3
 8002216:	0011      	movs	r1, r2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	021a      	lsls	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69d9      	ldr	r1, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2241      	movs	r2, #65	; 0x41
 8002250:	2120      	movs	r1, #32
 8002252:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2242      	movs	r2, #66	; 0x42
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f0ffffff 	.word	0xf0ffffff
 8002270:	ffff7fff 	.word	0xffff7fff
 8002274:	02008000 	.word	0x02008000

08002278 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	0008      	movs	r0, r1
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	0019      	movs	r1, r3
 8002286:	230a      	movs	r3, #10
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	1c02      	adds	r2, r0, #0
 800228c:	801a      	strh	r2, [r3, #0]
 800228e:	2308      	movs	r3, #8
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	1c0a      	adds	r2, r1, #0
 8002294:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2241      	movs	r2, #65	; 0x41
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d000      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0x2c>
 80022a2:	e0e7      	b.n	8002474 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2240      	movs	r2, #64	; 0x40
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0x3a>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0e1      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ba:	f7ff f97b 	bl	80015b4 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	0219      	lsls	r1, r3, #8
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2319      	movs	r3, #25
 80022ce:	2201      	movs	r2, #1
 80022d0:	f000 fa04 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2241      	movs	r2, #65	; 0x41
 80022e0:	2121      	movs	r1, #33	; 0x21
 80022e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2242      	movs	r2, #66	; 0x42
 80022e8:	2110      	movs	r1, #16
 80022ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2208      	movs	r2, #8
 80022fc:	18ba      	adds	r2, r7, r2
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d911      	bls.n	8002336 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	045c      	lsls	r4, r3, #17
 8002322:	230a      	movs	r3, #10
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	8819      	ldrh	r1, [r3, #0]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_I2C_Master_Transmit+0x208>)
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	0023      	movs	r3, r4
 8002330:	f000 fb60 	bl	80029f4 <I2C_TransferConfig>
 8002334:	e075      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	049c      	lsls	r4, r3, #18
 800234a:	230a      	movs	r3, #10
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	8819      	ldrh	r1, [r3, #0]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_I2C_Master_Transmit+0x208>)
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	0023      	movs	r3, r4
 8002358:	f000 fb4c 	bl	80029f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800235c:	e061      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f9f8 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e081      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03a      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d136      	bne.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	0013      	movs	r3, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	f000 f98b 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e053      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2bff      	cmp	r3, #255	; 0xff
 80023d6:	d911      	bls.n	80023fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	22ff      	movs	r2, #255	; 0xff
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	045c      	lsls	r4, r3, #17
 80023e8:	230a      	movs	r3, #10
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	8819      	ldrh	r1, [r3, #0]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	0023      	movs	r3, r4
 80023f6:	f000 fafd 	bl	80029f4 <I2C_TransferConfig>
 80023fa:	e012      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	049c      	lsls	r4, r3, #18
 8002410:	230a      	movs	r3, #10
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	8819      	ldrh	r1, [r3, #0]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	2300      	movs	r3, #0
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	0023      	movs	r3, r4
 800241e:	f000 fae9 	bl	80029f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d198      	bne.n	800235e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f9d0 	bl	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e01a      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2220      	movs	r2, #32
 8002446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	490c      	ldr	r1, [pc, #48]	; (8002484 <HAL_I2C_Master_Transmit+0x20c>)
 8002454:	400a      	ands	r2, r1
 8002456:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2241      	movs	r2, #65	; 0x41
 800245c:	2120      	movs	r1, #32
 800245e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2242      	movs	r2, #66	; 0x42
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b007      	add	sp, #28
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	80002000 	.word	0x80002000
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	0008      	movs	r0, r1
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	0019      	movs	r1, r3
 8002496:	230a      	movs	r3, #10
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	1c02      	adds	r2, r0, #0
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	2308      	movs	r3, #8
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	1c0a      	adds	r2, r1, #0
 80024a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2241      	movs	r2, #65	; 0x41
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d000      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x2c>
 80024b2:	e0e8      	b.n	8002686 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Master_Receive+0x3a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0e2      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ca:	f7ff f873 	bl	80015b4 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	0219      	lsls	r1, r3, #8
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2319      	movs	r3, #25
 80024de:	2201      	movs	r2, #1
 80024e0:	f000 f8fc 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0cd      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2241      	movs	r2, #65	; 0x41
 80024f0:	2122      	movs	r1, #34	; 0x22
 80024f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2242      	movs	r2, #66	; 0x42
 80024f8:	2110      	movs	r1, #16
 80024fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2208      	movs	r2, #8
 800250c:	18ba      	adds	r2, r7, r2
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d911      	bls.n	8002546 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	045c      	lsls	r4, r3, #17
 8002532:	230a      	movs	r3, #10
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	8819      	ldrh	r1, [r3, #0]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_I2C_Master_Receive+0x208>)
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0023      	movs	r3, r4
 8002540:	f000 fa58 	bl	80029f4 <I2C_TransferConfig>
 8002544:	e076      	b.n	8002634 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	b2da      	uxtb	r2, r3
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	049c      	lsls	r4, r3, #18
 800255a:	230a      	movs	r3, #10
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	8819      	ldrh	r1, [r3, #0]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_I2C_Master_Receive+0x208>)
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	0023      	movs	r3, r4
 8002568:	f000 fa44 	bl	80029f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800256c:	e062      	b.n	8002634 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f96b 	bl	8002850 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e082      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03a      	beq.n	8002634 <HAL_I2C_Master_Receive+0x1ac>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d136      	bne.n	8002634 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	0013      	movs	r3, r2
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	f000 f882 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80025d8:	1e03      	subs	r3, r0, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e053      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d911      	bls.n	800260e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	22ff      	movs	r2, #255	; 0xff
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	045c      	lsls	r4, r3, #17
 80025fa:	230a      	movs	r3, #10
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	8819      	ldrh	r1, [r3, #0]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	0023      	movs	r3, r4
 8002608:	f000 f9f4 	bl	80029f4 <I2C_TransferConfig>
 800260c:	e012      	b.n	8002634 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	b2da      	uxtb	r2, r3
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	049c      	lsls	r4, r3, #18
 8002622:	230a      	movs	r3, #10
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	0023      	movs	r3, r4
 8002630:	f000 f9e0 	bl	80029f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d197      	bne.n	800256e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f8c7 	bl	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e01a      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	490b      	ldr	r1, [pc, #44]	; (8002694 <HAL_I2C_Master_Receive+0x20c>)
 8002666:	400a      	ands	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2241      	movs	r2, #65	; 0x41
 800266e:	2120      	movs	r1, #32
 8002670:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2242      	movs	r2, #66	; 0x42
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b007      	add	sp, #28
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	80002400 	.word	0x80002400
 8002694:	fe00e800 	.word	0xfe00e800

08002698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2201      	movs	r2, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d007      	beq.n	80026d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
  }
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e021      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	d01e      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f4:	f7fe ff5e 	bl	80015b4 <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	2220      	movs	r2, #32
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2241      	movs	r2, #65	; 0x41
 800271a:	2120      	movs	r1, #32
 800271c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2242      	movs	r2, #66	; 0x42
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	425a      	negs	r2, r3
 8002742:	4153      	adcs	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	001a      	movs	r2, r3
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d0ce      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002766:	e02b      	b.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f8da 	bl	8002928 <I2C_IsAcknowledgeFailed>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e029      	b.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3301      	adds	r3, #1
 8002780:	d01e      	beq.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7fe ff17 	bl	80015b4 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d113      	bne.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	2220      	movs	r2, #32
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2241      	movs	r2, #65	; 0x41
 80027a8:	2120      	movs	r1, #32
 80027aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2242      	movs	r2, #66	; 0x42
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2202      	movs	r2, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d1cc      	bne.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e4:	e028      	b.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f89b 	bl	8002928 <I2C_IsAcknowledgeFailed>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e026      	b.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7fe fedb 	bl	80015b4 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d113      	bne.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2220      	movs	r2, #32
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2242      	movs	r2, #66	; 0x42
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e007      	b.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2220      	movs	r2, #32
 8002840:	4013      	ands	r3, r2
 8002842:	2b20      	cmp	r3, #32
 8002844:	d1cf      	bne.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800285c:	e055      	b.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f85f 	bl	8002928 <I2C_IsAcknowledgeFailed>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e053      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2220      	movs	r2, #32
 800287a:	4013      	ands	r3, r2
 800287c:	2b20      	cmp	r3, #32
 800287e:	d129      	bne.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2204      	movs	r2, #4
 8002888:	4013      	ands	r3, r2
 800288a:	2b04      	cmp	r3, #4
 800288c:	d105      	bne.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e03f      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2220      	movs	r2, #32
 80028a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	491d      	ldr	r1, [pc, #116]	; (8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2120      	movs	r1, #32
 80028be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2242      	movs	r2, #66	; 0x42
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	2100      	movs	r1, #0
 80028ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e022      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d4:	f7fe fe6e 	bl	80015b4 <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d302      	bcc.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	2220      	movs	r2, #32
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2241      	movs	r2, #65	; 0x41
 80028fa:	2120      	movs	r1, #32
 80028fc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	2100      	movs	r1, #0
 8002904:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e007      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2204      	movs	r2, #4
 8002912:	4013      	ands	r3, r2
 8002914:	2b04      	cmp	r3, #4
 8002916:	d1a2      	bne.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2210      	movs	r2, #16
 800293c:	4013      	ands	r3, r2
 800293e:	2b10      	cmp	r3, #16
 8002940:	d151      	bne.n	80029e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002942:	e021      	b.n	8002988 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3301      	adds	r3, #1
 8002948:	d01e      	beq.n	8002988 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fe33 	bl	80015b4 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_IsAcknowledgeFailed+0x38>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d113      	bne.n	8002988 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	2220      	movs	r2, #32
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2241      	movs	r2, #65	; 0x41
 8002970:	2120      	movs	r1, #32
 8002972:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2242      	movs	r2, #66	; 0x42
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2240      	movs	r2, #64	; 0x40
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e02f      	b.n	80029e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2220      	movs	r2, #32
 8002990:	4013      	ands	r3, r2
 8002992:	2b20      	cmp	r3, #32
 8002994:	d1d6      	bne.n	8002944 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2210      	movs	r2, #16
 800299c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff fe75 	bl	8002698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	490d      	ldr	r1, [pc, #52]	; (80029f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	2204      	movs	r2, #4
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2241      	movs	r2, #65	; 0x41
 80029ce:	2120      	movs	r1, #32
 80029d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2242      	movs	r2, #66	; 0x42
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2240      	movs	r2, #64	; 0x40
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	fe00e800 	.word	0xfe00e800

080029f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	0008      	movs	r0, r1
 80029fe:	0011      	movs	r1, r2
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	240a      	movs	r4, #10
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	1c02      	adds	r2, r0, #0
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	2009      	movs	r0, #9
 8002a0c:	183b      	adds	r3, r7, r0
 8002a0e:	1c0a      	adds	r2, r1, #0
 8002a10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	0d51      	lsrs	r1, r2, #21
 8002a1c:	2280      	movs	r2, #128	; 0x80
 8002a1e:	00d2      	lsls	r2, r2, #3
 8002a20:	400a      	ands	r2, r1
 8002a22:	490e      	ldr	r1, [pc, #56]	; (8002a5c <I2C_TransferConfig+0x68>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	43d2      	mvns	r2, r2
 8002a28:	401a      	ands	r2, r3
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	059b      	lsls	r3, r3, #22
 8002a32:	0d9a      	lsrs	r2, r3, #22
 8002a34:	183b      	adds	r3, r7, r0
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	0418      	lsls	r0, r3, #16
 8002a3a:	23ff      	movs	r3, #255	; 0xff
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	4003      	ands	r3, r0
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b005      	add	sp, #20
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	03ff63ff 	.word	0x03ff63ff

08002a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2241      	movs	r2, #65	; 0x41
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d138      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e032      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2241      	movs	r2, #65	; 0x41
 8002a90:	2124      	movs	r1, #36	; 0x24
 8002a92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4911      	ldr	r1, [pc, #68]	; (8002af4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2241      	movs	r2, #65	; 0x41
 8002ad8:	2120      	movs	r1, #32
 8002ada:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	ffffefff 	.word	0xffffefff

08002af8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2241      	movs	r2, #65	; 0x41
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d139      	bne.n	8002b82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	5c9b      	ldrb	r3, [r3, r2]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e033      	b.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	2101      	movs	r1, #1
 8002b22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2241      	movs	r2, #65	; 0x41
 8002b28:	2124      	movs	r1, #36	; 0x24
 8002b2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	438a      	bics	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2241      	movs	r2, #65	; 0x41
 8002b72:	2120      	movs	r1, #32
 8002b74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2240      	movs	r2, #64	; 0x40
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fffff0ff 	.word	0xfffff0ff

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f000 fb76 	bl	8003290 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x20>
 8002bae:	e08e      	b.n	8002cce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bb0:	4bc5      	ldr	r3, [pc, #788]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d00e      	beq.n	8002bda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbc:	4bc2      	ldr	r3, [pc, #776]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d117      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x68>
 8002bc8:	4bbf      	ldr	r3, [pc, #764]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	23c0      	movs	r3, #192	; 0xc0
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4bbb      	ldr	r3, [pc, #748]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_RCC_OscConfig+0x58>
 8002be6:	e071      	b.n	8002ccc <HAL_RCC_OscConfig+0x13c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
 8002bf0:	e06c      	b.n	8002ccc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f000 fb4c 	bl	8003290 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x80>
 8002c00:	4bb1      	ldr	r3, [pc, #708]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4bb0      	ldr	r3, [pc, #704]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	0249      	lsls	r1, r1, #9
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e02f      	b.n	8002c70 <HAL_RCC_OscConfig+0xe0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0xa2>
 8002c18:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4baa      	ldr	r3, [pc, #680]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	49ab      	ldr	r1, [pc, #684]	; (8002ecc <HAL_RCC_OscConfig+0x33c>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	4ba8      	ldr	r3, [pc, #672]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4ba7      	ldr	r3, [pc, #668]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	49a9      	ldr	r1, [pc, #676]	; (8002ed0 <HAL_RCC_OscConfig+0x340>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e01e      	b.n	8002c70 <HAL_RCC_OscConfig+0xe0>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d10e      	bne.n	8002c58 <HAL_RCC_OscConfig+0xc8>
 8002c3a:	4ba3      	ldr	r3, [pc, #652]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4ba2      	ldr	r3, [pc, #648]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	02c9      	lsls	r1, r1, #11
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	4b9f      	ldr	r3, [pc, #636]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b9e      	ldr	r3, [pc, #632]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0249      	lsls	r1, r1, #9
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xe0>
 8002c58:	4b9b      	ldr	r3, [pc, #620]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b9a      	ldr	r3, [pc, #616]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c5e:	499b      	ldr	r1, [pc, #620]	; (8002ecc <HAL_RCC_OscConfig+0x33c>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c6a:	4999      	ldr	r1, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x340>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fc9c 	bl	80015b4 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c82:	f7fe fc97 	bl	80015b4 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e2fd      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0xf2>
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fc87 	bl	80015b4 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fc82 	bl	80015b4 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e2e8      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	029b      	lsls	r3, r3, #10
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x11c>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x14a>
 8002cd8:	e06c      	b.n	8002db4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cda:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce4:	4b78      	ldr	r3, [pc, #480]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	220c      	movs	r2, #12
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d11f      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1a0>
 8002cf0:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	23c0      	movs	r3, #192	; 0xc0
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x188>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e2bb      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	22f8      	movs	r2, #248	; 0xf8
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e041      	b.n	8002db4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d024      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fc36 	bl	80015b4 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fc31 	bl	80015b4 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e297      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d0f1      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	22f8      	movs	r2, #248	; 0xf8
 8002d70:	4393      	bics	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00da      	lsls	r2, r3, #3
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e018      	b.n	8002db4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fc11 	bl	80015b4 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fc0c 	bl	80015b4 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e272      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	d1f1      	bne.n	8002d98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d036      	beq.n	8002e2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d019      	beq.n	8002dfa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fbef 	bl	80015b4 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fbea 	bl	80015b4 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e250      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d0f1      	beq.n	8002ddc <HAL_RCC_OscConfig+0x24c>
 8002df8:	e018      	b.n	8002e2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfe:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	438a      	bics	r2, r1
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fbd5 	bl	80015b4 <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fbd0 	bl	80015b4 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e236      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d1f1      	bne.n	8002e10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	d100      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
 8002e36:	e0b5      	b.n	8002fa4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e38:	231f      	movs	r3, #31
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	055b      	lsls	r3, r3, #21
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	0549      	lsls	r1, r1, #21
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	055b      	lsls	r3, r3, #21
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e68:	231f      	movs	r3, #31
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d11a      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	0049      	lsls	r1, r1, #1
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fb93 	bl	80015b4 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe fb8e 	bl	80015b4 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1f4      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x348>
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	621a      	str	r2, [r3, #32]
 8002ec6:	e035      	b.n	8002f34 <HAL_RCC_OscConfig+0x3a4>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	fffbffff 	.word	0xfffbffff
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x36a>
 8002ee0:	4bca      	ldr	r3, [pc, #808]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	4bc9      	ldr	r3, [pc, #804]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	621a      	str	r2, [r3, #32]
 8002eec:	4bc7      	ldr	r3, [pc, #796]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	4bc6      	ldr	r3, [pc, #792]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	621a      	str	r2, [r3, #32]
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x3a4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x38c>
 8002f02:	4bc2      	ldr	r3, [pc, #776]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	4bc1      	ldr	r3, [pc, #772]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f08:	2104      	movs	r1, #4
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	4bbf      	ldr	r3, [pc, #764]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	4bbe      	ldr	r3, [pc, #760]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	621a      	str	r2, [r3, #32]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x3a4>
 8002f1c:	4bbb      	ldr	r3, [pc, #748]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	4bba      	ldr	r3, [pc, #744]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	438a      	bics	r2, r1
 8002f26:	621a      	str	r2, [r3, #32]
 8002f28:	4bb8      	ldr	r3, [pc, #736]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	4bb7      	ldr	r3, [pc, #732]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	2104      	movs	r1, #4
 8002f30:	438a      	bics	r2, r1
 8002f32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d014      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fb3a 	bl	80015b4 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e009      	b.n	8002f5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fb35 	bl	80015b4 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	4aaf      	ldr	r2, [pc, #700]	; (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e19a      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4bac      	ldr	r3, [pc, #688]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3b6>
 8002f64:	e013      	b.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fb25 	bl	80015b4 <HAL_GetTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e009      	b.n	8002f84 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe fb20 	bl	80015b4 <HAL_GetTick>
 8002f74:	0002      	movs	r2, r0
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	4aa5      	ldr	r2, [pc, #660]	; (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e185      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4ba1      	ldr	r3, [pc, #644]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8e:	231f      	movs	r3, #31
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b9c      	ldr	r3, [pc, #624]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	4b9b      	ldr	r3, [pc, #620]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002f9e:	499d      	ldr	r1, [pc, #628]	; (8003214 <HAL_RCC_OscConfig+0x684>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	4013      	ands	r3, r2
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d12a      	bne.n	800300c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fb6:	4b95      	ldr	r3, [pc, #596]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b94      	ldr	r3, [pc, #592]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fc2:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc6:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fe faf1 	bl	80015b4 <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fd8:	f7fe faec 	bl	80015b4 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e152      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2202      	movs	r2, #2
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d0f1      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ff4:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	22f8      	movs	r2, #248	; 0xf8
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003006:	430a      	orrs	r2, r1
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
 800300a:	e034      	b.n	8003076 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	3305      	adds	r3, #5
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003014:	4b7d      	ldr	r3, [pc, #500]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003018:	4b7c      	ldr	r3, [pc, #496]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800301a:	2104      	movs	r1, #4
 800301c:	438a      	bics	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003020:	4b7a      	ldr	r3, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	22f8      	movs	r2, #248	; 0xf8
 8003026:	4393      	bics	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	; 0x34
 8003036:	e01e      	b.n	8003076 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003038:	4b74      	ldr	r3, [pc, #464]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800303e:	2104      	movs	r1, #4
 8003040:	430a      	orrs	r2, r1
 8003042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800304a:	2101      	movs	r1, #1
 800304c:	438a      	bics	r2, r1
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fab0 	bl	80015b4 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800305a:	f7fe faab 	bl	80015b4 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e111      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800306c:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2202      	movs	r2, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d1f1      	bne.n	800305a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	d05c      	beq.n	800313a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	220c      	movs	r2, #12
 8003086:	4013      	ands	r3, r2
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d00e      	beq.n	80030aa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	220c      	movs	r2, #12
 8003092:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003094:	2b08      	cmp	r3, #8
 8003096:	d114      	bne.n	80030c2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	025b      	lsls	r3, r3, #9
 80030a0:	401a      	ands	r2, r3
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	025b      	lsls	r3, r3, #9
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80030aa:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	4013      	ands	r3, r2
 80030b4:	d040      	beq.n	8003138 <HAL_RCC_OscConfig+0x5a8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d03c      	beq.n	8003138 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0e6      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01b      	beq.n	8003102 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80030cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ce:	4b4f      	ldr	r3, [pc, #316]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0249      	lsls	r1, r1, #9
 80030d4:	430a      	orrs	r2, r1
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fa6c 	bl	80015b4 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e2:	f7fe fa67 	bl	80015b4 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0cd      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030f4:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80030f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x552>
 8003100:	e01b      	b.n	800313a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003102:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003108:	4943      	ldr	r1, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x688>)
 800310a:	400a      	ands	r2, r1
 800310c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fa51 	bl	80015b4 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fe fa4c 	bl	80015b4 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0b2      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	025b      	lsls	r3, r3, #9
 8003132:	4013      	ands	r3, r2
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x588>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003138:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <HAL_RCC_OscConfig+0x5b4>
 8003142:	e0a4      	b.n	800328e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	220c      	movs	r2, #12
 800314a:	4013      	ands	r3, r2
 800314c:	2b08      	cmp	r3, #8
 800314e:	d100      	bne.n	8003152 <HAL_RCC_OscConfig+0x5c2>
 8003150:	e078      	b.n	8003244 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b02      	cmp	r3, #2
 8003158:	d14c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003160:	492e      	ldr	r1, [pc, #184]	; (800321c <HAL_RCC_OscConfig+0x68c>)
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe fa25 	bl	80015b4 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fa20 	bl	80015b4 <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e086      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	049b      	lsls	r3, r3, #18
 800318a:	4013      	ands	r3, r2
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	220f      	movs	r2, #15
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x690>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	431a      	orrs	r2, r3
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	0449      	lsls	r1, r1, #17
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe f9f3 	bl	80015b4 <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe f9ee 	bl	80015b4 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e054      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	049b      	lsls	r3, r3, #18
 80031ee:	4013      	ands	r3, r2
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x644>
 80031f2:	e04c      	b.n	800328e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_RCC_OscConfig+0x67c>)
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x68c>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe f9d8 	bl	80015b4 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x6a6>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	00001388 	.word	0x00001388
 8003214:	efffffff 	.word	0xefffffff
 8003218:	fffeffff 	.word	0xfffeffff
 800321c:	feffffff 	.word	0xfeffffff
 8003220:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe f9c6 	bl	80015b4 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e02c      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_OscConfig+0x708>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	049b      	lsls	r3, r3, #18
 800323e:	4013      	ands	r3, r2
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x694>
 8003242:	e024      	b.n	800328e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01f      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x708>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x708>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	23c0      	movs	r3, #192	; 0xc0
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	429a      	cmp	r2, r3
 800326a:	d10e      	bne.n	800328a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	220f      	movs	r2, #15
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d107      	bne.n	800328a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	23f0      	movs	r3, #240	; 0xf0
 800327e:	039b      	lsls	r3, r3, #14
 8003280:	401a      	ands	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b008      	add	sp, #32
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0bf      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d911      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b5e      	ldr	r3, [pc, #376]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	4393      	bics	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d0:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0a6      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	4013      	ands	r3, r2
 80032f4:	d006      	beq.n	8003304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 80032fc:	21e0      	movs	r1, #224	; 0xe0
 80032fe:	00c9      	lsls	r1, r1, #3
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	22f0      	movs	r2, #240	; 0xf0
 800330a:	4393      	bics	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d04c      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	029b      	lsls	r3, r3, #10
 8003332:	4013      	ands	r3, r2
 8003334:	d120      	bne.n	8003378 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07a      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	049b      	lsls	r3, r3, #18
 800334a:	4013      	ands	r3, r2
 800334c:	d114      	bne.n	8003378 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06e      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	025b      	lsls	r3, r3, #9
 8003362:	4013      	ands	r3, r2
 8003364:	d108      	bne.n	8003378 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e062      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e05b      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	4393      	bics	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe f912 	bl	80015b4 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe f90d 	bl	80015b4 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_RCC_ClockConfig+0x1a4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e042      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	220c      	movs	r2, #12
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1ec      	bne.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d211      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_RCC_ClockConfig+0x1a8>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340c:	f000 f820 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003410:	0001      	movs	r1, r0
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	220f      	movs	r2, #15
 800341a:	4013      	ands	r3, r2
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1ac>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	000a      	movs	r2, r1
 8003422:	40da      	lsrs	r2, r3
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1b0>)
 8003426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003428:	2000      	movs	r0, #0
 800342a:	f7fe f87d 	bl	8001528 <HAL_InitTick>
  
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
 8003440:	00001388 	.word	0x00001388
 8003444:	fffff8ff 	.word	0xfffff8ff
 8003448:	08004920 	.word	0x08004920
 800344c:	20000000 	.word	0x20000000

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08f      	sub	sp, #60	; 0x3c
 8003454:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003456:	2314      	movs	r3, #20
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	4a37      	ldr	r2, [pc, #220]	; (8003538 <HAL_RCC_GetSysClockFreq+0xe8>)
 800345c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800345e:	c313      	stmia	r3!, {r0, r1, r4}
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_RCC_GetSysClockFreq+0xec>)
 8003468:	ca13      	ldmia	r2!, {r0, r1, r4}
 800346a:	c313      	stmia	r3!, {r0, r1, r4}
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	220c      	movs	r2, #12
 800348e:	4013      	ands	r3, r2
 8003490:	2b08      	cmp	r3, #8
 8003492:	d006      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x52>
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d043      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0xd0>
 8003498:	2b04      	cmp	r3, #4
 800349a:	d144      	bne.n	8003526 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf4>)
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034a0:	e044      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	220f      	movs	r2, #15
 80034a8:	4013      	ands	r3, r2
 80034aa:	2214      	movs	r2, #20
 80034ac:	18ba      	adds	r2, r7, r2
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCC_GetSysClockFreq+0xf0>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	220f      	movs	r2, #15
 80034b8:	4013      	ands	r3, r2
 80034ba:	1d3a      	adds	r2, r7, #4
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	401a      	ands	r2, r3
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d2:	481c      	ldr	r0, [pc, #112]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034d4:	f7fc fe20 	bl	8000118 <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	001a      	movs	r2, r3
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	4353      	muls	r3, r2
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	e01a      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80034e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	025b      	lsls	r3, r3, #9
 80034ea:	401a      	ands	r2, r3
 80034ec:	23c0      	movs	r3, #192	; 0xc0
 80034ee:	025b      	lsls	r3, r3, #9
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d109      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f6:	4814      	ldr	r0, [pc, #80]	; (8003548 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f8:	f7fc fe0e 	bl	8000118 <__udivsi3>
 80034fc:	0003      	movs	r3, r0
 80034fe:	001a      	movs	r2, r3
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	4353      	muls	r3, r2
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
 8003506:	e008      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350a:	480e      	ldr	r0, [pc, #56]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf4>)
 800350c:	f7fc fe04 	bl	8000118 <__udivsi3>
 8003510:	0003      	movs	r3, r0
 8003512:	001a      	movs	r2, r3
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	4353      	muls	r3, r2
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800351e:	e005      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003524:	e002      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800352a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b00f      	add	sp, #60	; 0x3c
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	08004900 	.word	0x08004900
 800353c:	08004910 	.word	0x08004910
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	02dc6c00 	.word	0x02dc6c00

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <HAL_RCC_GetHCLKFreq+0x10>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003564:	f7ff fff2 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003568:	0001      	movs	r1, r0
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	2207      	movs	r2, #7
 8003572:	4013      	ands	r3, r2
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	40d9      	lsrs	r1, r3
 800357a:	000b      	movs	r3, r1
}    
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	40021000 	.word	0x40021000
 8003588:	08004930 	.word	0x08004930

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	4013      	ands	r3, r2
 80035a6:	d100      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035a8:	e08f      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2317      	movs	r3, #23
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	055b      	lsls	r3, r3, #21
 80035ba:	4013      	ands	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	0549      	lsls	r1, r1, #21
 80035c8:	430a      	orrs	r2, r1
 80035ca:	61da      	str	r2, [r3, #28]
 80035cc:	4b60      	ldr	r3, [pc, #384]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	055b      	lsls	r3, r3, #21
 80035d4:	4013      	ands	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d11a      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0049      	lsls	r1, r1, #1
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fc:	f7fd ffda 	bl	80015b4 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fd ffd5 	bl	80015b4 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e097      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4013      	ands	r3, r2
 8003622:	d0f0      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	23c0      	movs	r3, #192	; 0xc0
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d034      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	23c0      	movs	r3, #192	; 0xc0
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4013      	ands	r3, r2
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	429a      	cmp	r2, r3
 8003644:	d02c      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a43      	ldr	r2, [pc, #268]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	0249      	lsls	r1, r1, #9
 800365a:	430a      	orrs	r2, r1
 800365c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800365e:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003664:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	400a      	ands	r2, r1
 8003668:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd ff9c 	bl	80015b4 <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e009      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd ff97 	bl	80015b4 <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e058      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d0f0      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b4:	2317      	movs	r3, #23
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036c4:	4927      	ldr	r1, [pc, #156]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036c6:	400a      	ands	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	4013      	ands	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	2203      	movs	r2, #3
 80036da:	4393      	bics	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2220      	movs	r2, #32
 80036ee:	4013      	ands	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	2210      	movs	r2, #16
 80036f8:	4393      	bics	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003702:	430a      	orrs	r2, r1
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	4013      	ands	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	4393      	bics	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003722:	430a      	orrs	r2, r1
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4013      	ands	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	4393      	bics	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003742:	430a      	orrs	r2, r1
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b006      	add	sp, #24
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	fffffcff 	.word	0xfffffcff
 800375c:	fffeffff 	.word	0xfffeffff
 8003760:	00001388 	.word	0x00001388
 8003764:	efffffff 	.word	0xefffffff

08003768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e044      	b.n	8003804 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2270      	movs	r2, #112	; 0x70
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7fd fe27 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2101      	movs	r1, #1
 80037a4:	438a      	bics	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f8d8 	bl	8003960 <UART_SetConfig>
 80037b0:	0003      	movs	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e024      	b.n	8003804 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fa51 	bl	8003c6c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	490d      	ldr	r1, [pc, #52]	; (800380c <HAL_UART_Init+0xa4>)
 80037d6:	400a      	ands	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	212a      	movs	r1, #42	; 0x2a
 80037e6:	438a      	bics	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fae9 	bl	8003dd4 <UART_CheckIdleState>
 8003802:	0003      	movs	r3, r0
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}
 800380c:	ffffb7ff 	.word	0xffffb7ff

08003810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	1dbb      	adds	r3, r7, #6
 800381e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	2b20      	cmp	r3, #32
 8003826:	d000      	beq.n	800382a <HAL_UART_Transmit+0x1a>
 8003828:	e095      	b.n	8003956 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_UART_Transmit+0x28>
 8003830:	1dbb      	adds	r3, r7, #6
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e08d      	b.n	8003958 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	429a      	cmp	r2, r3
 8003846:	d109      	bne.n	800385c <HAL_UART_Transmit+0x4c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d001      	beq.n	800385c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e07d      	b.n	8003958 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2270      	movs	r2, #112	; 0x70
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_UART_Transmit+0x5a>
 8003866:	2302      	movs	r3, #2
 8003868:	e076      	b.n	8003958 <HAL_UART_Transmit+0x148>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2270      	movs	r2, #112	; 0x70
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800387e:	f7fd fe99 	bl	80015b4 <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	2150      	movs	r1, #80	; 0x50
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1dba      	adds	r2, r7, #6
 8003894:	2152      	movs	r1, #82	; 0x52
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	015b      	lsls	r3, r3, #5
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d108      	bne.n	80038b8 <HAL_UART_Transmit+0xa8>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e003      	b.n	80038c0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c0:	e02d      	b.n	800391e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	0013      	movs	r3, r2
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	f000 fac6 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e03d      	b.n	8003958 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10b      	bne.n	80038fa <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	881a      	ldrh	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	05d2      	lsls	r2, r2, #23
 80038ec:	0dd2      	lsrs	r2, r2, #23
 80038ee:	b292      	uxth	r2, r2
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3302      	adds	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e008      	b.n	800390c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b292      	uxth	r2, r2
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2252      	movs	r2, #82	; 0x52
 8003910:	5a9b      	ldrh	r3, [r3, r2]
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b299      	uxth	r1, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2252      	movs	r2, #82	; 0x52
 800391c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2252      	movs	r2, #82	; 0x52
 8003922:	5a9b      	ldrh	r3, [r3, r2]
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1cb      	bne.n	80038c2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	0013      	movs	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	2140      	movs	r1, #64	; 0x40
 8003938:	f000 fa92 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d001      	beq.n	8003944 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e009      	b.n	8003958 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2270      	movs	r2, #112	; 0x70
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b008      	add	sp, #32
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800396c:	2317      	movs	r3, #23
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4aad      	ldr	r2, [pc, #692]	; (8003c48 <UART_SetConfig+0x2e8>)
 8003994:	4013      	ands	r3, r2
 8003996:	0019      	movs	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4aa8      	ldr	r2, [pc, #672]	; (8003c4c <UART_SetConfig+0x2ec>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a9f      	ldr	r2, [pc, #636]	; (8003c50 <UART_SetConfig+0x2f0>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a9b      	ldr	r2, [pc, #620]	; (8003c54 <UART_SetConfig+0x2f4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d125      	bne.n	8003a36 <UART_SetConfig+0xd6>
 80039ea:	4b9b      	ldr	r3, [pc, #620]	; (8003c58 <UART_SetConfig+0x2f8>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	2203      	movs	r2, #3
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d00f      	beq.n	8003a16 <UART_SetConfig+0xb6>
 80039f6:	d304      	bcc.n	8003a02 <UART_SetConfig+0xa2>
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d011      	beq.n	8003a20 <UART_SetConfig+0xc0>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0xac>
 8003a00:	e013      	b.n	8003a2a <UART_SetConfig+0xca>
 8003a02:	231f      	movs	r3, #31
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e022      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e01d      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a16:	231f      	movs	r3, #31
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e018      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a20:	231f      	movs	r3, #31
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2208      	movs	r2, #8
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e013      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a2a:	231f      	movs	r3, #31
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2210      	movs	r2, #16
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	e00d      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a88      	ldr	r2, [pc, #544]	; (8003c5c <UART_SetConfig+0x2fc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d104      	bne.n	8003a4a <UART_SetConfig+0xea>
 8003a40:	231f      	movs	r3, #31
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e003      	b.n	8003a52 <UART_SetConfig+0xf2>
 8003a4a:	231f      	movs	r3, #31
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2210      	movs	r2, #16
 8003a50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d000      	beq.n	8003a60 <UART_SetConfig+0x100>
 8003a5e:	e07d      	b.n	8003b5c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d01c      	beq.n	8003aa4 <UART_SetConfig+0x144>
 8003a6a:	dc02      	bgt.n	8003a72 <UART_SetConfig+0x112>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <UART_SetConfig+0x11c>
 8003a70:	e04b      	b.n	8003b0a <UART_SetConfig+0x1aa>
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d025      	beq.n	8003ac2 <UART_SetConfig+0x162>
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d037      	beq.n	8003aea <UART_SetConfig+0x18a>
 8003a7a:	e046      	b.n	8003b0a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7ff fd70 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8003a80:	0003      	movs	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	005a      	lsls	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	18d2      	adds	r2, r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0019      	movs	r1, r3
 8003a96:	0010      	movs	r0, r2
 8003a98:	f7fc fb3e 	bl	8000118 <__udivsi3>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	61bb      	str	r3, [r7, #24]
        break;
 8003aa2:	e037      	b.n	8003b14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	; (8003c60 <UART_SetConfig+0x300>)
 8003aac:	189a      	adds	r2, r3, r2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	0010      	movs	r0, r2
 8003ab6:	f7fc fb2f 	bl	8000118 <__udivsi3>
 8003aba:	0003      	movs	r3, r0
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e028      	b.n	8003b14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7ff fcc5 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	005a      	lsls	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	18d2      	adds	r2, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0019      	movs	r1, r3
 8003adc:	0010      	movs	r0, r2
 8003ade:	f7fc fb1b 	bl	8000118 <__udivsi3>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e014      	b.n	8003b14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	0252      	lsls	r2, r2, #9
 8003af4:	189a      	adds	r2, r3, r2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0019      	movs	r1, r3
 8003afc:	0010      	movs	r0, r2
 8003afe:	f7fc fb0b 	bl	8000118 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e004      	b.n	8003b14 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003b0a:	2317      	movs	r3, #23
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
        break;
 8003b12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	d91b      	bls.n	8003b52 <UART_SetConfig+0x1f2>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4a51      	ldr	r2, [pc, #324]	; (8003c64 <UART_SetConfig+0x304>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d817      	bhi.n	8003b52 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	200a      	movs	r0, #10
 8003b28:	183b      	adds	r3, r7, r0
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2207      	movs	r2, #7
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b299      	uxth	r1, r3
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	183a      	adds	r2, r7, r0
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	183a      	adds	r2, r7, r0
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e06c      	b.n	8003c2c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003b52:	2317      	movs	r3, #23
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e067      	b.n	8003c2c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003b5c:	231f      	movs	r3, #31
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d01b      	beq.n	8003b9e <UART_SetConfig+0x23e>
 8003b66:	dc02      	bgt.n	8003b6e <UART_SetConfig+0x20e>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0x218>
 8003b6c:	e049      	b.n	8003c02 <UART_SetConfig+0x2a2>
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d024      	beq.n	8003bbc <UART_SetConfig+0x25c>
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d035      	beq.n	8003be2 <UART_SetConfig+0x282>
 8003b76:	e044      	b.n	8003c02 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7ff fcf2 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	085a      	lsrs	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	18d2      	adds	r2, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0019      	movs	r1, r3
 8003b90:	0010      	movs	r0, r2
 8003b92:	f7fc fac1 	bl	8000118 <__udivsi3>
 8003b96:	0003      	movs	r3, r0
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	61bb      	str	r3, [r7, #24]
        break;
 8003b9c:	e036      	b.n	8003c0c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <UART_SetConfig+0x308>)
 8003ba6:	189a      	adds	r2, r3, r2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	0019      	movs	r1, r3
 8003bae:	0010      	movs	r0, r2
 8003bb0:	f7fc fab2 	bl	8000118 <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
        break;
 8003bba:	e027      	b.n	8003c0c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbc:	f7ff fc48 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	085a      	lsrs	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	18d2      	adds	r2, r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	f7fc fa9f 	bl	8000118 <__udivsi3>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	61bb      	str	r3, [r7, #24]
        break;
 8003be0:	e014      	b.n	8003c0c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	0212      	lsls	r2, r2, #8
 8003bec:	189a      	adds	r2, r3, r2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	f7fc fa8f 	bl	8000118 <__udivsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	61bb      	str	r3, [r7, #24]
        break;
 8003c00:	e004      	b.n	8003c0c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003c02:	2317      	movs	r3, #23
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
        break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d908      	bls.n	8003c24 <UART_SetConfig+0x2c4>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <UART_SetConfig+0x304>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d804      	bhi.n	8003c24 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e003      	b.n	8003c2c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003c24:	2317      	movs	r3, #23
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c38:	2317      	movs	r3, #23
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b008      	add	sp, #32
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	efff69f3 	.word	0xefff69f3
 8003c4c:	ffffcfff 	.word	0xffffcfff
 8003c50:	fffff4ff 	.word	0xfffff4ff
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	0000ffff 	.word	0x0000ffff
 8003c68:	007a1200 	.word	0x007a1200

08003c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <UART_AdvFeatureConfig+0x144>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <UART_AdvFeatureConfig+0x148>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <UART_AdvFeatureConfig+0x14c>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2208      	movs	r2, #8
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a34      	ldr	r2, [pc, #208]	; (8003dbc <UART_AdvFeatureConfig+0x150>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2210      	movs	r2, #16
 8003d02:	4013      	ands	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <UART_AdvFeatureConfig+0x154>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2220      	movs	r2, #32
 8003d24:	4013      	ands	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <UART_AdvFeatureConfig+0x158>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	4013      	ands	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <UART_AdvFeatureConfig+0x15c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	035b      	lsls	r3, r3, #13
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10b      	bne.n	8003d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <UART_AdvFeatureConfig+0x160>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <UART_AdvFeatureConfig+0x164>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	fffdffff 	.word	0xfffdffff
 8003db4:	fffeffff 	.word	0xfffeffff
 8003db8:	fffbffff 	.word	0xfffbffff
 8003dbc:	ffff7fff 	.word	0xffff7fff
 8003dc0:	ffffefff 	.word	0xffffefff
 8003dc4:	ffffdfff 	.word	0xffffdfff
 8003dc8:	ffefffff 	.word	0xffefffff
 8003dcc:	ff9fffff 	.word	0xff9fffff
 8003dd0:	fff7ffff 	.word	0xfff7ffff

08003dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003de2:	f7fd fbe7 	bl	80015b4 <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2208      	movs	r2, #8
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10d      	bne.n	8003e14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	0399      	lsls	r1, r3, #14
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <UART_CheckIdleState+0x88>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	0013      	movs	r3, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	f000 f82a 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e01f      	b.n	8003e54 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d10d      	bne.n	8003e3e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	03d9      	lsls	r1, r3, #15
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <UART_CheckIdleState+0x88>)
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	0013      	movs	r3, r2
 8003e30:	2200      	movs	r2, #0
 8003e32:	f000 f815 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003e36:	1e03      	subs	r3, r0, #0
 8003e38:	d001      	beq.n	8003e3e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e00a      	b.n	8003e54 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2270      	movs	r2, #112	; 0x70
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b004      	add	sp, #16
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	01ffffff 	.word	0x01ffffff

08003e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	e05d      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3301      	adds	r3, #1
 8003e76:	d05a      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e78:	f7fd fb9c 	bl	80015b4 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11b      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	492f      	ldr	r1, [pc, #188]	; (8003f58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	438a      	bics	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2270      	movs	r2, #112	; 0x70
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e043      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d02d      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	401a      	ands	r2, r3
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d123      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	0112      	lsls	r2, r2, #4
 8003eee:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4917      	ldr	r1, [pc, #92]	; (8003f58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2270      	movs	r2, #112	; 0x70
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	425a      	negs	r2, r3
 8003f3e:	4153      	adcs	r3, r2
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	001a      	movs	r2, r3
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d092      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b004      	add	sp, #16
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	fffffe5f 	.word	0xfffffe5f

08003f5c <__errno>:
 8003f5c:	4b01      	ldr	r3, [pc, #4]	; (8003f64 <__errno+0x8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4770      	bx	lr
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	4d0c      	ldr	r5, [pc, #48]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6e:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f70:	1b64      	subs	r4, r4, r5
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	2600      	movs	r6, #0
 8003f7a:	f000 fc29 	bl	80047d0 <_init>
 8003f7e:	4d0a      	ldr	r5, [pc, #40]	; (8003fa8 <__libc_init_array+0x40>)
 8003f80:	4c0a      	ldr	r4, [pc, #40]	; (8003fac <__libc_init_array+0x44>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	42a6      	cmp	r6, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	00b3      	lsls	r3, r6, #2
 8003f8e:	58eb      	ldr	r3, [r5, r3]
 8003f90:	4798      	blx	r3
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	00b3      	lsls	r3, r6, #2
 8003f98:	58eb      	ldr	r3, [r5, r3]
 8003f9a:	4798      	blx	r3
 8003f9c:	3601      	adds	r6, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	0800496c 	.word	0x0800496c
 8003fa4:	0800496c 	.word	0x0800496c
 8003fa8:	0800496c 	.word	0x0800496c
 8003fac:	08004970 	.word	0x08004970

08003fb0 <memcpy>:
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d100      	bne.n	8003fba <memcpy+0xa>
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	5ccc      	ldrb	r4, [r1, r3]
 8003fbc:	54c4      	strb	r4, [r0, r3]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	e7f8      	b.n	8003fb4 <memcpy+0x4>

08003fc2 <memset>:
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	1812      	adds	r2, r2, r0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <memset+0xa>
 8003fca:	4770      	bx	lr
 8003fcc:	7019      	strb	r1, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	e7f9      	b.n	8003fc6 <memset+0x4>
	...

08003fd4 <_free_r>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	0005      	movs	r5, r0
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d010      	beq.n	8003ffe <_free_r+0x2a>
 8003fdc:	1f0c      	subs	r4, r1, #4
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da00      	bge.n	8003fe6 <_free_r+0x12>
 8003fe4:	18e4      	adds	r4, r4, r3
 8003fe6:	0028      	movs	r0, r5
 8003fe8:	f000 f8ce 	bl	8004188 <__malloc_lock>
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <_free_r+0x90>)
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <_free_r+0x2c>
 8003ff4:	6063      	str	r3, [r4, #4]
 8003ff6:	6014      	str	r4, [r2, #0]
 8003ff8:	0028      	movs	r0, r5
 8003ffa:	f000 f8c6 	bl	800418a <__malloc_unlock>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	42a3      	cmp	r3, r4
 8004002:	d909      	bls.n	8004018 <_free_r+0x44>
 8004004:	6821      	ldr	r1, [r4, #0]
 8004006:	1860      	adds	r0, r4, r1
 8004008:	4283      	cmp	r3, r0
 800400a:	d1f3      	bne.n	8003ff4 <_free_r+0x20>
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	1841      	adds	r1, r0, r1
 8004012:	6021      	str	r1, [r4, #0]
 8004014:	e7ee      	b.n	8003ff4 <_free_r+0x20>
 8004016:	0013      	movs	r3, r2
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	2a00      	cmp	r2, #0
 800401c:	d001      	beq.n	8004022 <_free_r+0x4e>
 800401e:	42a2      	cmp	r2, r4
 8004020:	d9f9      	bls.n	8004016 <_free_r+0x42>
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	1858      	adds	r0, r3, r1
 8004026:	42a0      	cmp	r0, r4
 8004028:	d10b      	bne.n	8004042 <_free_r+0x6e>
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	1809      	adds	r1, r1, r0
 800402e:	1858      	adds	r0, r3, r1
 8004030:	6019      	str	r1, [r3, #0]
 8004032:	4282      	cmp	r2, r0
 8004034:	d1e0      	bne.n	8003ff8 <_free_r+0x24>
 8004036:	6810      	ldr	r0, [r2, #0]
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	1841      	adds	r1, r0, r1
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e7da      	b.n	8003ff8 <_free_r+0x24>
 8004042:	42a0      	cmp	r0, r4
 8004044:	d902      	bls.n	800404c <_free_r+0x78>
 8004046:	230c      	movs	r3, #12
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	e7d5      	b.n	8003ff8 <_free_r+0x24>
 800404c:	6821      	ldr	r1, [r4, #0]
 800404e:	1860      	adds	r0, r4, r1
 8004050:	4282      	cmp	r2, r0
 8004052:	d103      	bne.n	800405c <_free_r+0x88>
 8004054:	6810      	ldr	r0, [r2, #0]
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	1841      	adds	r1, r0, r1
 800405a:	6021      	str	r1, [r4, #0]
 800405c:	6062      	str	r2, [r4, #4]
 800405e:	605c      	str	r4, [r3, #4]
 8004060:	e7ca      	b.n	8003ff8 <_free_r+0x24>
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000094 	.word	0x20000094

08004068 <_malloc_r>:
 8004068:	2303      	movs	r3, #3
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	1ccd      	adds	r5, r1, #3
 800406e:	439d      	bics	r5, r3
 8004070:	3508      	adds	r5, #8
 8004072:	0006      	movs	r6, r0
 8004074:	2d0c      	cmp	r5, #12
 8004076:	d21e      	bcs.n	80040b6 <_malloc_r+0x4e>
 8004078:	250c      	movs	r5, #12
 800407a:	42a9      	cmp	r1, r5
 800407c:	d81d      	bhi.n	80040ba <_malloc_r+0x52>
 800407e:	0030      	movs	r0, r6
 8004080:	f000 f882 	bl	8004188 <__malloc_lock>
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <_malloc_r+0xb4>)
 8004086:	6814      	ldr	r4, [r2, #0]
 8004088:	0021      	movs	r1, r4
 800408a:	2900      	cmp	r1, #0
 800408c:	d119      	bne.n	80040c2 <_malloc_r+0x5a>
 800408e:	4c24      	ldr	r4, [pc, #144]	; (8004120 <_malloc_r+0xb8>)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <_malloc_r+0x36>
 8004096:	0030      	movs	r0, r6
 8004098:	f000 f844 	bl	8004124 <_sbrk_r>
 800409c:	6020      	str	r0, [r4, #0]
 800409e:	0029      	movs	r1, r5
 80040a0:	0030      	movs	r0, r6
 80040a2:	f000 f83f 	bl	8004124 <_sbrk_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d12b      	bne.n	8004102 <_malloc_r+0x9a>
 80040aa:	230c      	movs	r3, #12
 80040ac:	0030      	movs	r0, r6
 80040ae:	6033      	str	r3, [r6, #0]
 80040b0:	f000 f86b 	bl	800418a <__malloc_unlock>
 80040b4:	e003      	b.n	80040be <_malloc_r+0x56>
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	dadf      	bge.n	800407a <_malloc_r+0x12>
 80040ba:	230c      	movs	r3, #12
 80040bc:	6033      	str	r3, [r6, #0]
 80040be:	2000      	movs	r0, #0
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
 80040c2:	680b      	ldr	r3, [r1, #0]
 80040c4:	1b5b      	subs	r3, r3, r5
 80040c6:	d419      	bmi.n	80040fc <_malloc_r+0x94>
 80040c8:	2b0b      	cmp	r3, #11
 80040ca:	d903      	bls.n	80040d4 <_malloc_r+0x6c>
 80040cc:	600b      	str	r3, [r1, #0]
 80040ce:	18cc      	adds	r4, r1, r3
 80040d0:	6025      	str	r5, [r4, #0]
 80040d2:	e003      	b.n	80040dc <_malloc_r+0x74>
 80040d4:	684b      	ldr	r3, [r1, #4]
 80040d6:	428c      	cmp	r4, r1
 80040d8:	d10d      	bne.n	80040f6 <_malloc_r+0x8e>
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	0030      	movs	r0, r6
 80040de:	f000 f854 	bl	800418a <__malloc_unlock>
 80040e2:	0020      	movs	r0, r4
 80040e4:	2207      	movs	r2, #7
 80040e6:	300b      	adds	r0, #11
 80040e8:	1d23      	adds	r3, r4, #4
 80040ea:	4390      	bics	r0, r2
 80040ec:	1ac3      	subs	r3, r0, r3
 80040ee:	d0e7      	beq.n	80040c0 <_malloc_r+0x58>
 80040f0:	425a      	negs	r2, r3
 80040f2:	50e2      	str	r2, [r4, r3]
 80040f4:	e7e4      	b.n	80040c0 <_malloc_r+0x58>
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	000c      	movs	r4, r1
 80040fa:	e7ef      	b.n	80040dc <_malloc_r+0x74>
 80040fc:	000c      	movs	r4, r1
 80040fe:	6849      	ldr	r1, [r1, #4]
 8004100:	e7c3      	b.n	800408a <_malloc_r+0x22>
 8004102:	2303      	movs	r3, #3
 8004104:	1cc4      	adds	r4, r0, #3
 8004106:	439c      	bics	r4, r3
 8004108:	42a0      	cmp	r0, r4
 800410a:	d0e1      	beq.n	80040d0 <_malloc_r+0x68>
 800410c:	1a21      	subs	r1, r4, r0
 800410e:	0030      	movs	r0, r6
 8004110:	f000 f808 	bl	8004124 <_sbrk_r>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d1db      	bne.n	80040d0 <_malloc_r+0x68>
 8004118:	e7c7      	b.n	80040aa <_malloc_r+0x42>
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	20000094 	.word	0x20000094
 8004120:	20000098 	.word	0x20000098

08004124 <_sbrk_r>:
 8004124:	2300      	movs	r3, #0
 8004126:	b570      	push	{r4, r5, r6, lr}
 8004128:	4c06      	ldr	r4, [pc, #24]	; (8004144 <_sbrk_r+0x20>)
 800412a:	0005      	movs	r5, r0
 800412c:	0008      	movs	r0, r1
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	f7fd f8ea 	bl	8001308 <_sbrk>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d103      	bne.n	8004140 <_sbrk_r+0x1c>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d000      	beq.n	8004140 <_sbrk_r+0x1c>
 800413e:	602b      	str	r3, [r5, #0]
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	200001b8 	.word	0x200001b8

08004148 <siprintf>:
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b500      	push	{lr}
 800414c:	490b      	ldr	r1, [pc, #44]	; (800417c <siprintf+0x34>)
 800414e:	b09c      	sub	sp, #112	; 0x70
 8004150:	ab1d      	add	r3, sp, #116	; 0x74
 8004152:	9002      	str	r0, [sp, #8]
 8004154:	9006      	str	r0, [sp, #24]
 8004156:	9107      	str	r1, [sp, #28]
 8004158:	9104      	str	r1, [sp, #16]
 800415a:	4809      	ldr	r0, [pc, #36]	; (8004180 <siprintf+0x38>)
 800415c:	4909      	ldr	r1, [pc, #36]	; (8004184 <siprintf+0x3c>)
 800415e:	cb04      	ldmia	r3!, {r2}
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	6800      	ldr	r0, [r0, #0]
 8004164:	a902      	add	r1, sp, #8
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f000 f872 	bl	8004250 <_svfiprintf_r>
 800416c:	2300      	movs	r3, #0
 800416e:	9a02      	ldr	r2, [sp, #8]
 8004170:	7013      	strb	r3, [r2, #0]
 8004172:	b01c      	add	sp, #112	; 0x70
 8004174:	bc08      	pop	{r3}
 8004176:	b003      	add	sp, #12
 8004178:	4718      	bx	r3
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	7fffffff 	.word	0x7fffffff
 8004180:	2000000c 	.word	0x2000000c
 8004184:	ffff0208 	.word	0xffff0208

08004188 <__malloc_lock>:
 8004188:	4770      	bx	lr

0800418a <__malloc_unlock>:
 800418a:	4770      	bx	lr

0800418c <__ssputs_r>:
 800418c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418e:	688e      	ldr	r6, [r1, #8]
 8004190:	b085      	sub	sp, #20
 8004192:	0007      	movs	r7, r0
 8004194:	000c      	movs	r4, r1
 8004196:	9203      	str	r2, [sp, #12]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	429e      	cmp	r6, r3
 800419c:	d83c      	bhi.n	8004218 <__ssputs_r+0x8c>
 800419e:	2390      	movs	r3, #144	; 0x90
 80041a0:	898a      	ldrh	r2, [r1, #12]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	421a      	tst	r2, r3
 80041a6:	d034      	beq.n	8004212 <__ssputs_r+0x86>
 80041a8:	2503      	movs	r5, #3
 80041aa:	6909      	ldr	r1, [r1, #16]
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	9802      	ldr	r0, [sp, #8]
 80041b6:	435d      	muls	r5, r3
 80041b8:	0feb      	lsrs	r3, r5, #31
 80041ba:	195d      	adds	r5, r3, r5
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	106d      	asrs	r5, r5, #1
 80041c0:	3301      	adds	r3, #1
 80041c2:	181b      	adds	r3, r3, r0
 80041c4:	42ab      	cmp	r3, r5
 80041c6:	d900      	bls.n	80041ca <__ssputs_r+0x3e>
 80041c8:	001d      	movs	r5, r3
 80041ca:	0553      	lsls	r3, r2, #21
 80041cc:	d532      	bpl.n	8004234 <__ssputs_r+0xa8>
 80041ce:	0029      	movs	r1, r5
 80041d0:	0038      	movs	r0, r7
 80041d2:	f7ff ff49 	bl	8004068 <_malloc_r>
 80041d6:	1e06      	subs	r6, r0, #0
 80041d8:	d109      	bne.n	80041ee <__ssputs_r+0x62>
 80041da:	230c      	movs	r3, #12
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	2340      	movs	r3, #64	; 0x40
 80041e0:	2001      	movs	r0, #1
 80041e2:	89a2      	ldrh	r2, [r4, #12]
 80041e4:	4240      	negs	r0, r0
 80041e6:	4313      	orrs	r3, r2
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	b005      	add	sp, #20
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	9a02      	ldr	r2, [sp, #8]
 80041f0:	6921      	ldr	r1, [r4, #16]
 80041f2:	f7ff fedd 	bl	8003fb0 <memcpy>
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <__ssputs_r+0xc0>)
 80041fa:	401a      	ands	r2, r3
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	4313      	orrs	r3, r2
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	6126      	str	r6, [r4, #16]
 8004206:	18f6      	adds	r6, r6, r3
 8004208:	6026      	str	r6, [r4, #0]
 800420a:	6165      	str	r5, [r4, #20]
 800420c:	9e01      	ldr	r6, [sp, #4]
 800420e:	1aed      	subs	r5, r5, r3
 8004210:	60a5      	str	r5, [r4, #8]
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	429e      	cmp	r6, r3
 8004216:	d900      	bls.n	800421a <__ssputs_r+0x8e>
 8004218:	9e01      	ldr	r6, [sp, #4]
 800421a:	0032      	movs	r2, r6
 800421c:	9903      	ldr	r1, [sp, #12]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	f000 fa95 	bl	800474e <memmove>
 8004224:	68a3      	ldr	r3, [r4, #8]
 8004226:	2000      	movs	r0, #0
 8004228:	1b9b      	subs	r3, r3, r6
 800422a:	60a3      	str	r3, [r4, #8]
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	199e      	adds	r6, r3, r6
 8004230:	6026      	str	r6, [r4, #0]
 8004232:	e7da      	b.n	80041ea <__ssputs_r+0x5e>
 8004234:	002a      	movs	r2, r5
 8004236:	0038      	movs	r0, r7
 8004238:	f000 fa9c 	bl	8004774 <_realloc_r>
 800423c:	1e06      	subs	r6, r0, #0
 800423e:	d1e0      	bne.n	8004202 <__ssputs_r+0x76>
 8004240:	6921      	ldr	r1, [r4, #16]
 8004242:	0038      	movs	r0, r7
 8004244:	f7ff fec6 	bl	8003fd4 <_free_r>
 8004248:	e7c7      	b.n	80041da <__ssputs_r+0x4e>
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	fffffb7f 	.word	0xfffffb7f

08004250 <_svfiprintf_r>:
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b0a1      	sub	sp, #132	; 0x84
 8004254:	9003      	str	r0, [sp, #12]
 8004256:	001d      	movs	r5, r3
 8004258:	898b      	ldrh	r3, [r1, #12]
 800425a:	000f      	movs	r7, r1
 800425c:	0016      	movs	r6, r2
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	d511      	bpl.n	8004286 <_svfiprintf_r+0x36>
 8004262:	690b      	ldr	r3, [r1, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10e      	bne.n	8004286 <_svfiprintf_r+0x36>
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	f7ff fefd 	bl	8004068 <_malloc_r>
 800426e:	6038      	str	r0, [r7, #0]
 8004270:	6138      	str	r0, [r7, #16]
 8004272:	2800      	cmp	r0, #0
 8004274:	d105      	bne.n	8004282 <_svfiprintf_r+0x32>
 8004276:	230c      	movs	r3, #12
 8004278:	9a03      	ldr	r2, [sp, #12]
 800427a:	3801      	subs	r0, #1
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	b021      	add	sp, #132	; 0x84
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	2300      	movs	r3, #0
 8004288:	ac08      	add	r4, sp, #32
 800428a:	6163      	str	r3, [r4, #20]
 800428c:	3320      	adds	r3, #32
 800428e:	7663      	strb	r3, [r4, #25]
 8004290:	3310      	adds	r3, #16
 8004292:	76a3      	strb	r3, [r4, #26]
 8004294:	9507      	str	r5, [sp, #28]
 8004296:	0035      	movs	r5, r6
 8004298:	782b      	ldrb	r3, [r5, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <_svfiprintf_r+0x52>
 800429e:	2b25      	cmp	r3, #37	; 0x25
 80042a0:	d146      	bne.n	8004330 <_svfiprintf_r+0xe0>
 80042a2:	1bab      	subs	r3, r5, r6
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	d00c      	beq.n	80042c2 <_svfiprintf_r+0x72>
 80042a8:	0032      	movs	r2, r6
 80042aa:	0039      	movs	r1, r7
 80042ac:	9803      	ldr	r0, [sp, #12]
 80042ae:	f7ff ff6d 	bl	800418c <__ssputs_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d100      	bne.n	80042b8 <_svfiprintf_r+0x68>
 80042b6:	e0ae      	b.n	8004416 <_svfiprintf_r+0x1c6>
 80042b8:	6962      	ldr	r2, [r4, #20]
 80042ba:	9b05      	ldr	r3, [sp, #20]
 80042bc:	4694      	mov	ip, r2
 80042be:	4463      	add	r3, ip
 80042c0:	6163      	str	r3, [r4, #20]
 80042c2:	782b      	ldrb	r3, [r5, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d100      	bne.n	80042ca <_svfiprintf_r+0x7a>
 80042c8:	e0a5      	b.n	8004416 <_svfiprintf_r+0x1c6>
 80042ca:	2201      	movs	r2, #1
 80042cc:	2300      	movs	r3, #0
 80042ce:	4252      	negs	r2, r2
 80042d0:	6062      	str	r2, [r4, #4]
 80042d2:	a904      	add	r1, sp, #16
 80042d4:	3254      	adds	r2, #84	; 0x54
 80042d6:	1852      	adds	r2, r2, r1
 80042d8:	1c6e      	adds	r6, r5, #1
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	60e3      	str	r3, [r4, #12]
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	7013      	strb	r3, [r2, #0]
 80042e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80042e4:	7831      	ldrb	r1, [r6, #0]
 80042e6:	2205      	movs	r2, #5
 80042e8:	4853      	ldr	r0, [pc, #332]	; (8004438 <_svfiprintf_r+0x1e8>)
 80042ea:	f000 fa25 	bl	8004738 <memchr>
 80042ee:	1c75      	adds	r5, r6, #1
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d11f      	bne.n	8004334 <_svfiprintf_r+0xe4>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	06d3      	lsls	r3, r2, #27
 80042f8:	d504      	bpl.n	8004304 <_svfiprintf_r+0xb4>
 80042fa:	2353      	movs	r3, #83	; 0x53
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	185b      	adds	r3, r3, r1
 8004300:	2120      	movs	r1, #32
 8004302:	7019      	strb	r1, [r3, #0]
 8004304:	0713      	lsls	r3, r2, #28
 8004306:	d504      	bpl.n	8004312 <_svfiprintf_r+0xc2>
 8004308:	2353      	movs	r3, #83	; 0x53
 800430a:	a904      	add	r1, sp, #16
 800430c:	185b      	adds	r3, r3, r1
 800430e:	212b      	movs	r1, #43	; 0x2b
 8004310:	7019      	strb	r1, [r3, #0]
 8004312:	7833      	ldrb	r3, [r6, #0]
 8004314:	2b2a      	cmp	r3, #42	; 0x2a
 8004316:	d016      	beq.n	8004346 <_svfiprintf_r+0xf6>
 8004318:	0035      	movs	r5, r6
 800431a:	2100      	movs	r1, #0
 800431c:	200a      	movs	r0, #10
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	782a      	ldrb	r2, [r5, #0]
 8004322:	1c6e      	adds	r6, r5, #1
 8004324:	3a30      	subs	r2, #48	; 0x30
 8004326:	2a09      	cmp	r2, #9
 8004328:	d94e      	bls.n	80043c8 <_svfiprintf_r+0x178>
 800432a:	2900      	cmp	r1, #0
 800432c:	d018      	beq.n	8004360 <_svfiprintf_r+0x110>
 800432e:	e010      	b.n	8004352 <_svfiprintf_r+0x102>
 8004330:	3501      	adds	r5, #1
 8004332:	e7b1      	b.n	8004298 <_svfiprintf_r+0x48>
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <_svfiprintf_r+0x1e8>)
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	2301      	movs	r3, #1
 800433c:	4083      	lsls	r3, r0
 800433e:	4313      	orrs	r3, r2
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	002e      	movs	r6, r5
 8004344:	e7ce      	b.n	80042e4 <_svfiprintf_r+0x94>
 8004346:	9b07      	ldr	r3, [sp, #28]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	9107      	str	r1, [sp, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db01      	blt.n	8004356 <_svfiprintf_r+0x106>
 8004352:	930b      	str	r3, [sp, #44]	; 0x2c
 8004354:	e004      	b.n	8004360 <_svfiprintf_r+0x110>
 8004356:	425b      	negs	r3, r3
 8004358:	60e3      	str	r3, [r4, #12]
 800435a:	2302      	movs	r3, #2
 800435c:	4313      	orrs	r3, r2
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	782b      	ldrb	r3, [r5, #0]
 8004362:	2b2e      	cmp	r3, #46	; 0x2e
 8004364:	d10a      	bne.n	800437c <_svfiprintf_r+0x12c>
 8004366:	786b      	ldrb	r3, [r5, #1]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d135      	bne.n	80043d8 <_svfiprintf_r+0x188>
 800436c:	9b07      	ldr	r3, [sp, #28]
 800436e:	3502      	adds	r5, #2
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	9207      	str	r2, [sp, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	db2b      	blt.n	80043d2 <_svfiprintf_r+0x182>
 800437a:	9309      	str	r3, [sp, #36]	; 0x24
 800437c:	4e2f      	ldr	r6, [pc, #188]	; (800443c <_svfiprintf_r+0x1ec>)
 800437e:	7829      	ldrb	r1, [r5, #0]
 8004380:	2203      	movs	r2, #3
 8004382:	0030      	movs	r0, r6
 8004384:	f000 f9d8 	bl	8004738 <memchr>
 8004388:	2800      	cmp	r0, #0
 800438a:	d006      	beq.n	800439a <_svfiprintf_r+0x14a>
 800438c:	2340      	movs	r3, #64	; 0x40
 800438e:	1b80      	subs	r0, r0, r6
 8004390:	4083      	lsls	r3, r0
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	3501      	adds	r5, #1
 8004396:	4313      	orrs	r3, r2
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	7829      	ldrb	r1, [r5, #0]
 800439c:	2206      	movs	r2, #6
 800439e:	4828      	ldr	r0, [pc, #160]	; (8004440 <_svfiprintf_r+0x1f0>)
 80043a0:	1c6e      	adds	r6, r5, #1
 80043a2:	7621      	strb	r1, [r4, #24]
 80043a4:	f000 f9c8 	bl	8004738 <memchr>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d03c      	beq.n	8004426 <_svfiprintf_r+0x1d6>
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <_svfiprintf_r+0x1f4>)
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d125      	bne.n	80043fe <_svfiprintf_r+0x1ae>
 80043b2:	2207      	movs	r2, #7
 80043b4:	9b07      	ldr	r3, [sp, #28]
 80043b6:	3307      	adds	r3, #7
 80043b8:	4393      	bics	r3, r2
 80043ba:	3308      	adds	r3, #8
 80043bc:	9307      	str	r3, [sp, #28]
 80043be:	6963      	ldr	r3, [r4, #20]
 80043c0:	9a04      	ldr	r2, [sp, #16]
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	6163      	str	r3, [r4, #20]
 80043c6:	e766      	b.n	8004296 <_svfiprintf_r+0x46>
 80043c8:	4343      	muls	r3, r0
 80043ca:	2101      	movs	r1, #1
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	0035      	movs	r5, r6
 80043d0:	e7a6      	b.n	8004320 <_svfiprintf_r+0xd0>
 80043d2:	2301      	movs	r3, #1
 80043d4:	425b      	negs	r3, r3
 80043d6:	e7d0      	b.n	800437a <_svfiprintf_r+0x12a>
 80043d8:	2300      	movs	r3, #0
 80043da:	200a      	movs	r0, #10
 80043dc:	001a      	movs	r2, r3
 80043de:	3501      	adds	r5, #1
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	7829      	ldrb	r1, [r5, #0]
 80043e4:	1c6e      	adds	r6, r5, #1
 80043e6:	3930      	subs	r1, #48	; 0x30
 80043e8:	2909      	cmp	r1, #9
 80043ea:	d903      	bls.n	80043f4 <_svfiprintf_r+0x1a4>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0c5      	beq.n	800437c <_svfiprintf_r+0x12c>
 80043f0:	9209      	str	r2, [sp, #36]	; 0x24
 80043f2:	e7c3      	b.n	800437c <_svfiprintf_r+0x12c>
 80043f4:	4342      	muls	r2, r0
 80043f6:	2301      	movs	r3, #1
 80043f8:	1852      	adds	r2, r2, r1
 80043fa:	0035      	movs	r5, r6
 80043fc:	e7f1      	b.n	80043e2 <_svfiprintf_r+0x192>
 80043fe:	ab07      	add	r3, sp, #28
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	003a      	movs	r2, r7
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <_svfiprintf_r+0x1f8>)
 8004406:	0021      	movs	r1, r4
 8004408:	9803      	ldr	r0, [sp, #12]
 800440a:	e000      	b.n	800440e <_svfiprintf_r+0x1be>
 800440c:	bf00      	nop
 800440e:	9004      	str	r0, [sp, #16]
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	3301      	adds	r3, #1
 8004414:	d1d3      	bne.n	80043be <_svfiprintf_r+0x16e>
 8004416:	89bb      	ldrh	r3, [r7, #12]
 8004418:	980d      	ldr	r0, [sp, #52]	; 0x34
 800441a:	065b      	lsls	r3, r3, #25
 800441c:	d400      	bmi.n	8004420 <_svfiprintf_r+0x1d0>
 800441e:	e72e      	b.n	800427e <_svfiprintf_r+0x2e>
 8004420:	2001      	movs	r0, #1
 8004422:	4240      	negs	r0, r0
 8004424:	e72b      	b.n	800427e <_svfiprintf_r+0x2e>
 8004426:	ab07      	add	r3, sp, #28
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	003a      	movs	r2, r7
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <_svfiprintf_r+0x1f8>)
 800442e:	0021      	movs	r1, r4
 8004430:	9803      	ldr	r0, [sp, #12]
 8004432:	f000 f879 	bl	8004528 <_printf_i>
 8004436:	e7ea      	b.n	800440e <_svfiprintf_r+0x1be>
 8004438:	08004938 	.word	0x08004938
 800443c:	0800493e 	.word	0x0800493e
 8004440:	08004942 	.word	0x08004942
 8004444:	00000000 	.word	0x00000000
 8004448:	0800418d 	.word	0x0800418d

0800444c <_printf_common>:
 800444c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444e:	0015      	movs	r5, r2
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	688a      	ldr	r2, [r1, #8]
 8004454:	690b      	ldr	r3, [r1, #16]
 8004456:	9000      	str	r0, [sp, #0]
 8004458:	000c      	movs	r4, r1
 800445a:	4293      	cmp	r3, r2
 800445c:	da00      	bge.n	8004460 <_printf_common+0x14>
 800445e:	0013      	movs	r3, r2
 8004460:	0022      	movs	r2, r4
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	3243      	adds	r2, #67	; 0x43
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	2a00      	cmp	r2, #0
 800446a:	d001      	beq.n	8004470 <_printf_common+0x24>
 800446c:	3301      	adds	r3, #1
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	069b      	lsls	r3, r3, #26
 8004474:	d502      	bpl.n	800447c <_printf_common+0x30>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	3302      	adds	r3, #2
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	2706      	movs	r7, #6
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	401f      	ands	r7, r3
 8004482:	d027      	beq.n	80044d4 <_printf_common+0x88>
 8004484:	0023      	movs	r3, r4
 8004486:	3343      	adds	r3, #67	; 0x43
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	0692      	lsls	r2, r2, #26
 8004492:	d430      	bmi.n	80044f6 <_printf_common+0xaa>
 8004494:	0022      	movs	r2, r4
 8004496:	9901      	ldr	r1, [sp, #4]
 8004498:	3243      	adds	r2, #67	; 0x43
 800449a:	9800      	ldr	r0, [sp, #0]
 800449c:	9e08      	ldr	r6, [sp, #32]
 800449e:	47b0      	blx	r6
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d025      	beq.n	80044f0 <_printf_common+0xa4>
 80044a4:	2306      	movs	r3, #6
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	682a      	ldr	r2, [r5, #0]
 80044aa:	68e1      	ldr	r1, [r4, #12]
 80044ac:	4003      	ands	r3, r0
 80044ae:	2500      	movs	r5, #0
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d103      	bne.n	80044bc <_printf_common+0x70>
 80044b4:	1a8d      	subs	r5, r1, r2
 80044b6:	43eb      	mvns	r3, r5
 80044b8:	17db      	asrs	r3, r3, #31
 80044ba:	401d      	ands	r5, r3
 80044bc:	68a3      	ldr	r3, [r4, #8]
 80044be:	6922      	ldr	r2, [r4, #16]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	dd01      	ble.n	80044c8 <_printf_common+0x7c>
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	18ed      	adds	r5, r5, r3
 80044c8:	2700      	movs	r7, #0
 80044ca:	42bd      	cmp	r5, r7
 80044cc:	d120      	bne.n	8004510 <_printf_common+0xc4>
 80044ce:	2000      	movs	r0, #0
 80044d0:	e010      	b.n	80044f4 <_printf_common+0xa8>
 80044d2:	3701      	adds	r7, #1
 80044d4:	68e3      	ldr	r3, [r4, #12]
 80044d6:	682a      	ldr	r2, [r5, #0]
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	42bb      	cmp	r3, r7
 80044dc:	ddd2      	ble.n	8004484 <_printf_common+0x38>
 80044de:	0022      	movs	r2, r4
 80044e0:	2301      	movs	r3, #1
 80044e2:	3219      	adds	r2, #25
 80044e4:	9901      	ldr	r1, [sp, #4]
 80044e6:	9800      	ldr	r0, [sp, #0]
 80044e8:	9e08      	ldr	r6, [sp, #32]
 80044ea:	47b0      	blx	r6
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d1f0      	bne.n	80044d2 <_printf_common+0x86>
 80044f0:	2001      	movs	r0, #1
 80044f2:	4240      	negs	r0, r0
 80044f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044f6:	2030      	movs	r0, #48	; 0x30
 80044f8:	18e1      	adds	r1, r4, r3
 80044fa:	3143      	adds	r1, #67	; 0x43
 80044fc:	7008      	strb	r0, [r1, #0]
 80044fe:	0021      	movs	r1, r4
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	3145      	adds	r1, #69	; 0x45
 8004504:	7809      	ldrb	r1, [r1, #0]
 8004506:	18a2      	adds	r2, r4, r2
 8004508:	3243      	adds	r2, #67	; 0x43
 800450a:	3302      	adds	r3, #2
 800450c:	7011      	strb	r1, [r2, #0]
 800450e:	e7c1      	b.n	8004494 <_printf_common+0x48>
 8004510:	0022      	movs	r2, r4
 8004512:	2301      	movs	r3, #1
 8004514:	321a      	adds	r2, #26
 8004516:	9901      	ldr	r1, [sp, #4]
 8004518:	9800      	ldr	r0, [sp, #0]
 800451a:	9e08      	ldr	r6, [sp, #32]
 800451c:	47b0      	blx	r6
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d0e6      	beq.n	80044f0 <_printf_common+0xa4>
 8004522:	3701      	adds	r7, #1
 8004524:	e7d1      	b.n	80044ca <_printf_common+0x7e>
	...

08004528 <_printf_i>:
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	9204      	str	r2, [sp, #16]
 800452e:	000a      	movs	r2, r1
 8004530:	3243      	adds	r2, #67	; 0x43
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	9003      	str	r0, [sp, #12]
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	7e0a      	ldrb	r2, [r1, #24]
 800453a:	000c      	movs	r4, r1
 800453c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800453e:	2a6e      	cmp	r2, #110	; 0x6e
 8004540:	d100      	bne.n	8004544 <_printf_i+0x1c>
 8004542:	e086      	b.n	8004652 <_printf_i+0x12a>
 8004544:	d81f      	bhi.n	8004586 <_printf_i+0x5e>
 8004546:	2a63      	cmp	r2, #99	; 0x63
 8004548:	d033      	beq.n	80045b2 <_printf_i+0x8a>
 800454a:	d808      	bhi.n	800455e <_printf_i+0x36>
 800454c:	2a00      	cmp	r2, #0
 800454e:	d100      	bne.n	8004552 <_printf_i+0x2a>
 8004550:	e08c      	b.n	800466c <_printf_i+0x144>
 8004552:	2a58      	cmp	r2, #88	; 0x58
 8004554:	d04d      	beq.n	80045f2 <_printf_i+0xca>
 8004556:	0025      	movs	r5, r4
 8004558:	3542      	adds	r5, #66	; 0x42
 800455a:	702a      	strb	r2, [r5, #0]
 800455c:	e030      	b.n	80045c0 <_printf_i+0x98>
 800455e:	2a64      	cmp	r2, #100	; 0x64
 8004560:	d001      	beq.n	8004566 <_printf_i+0x3e>
 8004562:	2a69      	cmp	r2, #105	; 0x69
 8004564:	d1f7      	bne.n	8004556 <_printf_i+0x2e>
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	6825      	ldr	r5, [r4, #0]
 800456a:	1d0a      	adds	r2, r1, #4
 800456c:	0628      	lsls	r0, r5, #24
 800456e:	d529      	bpl.n	80045c4 <_printf_i+0x9c>
 8004570:	6808      	ldr	r0, [r1, #0]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2800      	cmp	r0, #0
 8004576:	da03      	bge.n	8004580 <_printf_i+0x58>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	9a02      	ldr	r2, [sp, #8]
 800457c:	4240      	negs	r0, r0
 800457e:	7013      	strb	r3, [r2, #0]
 8004580:	4e6b      	ldr	r6, [pc, #428]	; (8004730 <_printf_i+0x208>)
 8004582:	270a      	movs	r7, #10
 8004584:	e04f      	b.n	8004626 <_printf_i+0xfe>
 8004586:	2a73      	cmp	r2, #115	; 0x73
 8004588:	d074      	beq.n	8004674 <_printf_i+0x14c>
 800458a:	d808      	bhi.n	800459e <_printf_i+0x76>
 800458c:	2a6f      	cmp	r2, #111	; 0x6f
 800458e:	d01f      	beq.n	80045d0 <_printf_i+0xa8>
 8004590:	2a70      	cmp	r2, #112	; 0x70
 8004592:	d1e0      	bne.n	8004556 <_printf_i+0x2e>
 8004594:	2220      	movs	r2, #32
 8004596:	6809      	ldr	r1, [r1, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	e003      	b.n	80045a6 <_printf_i+0x7e>
 800459e:	2a75      	cmp	r2, #117	; 0x75
 80045a0:	d016      	beq.n	80045d0 <_printf_i+0xa8>
 80045a2:	2a78      	cmp	r2, #120	; 0x78
 80045a4:	d1d7      	bne.n	8004556 <_printf_i+0x2e>
 80045a6:	0022      	movs	r2, r4
 80045a8:	2178      	movs	r1, #120	; 0x78
 80045aa:	3245      	adds	r2, #69	; 0x45
 80045ac:	7011      	strb	r1, [r2, #0]
 80045ae:	4e61      	ldr	r6, [pc, #388]	; (8004734 <_printf_i+0x20c>)
 80045b0:	e022      	b.n	80045f8 <_printf_i+0xd0>
 80045b2:	0025      	movs	r5, r4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	3542      	adds	r5, #66	; 0x42
 80045b8:	1d11      	adds	r1, r2, #4
 80045ba:	6019      	str	r1, [r3, #0]
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	702b      	strb	r3, [r5, #0]
 80045c0:	2301      	movs	r3, #1
 80045c2:	e065      	b.n	8004690 <_printf_i+0x168>
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	0669      	lsls	r1, r5, #25
 80045ca:	d5d3      	bpl.n	8004574 <_printf_i+0x4c>
 80045cc:	b200      	sxth	r0, r0
 80045ce:	e7d1      	b.n	8004574 <_printf_i+0x4c>
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	1d08      	adds	r0, r1, #4
 80045d6:	6018      	str	r0, [r3, #0]
 80045d8:	6808      	ldr	r0, [r1, #0]
 80045da:	062e      	lsls	r6, r5, #24
 80045dc:	d505      	bpl.n	80045ea <_printf_i+0xc2>
 80045de:	4e54      	ldr	r6, [pc, #336]	; (8004730 <_printf_i+0x208>)
 80045e0:	2708      	movs	r7, #8
 80045e2:	2a6f      	cmp	r2, #111	; 0x6f
 80045e4:	d01b      	beq.n	800461e <_printf_i+0xf6>
 80045e6:	270a      	movs	r7, #10
 80045e8:	e019      	b.n	800461e <_printf_i+0xf6>
 80045ea:	066d      	lsls	r5, r5, #25
 80045ec:	d5f7      	bpl.n	80045de <_printf_i+0xb6>
 80045ee:	b280      	uxth	r0, r0
 80045f0:	e7f5      	b.n	80045de <_printf_i+0xb6>
 80045f2:	3145      	adds	r1, #69	; 0x45
 80045f4:	4e4e      	ldr	r6, [pc, #312]	; (8004730 <_printf_i+0x208>)
 80045f6:	700a      	strb	r2, [r1, #0]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	1d01      	adds	r1, r0, #4
 80045fe:	6800      	ldr	r0, [r0, #0]
 8004600:	6019      	str	r1, [r3, #0]
 8004602:	0615      	lsls	r5, r2, #24
 8004604:	d521      	bpl.n	800464a <_printf_i+0x122>
 8004606:	07d3      	lsls	r3, r2, #31
 8004608:	d502      	bpl.n	8004610 <_printf_i+0xe8>
 800460a:	2320      	movs	r3, #32
 800460c:	431a      	orrs	r2, r3
 800460e:	6022      	str	r2, [r4, #0]
 8004610:	2710      	movs	r7, #16
 8004612:	2800      	cmp	r0, #0
 8004614:	d103      	bne.n	800461e <_printf_i+0xf6>
 8004616:	2320      	movs	r3, #32
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	439a      	bics	r2, r3
 800461c:	6022      	str	r2, [r4, #0]
 800461e:	0023      	movs	r3, r4
 8004620:	2200      	movs	r2, #0
 8004622:	3343      	adds	r3, #67	; 0x43
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db58      	blt.n	80046e0 <_printf_i+0x1b8>
 800462e:	2204      	movs	r2, #4
 8004630:	6821      	ldr	r1, [r4, #0]
 8004632:	4391      	bics	r1, r2
 8004634:	6021      	str	r1, [r4, #0]
 8004636:	2800      	cmp	r0, #0
 8004638:	d154      	bne.n	80046e4 <_printf_i+0x1bc>
 800463a:	9d02      	ldr	r5, [sp, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05a      	beq.n	80046f6 <_printf_i+0x1ce>
 8004640:	0025      	movs	r5, r4
 8004642:	7833      	ldrb	r3, [r6, #0]
 8004644:	3542      	adds	r5, #66	; 0x42
 8004646:	702b      	strb	r3, [r5, #0]
 8004648:	e055      	b.n	80046f6 <_printf_i+0x1ce>
 800464a:	0655      	lsls	r5, r2, #25
 800464c:	d5db      	bpl.n	8004606 <_printf_i+0xde>
 800464e:	b280      	uxth	r0, r0
 8004650:	e7d9      	b.n	8004606 <_printf_i+0xde>
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	680d      	ldr	r5, [r1, #0]
 8004656:	1d10      	adds	r0, r2, #4
 8004658:	6949      	ldr	r1, [r1, #20]
 800465a:	6018      	str	r0, [r3, #0]
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	062e      	lsls	r6, r5, #24
 8004660:	d501      	bpl.n	8004666 <_printf_i+0x13e>
 8004662:	6019      	str	r1, [r3, #0]
 8004664:	e002      	b.n	800466c <_printf_i+0x144>
 8004666:	066d      	lsls	r5, r5, #25
 8004668:	d5fb      	bpl.n	8004662 <_printf_i+0x13a>
 800466a:	8019      	strh	r1, [r3, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	9d02      	ldr	r5, [sp, #8]
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	e04f      	b.n	8004714 <_printf_i+0x1ec>
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	1d11      	adds	r1, r2, #4
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	6815      	ldr	r5, [r2, #0]
 800467c:	2100      	movs	r1, #0
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	0028      	movs	r0, r5
 8004682:	f000 f859 	bl	8004738 <memchr>
 8004686:	2800      	cmp	r0, #0
 8004688:	d001      	beq.n	800468e <_printf_i+0x166>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	9a02      	ldr	r2, [sp, #8]
 8004696:	7013      	strb	r3, [r2, #0]
 8004698:	e03c      	b.n	8004714 <_printf_i+0x1ec>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	002a      	movs	r2, r5
 800469e:	9904      	ldr	r1, [sp, #16]
 80046a0:	9803      	ldr	r0, [sp, #12]
 80046a2:	9d05      	ldr	r5, [sp, #20]
 80046a4:	47a8      	blx	r5
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d03e      	beq.n	8004728 <_printf_i+0x200>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d415      	bmi.n	80046dc <_printf_i+0x1b4>
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	68e0      	ldr	r0, [r4, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	da39      	bge.n	800472c <_printf_i+0x204>
 80046b8:	0018      	movs	r0, r3
 80046ba:	e037      	b.n	800472c <_printf_i+0x204>
 80046bc:	0022      	movs	r2, r4
 80046be:	2301      	movs	r3, #1
 80046c0:	3219      	adds	r2, #25
 80046c2:	9904      	ldr	r1, [sp, #16]
 80046c4:	9803      	ldr	r0, [sp, #12]
 80046c6:	9e05      	ldr	r6, [sp, #20]
 80046c8:	47b0      	blx	r6
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d02c      	beq.n	8004728 <_printf_i+0x200>
 80046ce:	3501      	adds	r5, #1
 80046d0:	68e3      	ldr	r3, [r4, #12]
 80046d2:	9a07      	ldr	r2, [sp, #28]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	42ab      	cmp	r3, r5
 80046d8:	dcf0      	bgt.n	80046bc <_printf_i+0x194>
 80046da:	e7e9      	b.n	80046b0 <_printf_i+0x188>
 80046dc:	2500      	movs	r5, #0
 80046de:	e7f7      	b.n	80046d0 <_printf_i+0x1a8>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d0ad      	beq.n	8004640 <_printf_i+0x118>
 80046e4:	9d02      	ldr	r5, [sp, #8]
 80046e6:	0039      	movs	r1, r7
 80046e8:	f7fb fd9c 	bl	8000224 <__aeabi_uidivmod>
 80046ec:	5c73      	ldrb	r3, [r6, r1]
 80046ee:	3d01      	subs	r5, #1
 80046f0:	702b      	strb	r3, [r5, #0]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d1f7      	bne.n	80046e6 <_printf_i+0x1be>
 80046f6:	2f08      	cmp	r7, #8
 80046f8:	d109      	bne.n	800470e <_printf_i+0x1e6>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	d506      	bpl.n	800470e <_printf_i+0x1e6>
 8004700:	6863      	ldr	r3, [r4, #4]
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	4293      	cmp	r3, r2
 8004706:	dc02      	bgt.n	800470e <_printf_i+0x1e6>
 8004708:	2330      	movs	r3, #48	; 0x30
 800470a:	3d01      	subs	r5, #1
 800470c:	702b      	strb	r3, [r5, #0]
 800470e:	9b02      	ldr	r3, [sp, #8]
 8004710:	1b5b      	subs	r3, r3, r5
 8004712:	6123      	str	r3, [r4, #16]
 8004714:	9b05      	ldr	r3, [sp, #20]
 8004716:	aa07      	add	r2, sp, #28
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	0021      	movs	r1, r4
 800471c:	9b04      	ldr	r3, [sp, #16]
 800471e:	9803      	ldr	r0, [sp, #12]
 8004720:	f7ff fe94 	bl	800444c <_printf_common>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d1b8      	bne.n	800469a <_printf_i+0x172>
 8004728:	2001      	movs	r0, #1
 800472a:	4240      	negs	r0, r0
 800472c:	b009      	add	sp, #36	; 0x24
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004730:	08004949 	.word	0x08004949
 8004734:	0800495a 	.word	0x0800495a

08004738 <memchr>:
 8004738:	b2c9      	uxtb	r1, r1
 800473a:	1882      	adds	r2, r0, r2
 800473c:	4290      	cmp	r0, r2
 800473e:	d101      	bne.n	8004744 <memchr+0xc>
 8004740:	2000      	movs	r0, #0
 8004742:	4770      	bx	lr
 8004744:	7803      	ldrb	r3, [r0, #0]
 8004746:	428b      	cmp	r3, r1
 8004748:	d0fb      	beq.n	8004742 <memchr+0xa>
 800474a:	3001      	adds	r0, #1
 800474c:	e7f6      	b.n	800473c <memchr+0x4>

0800474e <memmove>:
 800474e:	b510      	push	{r4, lr}
 8004750:	4288      	cmp	r0, r1
 8004752:	d902      	bls.n	800475a <memmove+0xc>
 8004754:	188b      	adds	r3, r1, r2
 8004756:	4298      	cmp	r0, r3
 8004758:	d303      	bcc.n	8004762 <memmove+0x14>
 800475a:	2300      	movs	r3, #0
 800475c:	e007      	b.n	800476e <memmove+0x20>
 800475e:	5c8b      	ldrb	r3, [r1, r2]
 8004760:	5483      	strb	r3, [r0, r2]
 8004762:	3a01      	subs	r2, #1
 8004764:	d2fb      	bcs.n	800475e <memmove+0x10>
 8004766:	bd10      	pop	{r4, pc}
 8004768:	5ccc      	ldrb	r4, [r1, r3]
 800476a:	54c4      	strb	r4, [r0, r3]
 800476c:	3301      	adds	r3, #1
 800476e:	429a      	cmp	r2, r3
 8004770:	d1fa      	bne.n	8004768 <memmove+0x1a>
 8004772:	e7f8      	b.n	8004766 <memmove+0x18>

08004774 <_realloc_r>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	0007      	movs	r7, r0
 8004778:	000d      	movs	r5, r1
 800477a:	0016      	movs	r6, r2
 800477c:	2900      	cmp	r1, #0
 800477e:	d105      	bne.n	800478c <_realloc_r+0x18>
 8004780:	0011      	movs	r1, r2
 8004782:	f7ff fc71 	bl	8004068 <_malloc_r>
 8004786:	0004      	movs	r4, r0
 8004788:	0020      	movs	r0, r4
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478c:	2a00      	cmp	r2, #0
 800478e:	d103      	bne.n	8004798 <_realloc_r+0x24>
 8004790:	f7ff fc20 	bl	8003fd4 <_free_r>
 8004794:	0034      	movs	r4, r6
 8004796:	e7f7      	b.n	8004788 <_realloc_r+0x14>
 8004798:	f000 f812 	bl	80047c0 <_malloc_usable_size_r>
 800479c:	002c      	movs	r4, r5
 800479e:	42b0      	cmp	r0, r6
 80047a0:	d2f2      	bcs.n	8004788 <_realloc_r+0x14>
 80047a2:	0031      	movs	r1, r6
 80047a4:	0038      	movs	r0, r7
 80047a6:	f7ff fc5f 	bl	8004068 <_malloc_r>
 80047aa:	1e04      	subs	r4, r0, #0
 80047ac:	d0ec      	beq.n	8004788 <_realloc_r+0x14>
 80047ae:	0029      	movs	r1, r5
 80047b0:	0032      	movs	r2, r6
 80047b2:	f7ff fbfd 	bl	8003fb0 <memcpy>
 80047b6:	0029      	movs	r1, r5
 80047b8:	0038      	movs	r0, r7
 80047ba:	f7ff fc0b 	bl	8003fd4 <_free_r>
 80047be:	e7e3      	b.n	8004788 <_realloc_r+0x14>

080047c0 <_malloc_usable_size_r>:
 80047c0:	1f0b      	subs	r3, r1, #4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1f18      	subs	r0, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da01      	bge.n	80047ce <_malloc_usable_size_r+0xe>
 80047ca:	580b      	ldr	r3, [r1, r0]
 80047cc:	18c0      	adds	r0, r0, r3
 80047ce:	4770      	bx	lr

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
