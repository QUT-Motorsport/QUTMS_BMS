
QUTMS_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08003f3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003f3c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae9d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d13  00000000  00000000  0002af35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002cc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001582c  00000000  00000000  0002de90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c16  00000000  00000000  000436bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072826  00000000  00000000  0004d2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfaf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000bfb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d70 	.word	0x08003d70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d70 	.word	0x08003d70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <bq769x0_reg_write_byte>:

static uint8_t adc_voltage_gain = 0;
static uint8_t adc_voltage_offset = 0;

HAL_StatusTypeDef bq769x0_reg_write_byte(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t value) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	0008      	movs	r0, r1
 800040e:	0011      	movs	r1, r2
 8000410:	1cfb      	adds	r3, r7, #3
 8000412:	1c02      	adds	r2, r0, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	1c0a      	adds	r2, r1, #0
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800041c:	210f      	movs	r1, #15
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	701a      	strb	r2, [r3, #0]

	// no crc as chip doesn't support it

	uint8_t data[2] = { reg, value };
 8000424:	200c      	movs	r0, #12
 8000426:	183b      	adds	r3, r7, r0
 8000428:	1cfa      	adds	r2, r7, #3
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	183b      	adds	r3, r7, r0
 8000430:	1cba      	adds	r2, r7, #2
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	705a      	strb	r2, [r3, #1]

	return HAL_I2C_Master_Transmit(hi2c, address, data, sizeof(data),
 8000436:	187b      	adds	r3, r7, r1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b299      	uxth	r1, r3
 800043c:	183a      	adds	r2, r7, r0
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <bq769x0_reg_write_byte+0x50>)
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2302      	movs	r3, #2
 8000446:	f001 f9e7 	bl	8001818 <HAL_I2C_Master_Transmit>
 800044a:	0003      	movs	r3, r0
	TIMEOUT_MINUTE);
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b004      	add	sp, #16
 8000452:	bd80      	pop	{r7, pc}
 8000454:	0000ea60 	.word	0x0000ea60

08000458 <bq769x0_reg_read_byte>:

	return result;
}

HAL_StatusTypeDef bq769x0_reg_read_byte(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t *value) {
 8000458:	b5b0      	push	{r4, r5, r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af02      	add	r7, sp, #8
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	200b      	movs	r0, #11
 8000464:	183b      	adds	r3, r7, r0
 8000466:	1c0a      	adds	r2, r1, #0
 8000468:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800046a:	2117      	movs	r1, #23
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2230      	movs	r2, #48	; 0x30
 8000470:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1,
 8000472:	187b      	adds	r3, r7, r1
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b299      	uxth	r1, r3
 8000478:	2516      	movs	r5, #22
 800047a:	197c      	adds	r4, r7, r5
 800047c:	183a      	adds	r2, r7, r0
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	f001 f9c7 	bl	8001818 <HAL_I2C_Master_Transmit>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]
	TIMEOUT_MINUTE);

	if (result != HAL_OK) {
 800048e:	197b      	adds	r3, r7, r5
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d003      	beq.n	800049e <bq769x0_reg_read_byte+0x46>
		// unable to send read request correctly
		return result;
 8000496:	2316      	movs	r3, #22
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	e00b      	b.n	80004b6 <bq769x0_reg_read_byte+0x5e>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, value, 1, TIMEOUT_MINUTE);
 800049e:	2317      	movs	r3, #23
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b299      	uxth	r1, r3
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	f001 faba 	bl	8001a28 <HAL_I2C_Master_Receive>
 80004b4:	0003      	movs	r3, r0
	}
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bdb0      	pop	{r4, r5, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	0000ea60 	.word	0x0000ea60

080004c4 <bq769x0_reg_read_bytes>:

HAL_StatusTypeDef bq769x0_reg_read_bytes(I2C_HandleTypeDef *hi2c, uint8_t reg,
		uint8_t *buffer, size_t length) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	200b      	movs	r0, #11
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	1c0a      	adds	r2, r1, #0
 80004d6:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 80004d8:	2117      	movs	r1, #23
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2230      	movs	r2, #48	; 0x30
 80004de:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1,
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b299      	uxth	r1, r3
 80004e6:	2516      	movs	r5, #22
 80004e8:	197c      	adds	r4, r7, r5
 80004ea:	183a      	adds	r2, r7, r0
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	f001 f990 	bl	8001818 <HAL_I2C_Master_Transmit>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]
	TIMEOUT_MINUTE);

	if (result != HAL_OK) {
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d003      	beq.n	800050c <bq769x0_reg_read_bytes+0x48>
		// unable to send read request correctly
		return result;
 8000504:	2316      	movs	r3, #22
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	e00d      	b.n	8000528 <bq769x0_reg_read_bytes+0x64>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, buffer, length,
 800050c:	2317      	movs	r3, #23
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b299      	uxth	r1, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b29c      	uxth	r4, r3
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0023      	movs	r3, r4
 8000522:	f001 fa81 	bl	8001a28 <HAL_I2C_Master_Receive>
 8000526:	0003      	movs	r3, r0
		TIMEOUT_MINUTE);
	}
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b006      	add	sp, #24
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	0000ea60 	.word	0x0000ea60

08000534 <bq769x0_read_gain_and_offset>:

HAL_StatusTypeDef bq769x0_read_gain_and_offset(I2C_HandleTypeDef *hi2c,
		uint8_t *gain, uint8_t *offset) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	uint8_t reading = 0;
 8000540:	2116      	movs	r1, #22
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result;

	// ADCOFFSET[7:0] = OFFSET[7:0]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCOFFSET, &reading);
 8000548:	2517      	movs	r5, #23
 800054a:	197c      	adds	r4, r7, r5
 800054c:	187a      	adds	r2, r7, r1
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2151      	movs	r1, #81	; 0x51
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff ff80 	bl	8000458 <bq769x0_reg_read_byte>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <bq769x0_read_gain_and_offset+0x44>
		*gain = 0;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
		return result;
 8000570:	2317      	movs	r3, #23
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	e05a      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*offset = reading;
 8000578:	2116      	movs	r1, #22
 800057a:	187b      	adds	r3, r7, r1
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	701a      	strb	r2, [r3, #0]
	reading = 0;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]

	// ADCGAIN2[7:5] = GAIN[2:0]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCGAIN2, &reading);
 8000588:	2517      	movs	r5, #23
 800058a:	197c      	adds	r4, r7, r5
 800058c:	187a      	adds	r2, r7, r1
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2159      	movs	r1, #89	; 0x59
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff60 	bl	8000458 <bq769x0_reg_read_byte>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d009      	beq.n	80005b8 <bq769x0_read_gain_and_offset+0x84>
		*gain = 0;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
		return result;
 80005b0:	2317      	movs	r3, #23
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	e03a      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*gain = (reading & 0b11100000) >> 5;
 80005b8:	2116      	movs	r1, #22
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	701a      	strb	r2, [r3, #0]
	reading = 0;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

	// ADCGAIN1[3:2] = GAIN[4:3]
	result = bq769x0_reg_read_byte(hi2c, BQ_ADCGAIN1, &reading);
 80005cc:	2517      	movs	r5, #23
 80005ce:	197c      	adds	r4, r7, r5
 80005d0:	187a      	adds	r2, r7, r1
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2150      	movs	r1, #80	; 0x50
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff3e 	bl	8000458 <bq769x0_reg_read_byte>
 80005dc:	0003      	movs	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80005e0:	197b      	adds	r3, r7, r5
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d009      	beq.n	80005fc <bq769x0_read_gain_and_offset+0xc8>
		*gain = 0;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
		*offset = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		return result;
 80005f4:	2317      	movs	r3, #23
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	e018      	b.n	800062e <bq769x0_read_gain_and_offset+0xfa>
	}

	*gain |= ((reading & 0b00001100) << 1);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25a      	sxtb	r2, r3
 8000602:	2316      	movs	r3, #22
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	b25b      	sxtb	r3, r3
 800060c:	2118      	movs	r1, #24
 800060e:	400b      	ands	r3, r1
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2da      	uxtb	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	701a      	strb	r2, [r3, #0]

	adc_voltage_gain = *gain;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <bq769x0_read_gain_and_offset+0x104>)
 8000622:	701a      	strb	r2, [r3, #0]
	adc_voltage_offset = *offset;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <bq769x0_read_gain_and_offset+0x108>)
 800062a:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	0018      	movs	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	b006      	add	sp, #24
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	2000008c 	.word	0x2000008c
 800063c:	2000008d 	.word	0x2000008d

08000640 <bq769x0_read_voltage>:

HAL_StatusTypeDef bq769x0_read_voltage(I2C_HandleTypeDef *hi2c, int cell,
		uint16_t *voltage) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	if (adc_voltage_gain == 0 || adc_voltage_offset == 0) {
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <bq769x0_read_voltage+0x1c>
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <bq769x0_read_voltage+0x28>
		bq769x0_read_gain_and_offset(hi2c, &adc_voltage_gain,
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 800065e:	4925      	ldr	r1, [pc, #148]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ff66 	bl	8000534 <bq769x0_read_gain_and_offset>
				&adc_voltage_offset);
	}

	uint8_t reg = BQ769X0_REG_VC1_HI + cell * 2;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3306      	adds	r3, #6
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2117      	movs	r1, #23
 8000670:	187a      	adds	r2, r7, r1
 8000672:	18db      	adds	r3, r3, r3
 8000674:	7013      	strb	r3, [r2, #0]
	uint8_t buffer[2];

	// FIXME
	HAL_StatusTypeDef ret = bq769x0_reg_read_bytes(hi2c, reg, buffer, 2);
 8000676:	2516      	movs	r5, #22
 8000678:	197c      	adds	r4, r7, r5
 800067a:	2310      	movs	r3, #16
 800067c:	18fa      	adds	r2, r7, r3
 800067e:	187b      	adds	r3, r7, r1
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	2302      	movs	r3, #2
 8000686:	f7ff ff1d 	bl	80004c4 <bq769x0_reg_read_bytes>
 800068a:	0003      	movs	r3, r0
 800068c:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <bq769x0_read_voltage+0x5e>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		return ret;
 8000696:	2316      	movs	r3, #22
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	e026      	b.n	80006ec <bq769x0_read_voltage+0xac>
	}

	uint16_t adc_value = ((buffer[0] & 0b00111111) << 8) | buffer[1];
 800069e:	2110      	movs	r1, #16
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	23fc      	movs	r3, #252	; 0xfc
 80006aa:	019b      	lsls	r3, r3, #6
 80006ac:	4013      	ands	r3, r2
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	2114      	movs	r1, #20
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	801a      	strh	r2, [r3, #0]
	*voltage = adc_value * (365 + adc_voltage_gain) / 1000 + adc_voltage_offset;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <bq769x0_read_voltage+0xb4>)
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	326e      	adds	r2, #110	; 0x6e
 80006ca:	32ff      	adds	r2, #255	; 0xff
 80006cc:	435a      	muls	r2, r3
 80006ce:	23fa      	movs	r3, #250	; 0xfa
 80006d0:	0099      	lsls	r1, r3, #2
 80006d2:	0010      	movs	r0, r2
 80006d4:	f7ff fdaa 	bl	800022c <__divsi3>
 80006d8:	0003      	movs	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <bq769x0_read_voltage+0xb8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	18d3      	adds	r3, r2, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b006      	add	sp, #24
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	2000008d 	.word	0x2000008d

080006fc <bq769x0_read_pack_voltage>:

HAL_StatusTypeDef bq769x0_read_pack_voltage(I2C_HandleTypeDef *hi2c,
		int total_cells, uint16_t *voltage) {
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	if (adc_voltage_gain == 0 || adc_voltage_offset == 0) {
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <bq769x0_read_pack_voltage+0x1c>
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d105      	bne.n	8000724 <bq769x0_read_pack_voltage+0x28>
		bq769x0_read_gain_and_offset(hi2c, &adc_voltage_gain,
 8000718:	4a30      	ldr	r2, [pc, #192]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 800071a:	492f      	ldr	r1, [pc, #188]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff ff08 	bl	8000534 <bq769x0_read_gain_and_offset>
				&adc_voltage_offset);
	}

	uint8_t buffer = 0;
 8000724:	2113      	movs	r1, #19
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]

	// FIXME
	HAL_StatusTypeDef ret = bq769x0_reg_read_byte(hi2c, BQ_BAT_HI, &buffer);
 800072c:	2517      	movs	r5, #23
 800072e:	197c      	adds	r4, r7, r5
 8000730:	187a      	adds	r2, r7, r1
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	212a      	movs	r1, #42	; 0x2a
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fe8e 	bl	8000458 <bq769x0_reg_read_byte>
 800073c:	0003      	movs	r3, r0
 800073e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8000740:	197b      	adds	r3, r7, r5
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <bq769x0_read_pack_voltage+0x5a>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		*voltage = 0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	801a      	strh	r2, [r3, #0]
		return ret;
 800074e:	2317      	movs	r3, #23
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	e03b      	b.n	80007ce <bq769x0_read_pack_voltage+0xd2>
	}
	uint16_t rawPackVoltage = buffer << 8;
 8000756:	2113      	movs	r1, #19
 8000758:	187b      	adds	r3, r7, r1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	2314      	movs	r3, #20
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0212      	lsls	r2, r2, #8
 8000764:	801a      	strh	r2, [r3, #0]
	ret = bq769x0_reg_read_byte(hi2c, BQ_BAT_LO, &buffer);
 8000766:	2517      	movs	r5, #23
 8000768:	197c      	adds	r4, r7, r5
 800076a:	187a      	adds	r2, r7, r1
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	212b      	movs	r1, #43	; 0x2b
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fe71 	bl	8000458 <bq769x0_reg_read_byte>
 8000776:	0003      	movs	r3, r0
 8000778:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800077a:	197b      	adds	r3, r7, r5
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <bq769x0_read_pack_voltage+0x94>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		*voltage = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
		return ret;
 8000788:	2317      	movs	r3, #23
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e01e      	b.n	80007ce <bq769x0_read_pack_voltage+0xd2>
	}
	rawPackVoltage |= buffer;
 8000790:	2313      	movs	r3, #19
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b299      	uxth	r1, r3
 8000798:	2014      	movs	r0, #20
 800079a:	183b      	adds	r3, r7, r0
 800079c:	183a      	adds	r2, r7, r0
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	430a      	orrs	r2, r1
 80007a2:	801a      	strh	r2, [r3, #0]

	*voltage = (4 * adc_voltage_gain * rawPackVoltage)
			+ (total_cells * adc_voltage_offset);
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <bq769x0_read_pack_voltage+0xdc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	183a      	adds	r2, r7, r0
 80007ac:	8812      	ldrh	r2, [r2, #0]
 80007ae:	4353      	muls	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <bq769x0_read_pack_voltage+0xe0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	b289      	uxth	r1, r1
 80007c0:	434b      	muls	r3, r1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	b29a      	uxth	r2, r3
	*voltage = (4 * adc_voltage_gain * rawPackVoltage)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80007cc:	2300      	movs	r3, #0

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b006      	add	sp, #24
 80007d4:	bdb0      	pop	{r4, r5, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	2000008d 	.word	0x2000008d

080007e0 <bq769x0_set_DSG>:
	uint8_t OV_TRIP = ((OV_TRIP_FULL >> 4) & 0b11111111);

	return bq769x0_reg_write_byte(hi2c, BQ_OV_TRIP, OV_TRIP);
}

HAL_StatusTypeDef bq769x0_set_DSG(I2C_HandleTypeDef *hi2c, uint8_t value) {
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	000a      	movs	r2, r1
 80007ea:	1cfb      	adds	r3, r7, #3
 80007ec:	701a      	strb	r2, [r3, #0]
	uint8_t currentReg = 0;
 80007ee:	210e      	movs	r1, #14
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = bq769x0_reg_read_byte(hi2c, BQ_SYS_CTRL2,
 80007f6:	250f      	movs	r5, #15
 80007f8:	197c      	adds	r4, r7, r5
 80007fa:	187a      	adds	r2, r7, r1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2105      	movs	r1, #5
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fe29 	bl	8000458 <bq769x0_reg_read_byte>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]
			&currentReg);

	if (result != HAL_OK) {
 800080a:	197b      	adds	r3, r7, r5
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <bq769x0_set_DSG+0x3a>
		return result;
 8000812:	230f      	movs	r3, #15
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	e01a      	b.n	8000850 <bq769x0_set_DSG+0x70>
	}

	// clear DSG_ON
	currentReg &= ~(1<<0);
 800081a:	210e      	movs	r1, #14
 800081c:	187b      	adds	r3, r7, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2201      	movs	r2, #1
 8000822:	4393      	bics	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	187b      	adds	r3, r7, r1
 8000828:	701a      	strb	r2, [r3, #0]

	// set DSG VALUE
	currentReg |= ((1<<0) & value);
 800082a:	1cfb      	adds	r3, r7, #3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	187b      	adds	r3, r7, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4313      	orrs	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	187b      	adds	r3, r7, r1
 800083e:	701a      	strb	r2, [r3, #0]

	// write back to register
	return bq769x0_reg_write_byte(hi2c, BQ_SYS_CTRL2, currentReg);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2105      	movs	r1, #5
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fddb 	bl	8000404 <bq769x0_reg_write_byte>
 800084e:	0003      	movs	r3, r0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b004      	add	sp, #16
 8000856:	bdb0      	pop	{r4, r5, r7, pc}

08000858 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	240c      	movs	r4, #12
 8000860:	193b      	adds	r3, r7, r4
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f002 fe7a 	bl	8003562 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	02c9      	lsls	r1, r1, #11
 8000878:	430a      	orrs	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_GPIO_Init+0x8c>)
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	02db      	lsls	r3, r3, #11
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_GPIO_Init+0x8c>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x8c>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0289      	lsls	r1, r1, #10
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_GPIO_Init+0x8c>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	029b      	lsls	r3, r3, #10
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	01db      	lsls	r3, r3, #7
 80008aa:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_GPIO_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	0019      	movs	r1, r3
 80008b0:	f000 fefe 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	01d2      	lsls	r2, r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2201      	movs	r2, #1
 80008c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <MX_GPIO_Init+0x90>)
 80008d2:	0019      	movs	r1, r3
 80008d4:	0010      	movs	r0, r2
 80008d6:	f000 fd83 	bl	80013e0 <HAL_GPIO_Init>

}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b009      	add	sp, #36	; 0x24
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_I2C1_Init+0x74>)
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fedf 	bl	80016ec <HAL_I2C_Init>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fadb 	bl	8000eec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2C1_Init+0x74>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fb60 	bl	8002000 <HAL_I2CEx_ConfigAnalogFilter>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fad2 	bl	8000eec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_I2C1_Init+0x74>)
 800094a:	2100      	movs	r1, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fba3 	bl	8002098 <HAL_I2CEx_ConfigDigitalFilter>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 fac9 	bl	8000eec <Error_Handler>
  }

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000009c 	.word	0x2000009c
 8000964:	40005400 	.word	0x40005400
 8000968:	2000090e 	.word	0x2000090e

0800096c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	2314      	movs	r3, #20
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f002 fdef 	bl	8003562 <memset>
  if(i2cHandle->Instance==I2C1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_I2C_MspInit+0x90>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d131      	bne.n	80009f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	02c9      	lsls	r1, r1, #11
 8000998:	430a      	orrs	r2, r1
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	02db      	lsls	r3, r3, #11
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	2114      	movs	r1, #20
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	22c0      	movs	r2, #192	; 0xc0
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2212      	movs	r2, #18
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2201      	movs	r2, #1
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2203      	movs	r2, #3
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <HAL_I2C_MspInit+0x98>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f000 fd05 	bl	80013e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 80009d8:	69da      	ldr	r2, [r3, #28]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0389      	lsls	r1, r1, #14
 80009e0:	430a      	orrs	r2, r1
 80009e2:	61da      	str	r2, [r3, #28]
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	039b      	lsls	r3, r3, #14
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b00a      	add	sp, #40	; 0x28
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	b0cb      	sub	sp, #300	; 0x12c
 8000a0c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a0e:	f000 fbad 	bl	800116c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a12:	f000 fa11 	bl	8000e38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a16:	f7ff ff1f 	bl	8000858 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a1a:	f7ff ff67 	bl	80008ec <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000a1e:	f000 fae5 	bl	8000fec <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	uint16_t underVoltage = 27;
 8000a22:	238d      	movs	r3, #141	; 0x8d
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	221b      	movs	r2, #27
 8000a2a:	801a      	strh	r2, [r3, #0]
	uint16_t overVoltage = 3700;
 8000a2c:	238c      	movs	r3, #140	; 0x8c
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	4aef      	ldr	r2, [pc, #956]	; (8000df0 <main+0x3e8>)
 8000a34:	801a      	strh	r2, [r3, #0]

	sprintf(msg, "startup.\r\n");
 8000a36:	200c      	movs	r0, #12
 8000a38:	183b      	adds	r3, r7, r0
 8000a3a:	4aee      	ldr	r2, [pc, #952]	; (8000df4 <main+0x3ec>)
 8000a3c:	ca12      	ldmia	r2!, {r1, r4}
 8000a3e:	c312      	stmia	r3!, {r1, r4}
 8000a40:	8811      	ldrh	r1, [r2, #0]
 8000a42:	8019      	strh	r1, [r3, #0]
 8000a44:	7892      	ldrb	r2, [r2, #2]
 8000a46:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000a48:	0004      	movs	r4, r0
 8000a4a:	183b      	adds	r3, r7, r0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff fb5b 	bl	8000108 <strlen>
 8000a52:	0003      	movs	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	2301      	movs	r3, #1
 8000a58:	425b      	negs	r3, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	1839      	adds	r1, r7, r0
 8000a5e:	48e6      	ldr	r0, [pc, #920]	; (8000df8 <main+0x3f0>)
 8000a60:	f002 f9a6 	bl	8002db0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	int idx = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	228e      	movs	r2, #142	; 0x8e
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	18ba      	adds	r2, r7, r2
 8000a6c:	6013      	str	r3, [r2, #0]
	uint8_t sys_stat = 0;
 8000a6e:	4be3      	ldr	r3, [pc, #908]	; (8000dfc <main+0x3f4>)
 8000a70:	2290      	movs	r2, #144	; 0x90
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	4694      	mov	ip, r2
 8000a76:	44bc      	add	ip, r7
 8000a78:	4463      	add	r3, ip
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT,
 8000a7e:	2518      	movs	r5, #24
 8000a80:	35ff      	adds	r5, #255	; 0xff
 8000a82:	197c      	adds	r4, r7, r5
 8000a84:	230b      	movs	r3, #11
 8000a86:	18fa      	adds	r2, r7, r3
 8000a88:	4bdd      	ldr	r3, [pc, #884]	; (8000e00 <main+0x3f8>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fce3 	bl	8000458 <bq769x0_reg_read_byte>
 8000a92:	0003      	movs	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
			&sys_stat);

	if (result != HAL_OK) {
 8000a96:	197b      	adds	r3, r7, r5
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d017      	beq.n	8000ace <main+0xc6>
		sprintf(msg, "error reading sys_stat.\r\n");
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	4ad8      	ldr	r2, [pc, #864]	; (8000e04 <main+0x3fc>)
 8000aa4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000aa6:	c331      	stmia	r3!, {r0, r4, r5}
 8000aa8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000aaa:	c331      	stmia	r3!, {r0, r4, r5}
 8000aac:	8812      	ldrh	r2, [r2, #0]
 8000aae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000ab0:	000c      	movs	r4, r1
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fb27 	bl	8000108 <strlen>
 8000aba:	0003      	movs	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	2301      	movs	r3, #1
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	0021      	movs	r1, r4
 8000ac4:	1879      	adds	r1, r7, r1
 8000ac6:	48cc      	ldr	r0, [pc, #816]	; (8000df8 <main+0x3f0>)
 8000ac8:	f002 f972 	bl	8002db0 <HAL_UART_Transmit>
 8000acc:	e04d      	b.n	8000b6a <main+0x162>
				HAL_MAX_DELAY);
	} else {
		sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 8000ace:	4bcb      	ldr	r3, [pc, #812]	; (8000dfc <main+0x3f4>)
 8000ad0:	2290      	movs	r2, #144	; 0x90
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	44bc      	add	ip, r7
 8000ad8:	4463      	add	r3, ip
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	49ca      	ldr	r1, [pc, #808]	; (8000e08 <main+0x400>)
 8000ae0:	240c      	movs	r4, #12
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fdff 	bl	80036e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fb0b 	bl	8000108 <strlen>
 8000af2:	0003      	movs	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	2301      	movs	r3, #1
 8000af8:	425b      	negs	r3, r3
 8000afa:	1939      	adds	r1, r7, r4
 8000afc:	48be      	ldr	r0, [pc, #760]	; (8000df8 <main+0x3f0>)
 8000afe:	f002 f957 	bl	8002db0 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		if (sys_stat > 0) {
 8000b02:	4bbe      	ldr	r3, [pc, #760]	; (8000dfc <main+0x3f4>)
 8000b04:	2290      	movs	r2, #144	; 0x90
 8000b06:	0052      	lsls	r2, r2, #1
 8000b08:	4694      	mov	ip, r2
 8000b0a:	44bc      	add	ip, r7
 8000b0c:	4463      	add	r3, ip
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02a      	beq.n	8000b6a <main+0x162>
			uint8_t clear = sys_stat;// & 0b00010011;
 8000b14:	218b      	movs	r1, #139	; 0x8b
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	4ab8      	ldr	r2, [pc, #736]	; (8000dfc <main+0x3f4>)
 8000b1c:	2090      	movs	r0, #144	; 0x90
 8000b1e:	0040      	lsls	r0, r0, #1
 8000b20:	4684      	mov	ip, r0
 8000b22:	44bc      	add	ip, r7
 8000b24:	4462      	add	r2, ip
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	701a      	strb	r2, [r3, #0]
			// SCD
			HAL_StatusTypeDef result = bq769x0_reg_write_byte(&hi2c1,
 8000b2a:	2516      	movs	r5, #22
 8000b2c:	35ff      	adds	r5, #255	; 0xff
 8000b2e:	197c      	adds	r4, r7, r5
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4bb2      	ldr	r3, [pc, #712]	; (8000e00 <main+0x3f8>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fc63 	bl	8000404 <bq769x0_reg_write_byte>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	7023      	strb	r3, [r4, #0]
					BQ_SYS_STAT, clear);
			sprintf(msg, "result: %d\r\n", result);
 8000b42:	197b      	adds	r3, r7, r5
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	49b1      	ldr	r1, [pc, #708]	; (8000e0c <main+0x404>)
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 fdcb 	bl	80036e8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fad7 	bl	8000108 <strlen>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	2301      	movs	r3, #1
 8000b60:	425b      	negs	r3, r3
 8000b62:	1939      	adds	r1, r7, r4
 8000b64:	48a4      	ldr	r0, [pc, #656]	; (8000df8 <main+0x3f0>)
 8000b66:	f002 f923 	bl	8002db0 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
	}

	result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT, &sys_stat);
 8000b6a:	2518      	movs	r5, #24
 8000b6c:	35ff      	adds	r5, #255	; 0xff
 8000b6e:	197c      	adds	r4, r7, r5
 8000b70:	230b      	movs	r3, #11
 8000b72:	18fa      	adds	r2, r7, r3
 8000b74:	4ba2      	ldr	r3, [pc, #648]	; (8000e00 <main+0x3f8>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fc6d 	bl	8000458 <bq769x0_reg_read_byte>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8000b82:	197b      	adds	r3, r7, r5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d017      	beq.n	8000bba <main+0x1b2>
		sprintf(msg, "error reading sys_stat.\r\n");
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	4a9d      	ldr	r2, [pc, #628]	; (8000e04 <main+0x3fc>)
 8000b90:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b92:	c331      	stmia	r3!, {r0, r4, r5}
 8000b94:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b96:	c331      	stmia	r3!, {r0, r4, r5}
 8000b98:	8812      	ldrh	r2, [r2, #0]
 8000b9a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000b9c:	000c      	movs	r4, r1
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fab1 	bl	8000108 <strlen>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	2301      	movs	r3, #1
 8000bac:	425b      	negs	r3, r3
 8000bae:	0021      	movs	r1, r4
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	4891      	ldr	r0, [pc, #580]	; (8000df8 <main+0x3f0>)
 8000bb4:	f002 f8fc 	bl	8002db0 <HAL_UART_Transmit>
 8000bb8:	e019      	b.n	8000bee <main+0x1e6>
				HAL_MAX_DELAY);
	} else {
		sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 8000bba:	4b90      	ldr	r3, [pc, #576]	; (8000dfc <main+0x3f4>)
 8000bbc:	2290      	movs	r2, #144	; 0x90
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	44bc      	add	ip, r7
 8000bc4:	4463      	add	r3, ip
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	498f      	ldr	r1, [pc, #572]	; (8000e08 <main+0x400>)
 8000bcc:	240c      	movs	r4, #12
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 fd89 	bl	80036e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fa95 	bl	8000108 <strlen>
 8000bde:	0003      	movs	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	2301      	movs	r3, #1
 8000be4:	425b      	negs	r3, r3
 8000be6:	1939      	adds	r1, r7, r4
 8000be8:	4883      	ldr	r0, [pc, #524]	; (8000df8 <main+0x3f0>)
 8000bea:	f002 f8e1 	bl	8002db0 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	uint8_t gain = 0;
 8000bee:	4b88      	ldr	r3, [pc, #544]	; (8000e10 <main+0x408>)
 8000bf0:	2290      	movs	r2, #144	; 0x90
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	44bc      	add	ip, r7
 8000bf8:	4463      	add	r3, ip
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 8000bfe:	4b85      	ldr	r3, [pc, #532]	; (8000e14 <main+0x40c>)
 8000c00:	2290      	movs	r2, #144	; 0x90
 8000c02:	0052      	lsls	r2, r2, #1
 8000c04:	4694      	mov	ip, r2
 8000c06:	44bc      	add	ip, r7
 8000c08:	4463      	add	r3, ip
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	bq769x0_read_gain_and_offset(&hi2c1, &gain, &offset);
 8000c0e:	2309      	movs	r3, #9
 8000c10:	18fa      	adds	r2, r7, r3
 8000c12:	230a      	movs	r3, #10
 8000c14:	18f9      	adds	r1, r7, r3
 8000c16:	4b7a      	ldr	r3, [pc, #488]	; (8000e00 <main+0x3f8>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fc8b 	bl	8000534 <bq769x0_read_gain_and_offset>

	sprintf(msg, "gain: %d, offset: %d.\r\n", gain, offset);
 8000c1e:	4b7c      	ldr	r3, [pc, #496]	; (8000e10 <main+0x408>)
 8000c20:	2290      	movs	r2, #144	; 0x90
 8000c22:	0052      	lsls	r2, r2, #1
 8000c24:	4694      	mov	ip, r2
 8000c26:	44bc      	add	ip, r7
 8000c28:	4463      	add	r3, ip
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <main+0x40c>)
 8000c30:	2190      	movs	r1, #144	; 0x90
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	44bc      	add	ip, r7
 8000c38:	4463      	add	r3, ip
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4976      	ldr	r1, [pc, #472]	; (8000e18 <main+0x410>)
 8000c3e:	250c      	movs	r5, #12
 8000c40:	1978      	adds	r0, r7, r5
 8000c42:	f002 fd51 	bl	80036e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000c46:	197b      	adds	r3, r7, r5
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fa5d 	bl	8000108 <strlen>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	1979      	adds	r1, r7, r5
 8000c58:	4867      	ldr	r0, [pc, #412]	; (8000df8 <main+0x3f0>)
 8000c5a:	f002 f8a9 	bl	8002db0 <HAL_UART_Transmit>
	sprintf(msg, "result: %d, under_voltage: %d, over_voltage: %d.\r\n", result, underVoltage, overVoltage);
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
				HAL_MAX_DELAY);
				*/

	uint8_t dsg_on = 1;
 8000c5e:	218a      	movs	r1, #138	; 0x8a
 8000c60:	0049      	lsls	r1, r1, #1
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
	result = bq769x0_set_DSG(&hi2c1, dsg_on);
 8000c68:	2418      	movs	r4, #24
 8000c6a:	34ff      	adds	r4, #255	; 0xff
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <main+0x3f8>)
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff fdb1 	bl	80007e0 <bq769x0_set_DSG>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	7023      	strb	r3, [r4, #0]
	sprintf(msg, "result: %d, dsg_on: %d.\r\n", result, dsg_on);
 8000c82:	0034      	movs	r4, r6
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	218a      	movs	r1, #138	; 0x8a
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4962      	ldr	r1, [pc, #392]	; (8000e1c <main+0x414>)
 8000c92:	1978      	adds	r0, r7, r5
 8000c94:	f002 fd28 	bl	80036e8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000c98:	197b      	adds	r3, r7, r5
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fa34 	bl	8000108 <strlen>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1979      	adds	r1, r7, r5
 8000caa:	4853      	ldr	r0, [pc, #332]	; (8000df8 <main+0x3f0>)
 8000cac:	f002 f880 	bl	8002db0 <HAL_UART_Transmit>
						HAL_MAX_DELAY);

	uint8_t sysctl2reg = 0;
 8000cb0:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <main+0x418>)
 8000cb2:	2290      	movs	r2, #144	; 0x90
 8000cb4:	0052      	lsls	r2, r2, #1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	44bc      	add	ip, r7
 8000cba:	4463      	add	r3, ip
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_CTRL2, &sysctl2reg);
 8000cc0:	0026      	movs	r6, r4
 8000cc2:	193c      	adds	r4, r7, r4
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	18fa      	adds	r2, r7, r3
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <main+0x3f8>)
 8000cca:	2105      	movs	r1, #5
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fbc3 	bl	8000458 <bq769x0_reg_read_byte>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
	sprintf(msg, "result: %d, sys_ctrl2: %d.\r\n", result, sysctl2reg);
 8000cd6:	0034      	movs	r4, r6
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <main+0x418>)
 8000cde:	2190      	movs	r1, #144	; 0x90
 8000ce0:	0049      	lsls	r1, r1, #1
 8000ce2:	468c      	mov	ip, r1
 8000ce4:	44bc      	add	ip, r7
 8000ce6:	4463      	add	r3, ip
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	494e      	ldr	r1, [pc, #312]	; (8000e24 <main+0x41c>)
 8000cec:	1978      	adds	r0, r7, r5
 8000cee:	f002 fcfb 	bl	80036e8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000cf2:	197b      	adds	r3, r7, r5
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fa07 	bl	8000108 <strlen>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	2301      	movs	r3, #1
 8000d00:	425b      	negs	r3, r3
 8000d02:	1979      	adds	r1, r7, r5
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <main+0x3f0>)
 8000d06:	f002 f853 	bl	8002db0 <HAL_UART_Transmit>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		int cell = 7;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	2688      	movs	r6, #136	; 0x88
 8000d0e:	0076      	lsls	r6, r6, #1
 8000d10:	19ba      	adds	r2, r7, r6
 8000d12:	6013      	str	r3, [r2, #0]

		uint16_t voltage = 0;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <main+0x420>)
 8000d16:	2290      	movs	r2, #144	; 0x90
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	44bc      	add	ip, r7
 8000d1e:	4463      	add	r3, ip
 8000d20:	2200      	movs	r2, #0
 8000d22:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef volRes = bq769x0_read_voltage(&hi2c1, cell, &voltage);
 8000d24:	2510      	movs	r5, #16
 8000d26:	35ff      	adds	r5, #255	; 0xff
 8000d28:	197c      	adds	r4, r7, r5
 8000d2a:	1dba      	adds	r2, r7, #6
 8000d2c:	19bb      	adds	r3, r7, r6
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <main+0x3f8>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fc84 	bl	8000640 <bq769x0_read_voltage>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	7023      	strb	r3, [r4, #0]

		uint16_t pack_voltage = 0;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <main+0x424>)
 8000d3e:	2290      	movs	r2, #144	; 0x90
 8000d40:	0052      	lsls	r2, r2, #1
 8000d42:	4694      	mov	ip, r2
 8000d44:	44bc      	add	ip, r7
 8000d46:	4463      	add	r3, ip
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]
		volRes = bq769x0_read_pack_voltage(&hi2c1, 10, &pack_voltage);
 8000d4c:	197c      	adds	r4, r7, r5
 8000d4e:	1d3a      	adds	r2, r7, #4
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <main+0x3f8>)
 8000d52:	210a      	movs	r1, #10
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fcd1 	bl	80006fc <bq769x0_read_pack_voltage>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]

		sprintf(msg, "result: %d, voltage (%d): %d, pack voltage: %d.\r\n", volRes, cell, voltage, pack_voltage);
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <main+0x420>)
 8000d64:	2190      	movs	r1, #144	; 0x90
 8000d66:	0049      	lsls	r1, r1, #1
 8000d68:	468c      	mov	ip, r1
 8000d6a:	44bc      	add	ip, r7
 8000d6c:	4463      	add	r3, ip
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	001c      	movs	r4, r3
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <main+0x424>)
 8000d74:	2190      	movs	r1, #144	; 0x90
 8000d76:	0049      	lsls	r1, r1, #1
 8000d78:	468c      	mov	ip, r1
 8000d7a:	44bc      	add	ip, r7
 8000d7c:	4463      	add	r3, ip
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	001d      	movs	r5, r3
 8000d82:	19bb      	adds	r3, r7, r6
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	492a      	ldr	r1, [pc, #168]	; (8000e30 <main+0x428>)
 8000d88:	260c      	movs	r6, #12
 8000d8a:	19b8      	adds	r0, r7, r6
 8000d8c:	9501      	str	r5, [sp, #4]
 8000d8e:	9400      	str	r4, [sp, #0]
 8000d90:	f002 fcaa 	bl	80036e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen((char*) msg),
 8000d94:	0034      	movs	r4, r6
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff f9b5 	bl	8000108 <strlen>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	2301      	movs	r3, #1
 8000da4:	425b      	negs	r3, r3
 8000da6:	1939      	adds	r1, r7, r4
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <main+0x3f0>)
 8000daa:	f002 f801 	bl	8002db0 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		idx++;
 8000dae:	228e      	movs	r2, #142	; 0x8e
 8000db0:	0052      	lsls	r2, r2, #1
 8000db2:	18bb      	adds	r3, r7, r2
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <main+0x42c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	f000 fc73 	bl	80016b0 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 fa30 	bl	8001234 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <main+0x42c>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	0019      	movs	r1, r3
 8000dde:	f000 fc67 	bl	80016b0 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fa24 	bl	8001234 <HAL_Delay>
	while (1) {
 8000dec:	e78d      	b.n	8000d0a <main+0x302>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	00000e74 	.word	0x00000e74
 8000df4:	08003d88 	.word	0x08003d88
 8000df8:	200000e8 	.word	0x200000e8
 8000dfc:	fffffeeb 	.word	0xfffffeeb
 8000e00:	2000009c 	.word	0x2000009c
 8000e04:	08003d94 	.word	0x08003d94
 8000e08:	08003db0 	.word	0x08003db0
 8000e0c:	08003dc0 	.word	0x08003dc0
 8000e10:	fffffeea 	.word	0xfffffeea
 8000e14:	fffffee9 	.word	0xfffffee9
 8000e18:	08003dd0 	.word	0x08003dd0
 8000e1c:	08003de8 	.word	0x08003de8
 8000e20:	fffffee8 	.word	0xfffffee8
 8000e24:	08003e04 	.word	0x08003e04
 8000e28:	fffffee6 	.word	0xfffffee6
 8000e2c:	fffffee4 	.word	0xfffffee4
 8000e30:	08003e24 	.word	0x08003e24
 8000e34:	48000400 	.word	0x48000400

08000e38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b099      	sub	sp, #100	; 0x64
 8000e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3e:	242c      	movs	r4, #44	; 0x2c
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2334      	movs	r3, #52	; 0x34
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f002 fb8a 	bl	8003562 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e4e:	231c      	movs	r3, #28
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	0018      	movs	r0, r3
 8000e54:	2310      	movs	r3, #16
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f002 fb82 	bl	8003562 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	0018      	movs	r0, r3
 8000e62:	2318      	movs	r3, #24
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f002 fb7b 	bl	8003562 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	0021      	movs	r1, r4
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2202      	movs	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2201      	movs	r2, #1
 8000e78:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 f951 	bl	8002130 <HAL_RCC_OscConfig>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x5e>
		Error_Handler();
 8000e92:	f000 f82b 	bl	8000eec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e96:	211c      	movs	r1, #28
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fcc1 	bl	800283c <HAL_RCC_ClockConfig>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x8a>
		Error_Handler();
 8000ebe:	f000 f815 	bl	8000eec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2221      	movs	r2, #33	; 0x21
 8000ec6:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 fe28 	bl	8002b2c <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xac>
		Error_Handler();
 8000ee0:	f000 f804 	bl	8000eec <Error_Handler>
	}
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b019      	add	sp, #100	; 0x64
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x44>)
 8000f00:	699a      	ldr	r2, [r3, #24]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_MspInit+0x44>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x44>)
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0549      	lsls	r1, r1, #21
 8000f20:	430a      	orrs	r2, r1
 8000f22:	61da      	str	r2, [r3, #28]
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_MspInit+0x44>)
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	055b      	lsls	r3, r3, #21
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f948 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f002 faaa 	bl	80034fc <__errno>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	18d2      	adds	r2, r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20001800 	.word	0x20001800
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	20000170 	.word	0x20000170

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <MX_USART1_UART_Init+0x5c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8000ff8:	2296      	movs	r2, #150	; 0x96
 8000ffa:	0212      	lsls	r2, r2, #8
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART1_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART1_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART1_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <MX_USART1_UART_Init+0x58>)
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fe69 	bl	8002d08 <HAL_UART_Init>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800103a:	f7ff ff57 	bl	8000eec <Error_Handler>
  }

}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000e8 	.word	0x200000e8
 8001048:	40013800 	.word	0x40013800

0800104c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	2314      	movs	r3, #20
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	0018      	movs	r0, r3
 800105a:	2314      	movs	r3, #20
 800105c:	001a      	movs	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	f002 fa7f 	bl	8003562 <memset>
  if(uartHandle->Instance==USART1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0x94>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d133      	bne.n	80010d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	01c9      	lsls	r1, r1, #7
 8001078:	430a      	orrs	r2, r1
 800107a:	619a      	str	r2, [r3, #24]
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x98>)
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x98>)
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0289      	lsls	r1, r1, #10
 8001094:	430a      	orrs	r2, r1
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_UART_MspInit+0x98>)
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010a6:	2114      	movs	r1, #20
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	22c0      	movs	r2, #192	; 0xc0
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2203      	movs	r2, #3
 80010c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2201      	movs	r2, #1
 80010c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	187a      	adds	r2, r7, r1
 80010ca:	2390      	movs	r3, #144	; 0x90
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 f985 	bl	80013e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00a      	add	sp, #40	; 0x28
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <LoopForever+0x6>)
    LDR R1, [R0]
 80010ee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010f0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <LoopForever+0xa>)
    CMP R1, R2
 80010f4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010f6:	d105      	bne.n	8001104 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010fa:	4913      	ldr	r1, [pc, #76]	; (8001148 <LoopForever+0x12>)
    STR R1, [R0]
 80010fc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001100:	4913      	ldr	r1, [pc, #76]	; (8001150 <LoopForever+0x1a>)
    STR R1, [R0]
 8001102:	6001      	str	r1, [r0, #0]

08001104 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001106:	4914      	ldr	r1, [pc, #80]	; (8001158 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <LoopForever+0x26>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800111c:	4c11      	ldr	r4, [pc, #68]	; (8001164 <LoopForever+0x2e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800112a:	f7ff ff59 	bl	8000fe0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800112e:	f002 f9eb 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff fc69 	bl	8000a08 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   r0, =_estack
 8001138:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800113c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001140:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001144:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001148:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800114c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001150:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800115c:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 8001160:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001164:	20000170 	.word	0x20000170

08001168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>
	...

0800116c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_Init+0x24>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_Init+0x24>)
 8001176:	2110      	movs	r1, #16
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f809 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001182:	f7ff feb9 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x5c>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	0019      	movs	r1, r3
 80011a6:	23fa      	movs	r3, #250	; 0xfa
 80011a8:	0098      	lsls	r0, r3, #2
 80011aa:	f7fe ffb5 	bl	8000118 <__udivsi3>
 80011ae:	0003      	movs	r3, r0
 80011b0:	0019      	movs	r1, r3
 80011b2:	0020      	movs	r0, r4
 80011b4:	f7fe ffb0 	bl	8000118 <__udivsi3>
 80011b8:	0003      	movs	r3, r0
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 f903 	bl	80013c6 <HAL_SYSTICK_Config>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e00f      	b.n	80011e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d80b      	bhi.n	80011e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	425b      	negs	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f8e0 	bl	800139c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_InitTick+0x64>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b003      	add	sp, #12
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	18d2      	adds	r2, r2, r3
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000008 	.word	0x20000008
 800121c:	20000168 	.word	0x20000168

08001220 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000168 	.word	0x20000168

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fff0 	bl	8001220 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_Delay+0x40>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	001a      	movs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	189b      	adds	r3, r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	f7ff ffe0 	bl	8001220 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d828      	bhi.n	80012e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <__NVIC_SetPriority+0xd4>)
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	33c0      	adds	r3, #192	; 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	589b      	ldr	r3, [r3, r2]
 800129e:	1dfa      	adds	r2, r7, #7
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	0011      	movs	r1, r2
 80012a4:	2203      	movs	r2, #3
 80012a6:	400a      	ands	r2, r1
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	21ff      	movs	r1, #255	; 0xff
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	43d2      	mvns	r2, r2
 80012b2:	401a      	ands	r2, r3
 80012b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	22ff      	movs	r2, #255	; 0xff
 80012bc:	401a      	ands	r2, r3
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	2303      	movs	r3, #3
 80012c6:	4003      	ands	r3, r0
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012cc:	481f      	ldr	r0, [pc, #124]	; (800134c <__NVIC_SetPriority+0xd4>)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	33c0      	adds	r3, #192	; 0xc0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012de:	e031      	b.n	8001344 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <__NVIC_SetPriority+0xd8>)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0019      	movs	r1, r3
 80012e8:	230f      	movs	r3, #15
 80012ea:	400b      	ands	r3, r1
 80012ec:	3b08      	subs	r3, #8
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3306      	adds	r3, #6
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <__NVIC_SetPriority+0xd8>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	001c      	movs	r4, r3
 8001330:	230f      	movs	r3, #15
 8001332:	4023      	ands	r3, r4
 8001334:	3b08      	subs	r3, #8
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	430a      	orrs	r2, r1
 800133a:	3306      	adds	r3, #6
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	18c3      	adds	r3, r0, r3
 8001340:	3304      	adds	r3, #4
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b003      	add	sp, #12
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <SysTick_Config+0x40>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e010      	b.n	800138c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <SysTick_Config+0x44>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	3a01      	subs	r2, #1
 8001370:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	2301      	movs	r3, #1
 8001374:	425b      	negs	r3, r3
 8001376:	2103      	movs	r1, #3
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff7d 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SysTick_Config+0x44>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x44>)
 8001386:	2207      	movs	r2, #7
 8001388:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}
 8001394:	00ffffff 	.word	0x00ffffff
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	210f      	movs	r1, #15
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	1c02      	adds	r2, r0, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff ffbf 	bl	8001354 <SysTick_Config>
 80013d6:	0003      	movs	r3, r0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	e149      	b.n	8001684 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4091      	lsls	r1, r2
 80013fa:	000a      	movs	r2, r1
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d100      	bne.n	8001408 <HAL_GPIO_Init+0x28>
 8001406:	e13a      	b.n	800167e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00b      	beq.n	8001428 <HAL_GPIO_Init+0x48>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800141c:	2b11      	cmp	r3, #17
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	409a      	lsls	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	43da      	mvns	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	2201      	movs	r2, #1
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0xea>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d123      	bne.n	8001512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	58d3      	ldr	r3, [r2, r3]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2207      	movs	r2, #7
 80014dc:	4013      	ands	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2107      	movs	r1, #7
 80014f6:	400b      	ands	r3, r1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	6939      	ldr	r1, [r7, #16]
 8001510:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	409a      	lsls	r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	401a      	ands	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	055b      	lsls	r3, r3, #21
 800154e:	4013      	ands	r3, r2
 8001550:	d100      	bne.n	8001554 <HAL_GPIO_Init+0x174>
 8001552:	e094      	b.n	800167e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_GPIO_Init+0x2bc>)
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_GPIO_Init+0x2bc>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_GPIO_Init+0x2bc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	589b      	ldr	r3, [r3, r2]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	2390      	movs	r3, #144	; 0x90
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	429a      	cmp	r2, r3
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x1d6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <HAL_GPIO_Init+0x2c4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x1d2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x2c8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x1ce>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x1d8>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x1d8>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x1d8>
 80015b6:	2300      	movs	r3, #0
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	2103      	movs	r1, #3
 80015bc:	400a      	ands	r2, r1
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c8:	4935      	ldr	r1, [pc, #212]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4013      	ands	r3, r2
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43da      	mvns	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	035b      	lsls	r3, r3, #13
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	40da      	lsrs	r2, r3
 800168c:	1e13      	subs	r3, r2, #0
 800168e:	d000      	beq.n	8001692 <HAL_GPIO_Init+0x2b2>
 8001690:	e6ae      	b.n	80013f0 <HAL_GPIO_Init+0x10>
  } 
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b006      	add	sp, #24
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	0008      	movs	r0, r1
 80016ba:	0011      	movs	r1, r2
 80016bc:	1cbb      	adds	r3, r7, #2
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	1c7b      	adds	r3, r7, #1
 80016c4:	1c0a      	adds	r2, r1, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	1c7b      	adds	r3, r7, #1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d0:	1cbb      	adds	r3, r7, #2
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016da:	1cbb      	adds	r3, r7, #2
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e082      	b.n	8001804 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2241      	movs	r2, #65	; 0x41
 8001702:	5c9b      	ldrb	r3, [r3, r2]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff f929 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2241      	movs	r2, #65	; 0x41
 800171e:	2124      	movs	r1, #36	; 0x24
 8001720:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	438a      	bics	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_I2C_Init+0x120>)
 800173c:	400a      	ands	r2, r1
 800173e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4931      	ldr	r1, [pc, #196]	; (8001810 <HAL_I2C_Init+0x124>)
 800174c:	400a      	ands	r2, r1
 800174e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0209      	lsls	r1, r1, #8
 8001764:	430a      	orrs	r2, r1
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e007      	b.n	800177a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2184      	movs	r1, #132	; 0x84
 8001774:	0209      	lsls	r1, r1, #8
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d104      	bne.n	800178c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_I2C_Init+0x128>)
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	491a      	ldr	r1, [pc, #104]	; (8001810 <HAL_I2C_Init+0x124>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	0011      	movs	r1, r2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	021a      	lsls	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69d9      	ldr	r1, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1a      	ldr	r2, [r3, #32]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2241      	movs	r2, #65	; 0x41
 80017f0:	2120      	movs	r1, #32
 80017f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2242      	movs	r2, #66	; 0x42
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	f0ffffff 	.word	0xf0ffffff
 8001810:	ffff7fff 	.word	0xffff7fff
 8001814:	02008000 	.word	0x02008000

08001818 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	0008      	movs	r0, r1
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	0019      	movs	r1, r3
 8001826:	230a      	movs	r3, #10
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	1c02      	adds	r2, r0, #0
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	2308      	movs	r3, #8
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	1c0a      	adds	r2, r1, #0
 8001834:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2241      	movs	r2, #65	; 0x41
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	d000      	beq.n	8001844 <HAL_I2C_Master_Transmit+0x2c>
 8001842:	e0e7      	b.n	8001a14 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	5c9b      	ldrb	r3, [r3, r2]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Master_Transmit+0x3a>
 800184e:	2302      	movs	r3, #2
 8001850:	e0e1      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800185a:	f7ff fce1 	bl	8001220 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	0219      	lsls	r1, r3, #8
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2319      	movs	r3, #25
 800186e:	2201      	movs	r2, #1
 8001870:	f000 fa04 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cc      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2241      	movs	r2, #65	; 0x41
 8001880:	2121      	movs	r1, #33	; 0x21
 8001882:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2242      	movs	r2, #66	; 0x42
 8001888:	2110      	movs	r1, #16
 800188a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2208      	movs	r2, #8
 800189c:	18ba      	adds	r2, r7, r2
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d911      	bls.n	80018d6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	045c      	lsls	r4, r3, #17
 80018c2:	230a      	movs	r3, #10
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	8819      	ldrh	r1, [r3, #0]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_I2C_Master_Transmit+0x208>)
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	0023      	movs	r3, r4
 80018d0:	f000 fb60 	bl	8001f94 <I2C_TransferConfig>
 80018d4:	e075      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	049c      	lsls	r4, r3, #18
 80018ea:	230a      	movs	r3, #10
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	8819      	ldrh	r1, [r3, #0]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_I2C_Master_Transmit+0x208>)
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	0023      	movs	r3, r4
 80018f8:	f000 fb4c 	bl	8001f94 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018fc:	e061      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f9f8 	bl	8001cfa <I2C_WaitOnTXISFlagUntilTimeout>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e081      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03a      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0x1aa>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	d136      	bne.n	80019c2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	0013      	movs	r3, r2
 800195e:	2200      	movs	r2, #0
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	f000 f98b 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e053      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	d911      	bls.n	800199c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	22ff      	movs	r2, #255	; 0xff
 800197c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	b2da      	uxtb	r2, r3
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	045c      	lsls	r4, r3, #17
 8001988:	230a      	movs	r3, #10
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	8819      	ldrh	r1, [r3, #0]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	0023      	movs	r3, r4
 8001996:	f000 fafd 	bl	8001f94 <I2C_TransferConfig>
 800199a:	e012      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	049c      	lsls	r4, r3, #18
 80019b0:	230a      	movs	r3, #10
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	8819      	ldrh	r1, [r3, #0]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	0023      	movs	r3, r4
 80019be:	f000 fae9 	bl	8001f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d198      	bne.n	80018fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f9d0 	bl	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e01a      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2220      	movs	r2, #32
 80019e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	490c      	ldr	r1, [pc, #48]	; (8001a24 <HAL_I2C_Master_Transmit+0x20c>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2242      	movs	r2, #66	; 0x42
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
  }
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b007      	add	sp, #28
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	80002000 	.word	0x80002000
 8001a24:	fe00e800 	.word	0xfe00e800

08001a28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	0008      	movs	r0, r1
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	0019      	movs	r1, r3
 8001a36:	230a      	movs	r3, #10
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	2308      	movs	r3, #8
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	1c0a      	adds	r2, r1, #0
 8001a44:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2241      	movs	r2, #65	; 0x41
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d000      	beq.n	8001a54 <HAL_I2C_Master_Receive+0x2c>
 8001a52:	e0e8      	b.n	8001c26 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Master_Receive+0x3a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e0e2      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a6a:	f7ff fbd9 	bl	8001220 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	0219      	lsls	r1, r3, #8
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f000 f8fc 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0cd      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2241      	movs	r2, #65	; 0x41
 8001a90:	2122      	movs	r1, #34	; 0x22
 8001a92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2242      	movs	r2, #66	; 0x42
 8001a98:	2110      	movs	r1, #16
 8001a9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	18ba      	adds	r2, r7, r2
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d911      	bls.n	8001ae6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	045c      	lsls	r4, r3, #17
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	8819      	ldrh	r1, [r3, #0]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_I2C_Master_Receive+0x208>)
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	0023      	movs	r3, r4
 8001ae0:	f000 fa58 	bl	8001f94 <I2C_TransferConfig>
 8001ae4:	e076      	b.n	8001bd4 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049c      	lsls	r4, r3, #18
 8001afa:	230a      	movs	r3, #10
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	8819      	ldrh	r1, [r3, #0]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_I2C_Master_Receive+0x208>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	0023      	movs	r3, r4
 8001b08:	f000 fa44 	bl	8001f94 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b0c:	e062      	b.n	8001bd4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f96b 	bl	8001df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e082      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <HAL_I2C_Master_Receive+0x1ac>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d136      	bne.n	8001bd4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	0013      	movs	r3, r2
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	f000 f882 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e053      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2bff      	cmp	r3, #255	; 0xff
 8001b88:	d911      	bls.n	8001bae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	22ff      	movs	r2, #255	; 0xff
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	045c      	lsls	r4, r3, #17
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	8819      	ldrh	r1, [r3, #0]
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	0023      	movs	r3, r4
 8001ba8:	f000 f9f4 	bl	8001f94 <I2C_TransferConfig>
 8001bac:	e012      	b.n	8001bd4 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	049c      	lsls	r4, r3, #18
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	8819      	ldrh	r1, [r3, #0]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	0023      	movs	r3, r4
 8001bd0:	f000 f9e0 	bl	8001f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d197      	bne.n	8001b0e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f8c7 	bl	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01a      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	490b      	ldr	r1, [pc, #44]	; (8001c34 <HAL_I2C_Master_Receive+0x20c>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2241      	movs	r2, #65	; 0x41
 8001c0e:	2120      	movs	r1, #32
 8001c10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2242      	movs	r2, #66	; 0x42
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b007      	add	sp, #28
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	80002400 	.word	0x80002400
 8001c34:	fe00e800 	.word	0xfe00e800

08001c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d103      	bne.n	8001c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d007      	beq.n	8001c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	430a      	orrs	r2, r1
 8001c72:	619a      	str	r2, [r3, #24]
  }
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c8c:	e021      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	d01e      	beq.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c94:	f7ff fac4 	bl	8001220 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d113      	bne.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	2220      	movs	r2, #32
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2241      	movs	r2, #65	; 0x41
 8001cba:	2120      	movs	r1, #32
 8001cbc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2242      	movs	r2, #66	; 0x42
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	425a      	negs	r2, r3
 8001ce2:	4153      	adcs	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d0ce      	beq.n	8001c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d06:	e02b      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f8da 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e029      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	d01e      	beq.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d22:	f7ff fa7d 	bl	8001220 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d302      	bcc.n	8001d38 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d113      	bne.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2241      	movs	r2, #65	; 0x41
 8001d48:	2120      	movs	r1, #32
 8001d4a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2242      	movs	r2, #66	; 0x42
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d1cc      	bne.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d84:	e028      	b.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f89b 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e026      	b.n	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff fa41 	bl	8001220 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d113      	bne.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	2220      	movs	r2, #32
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2241      	movs	r2, #65	; 0x41
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2242      	movs	r2, #66	; 0x42
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e007      	b.n	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d1cf      	bne.n	8001d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dfc:	e055      	b.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 f85f 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e053      	b.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d129      	bne.n	8001e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d105      	bne.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e03f      	b.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2241      	movs	r2, #65	; 0x41
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2242      	movs	r2, #66	; 0x42
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e022      	b.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e74:	f7ff f9d4 	bl	8001220 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d302      	bcc.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	2220      	movs	r2, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2241      	movs	r2, #65	; 0x41
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e007      	b.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d1a2      	bne.n	8001dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	fe00e800 	.word	0xfe00e800

08001ec8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2210      	movs	r2, #16
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d151      	bne.n	8001f86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee2:	e021      	b.n	8001f28 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	d01e      	beq.n	8001f28 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7ff f999 	bl	8001220 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <I2C_IsAcknowledgeFailed+0x38>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d113      	bne.n	8001f28 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	2220      	movs	r2, #32
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2241      	movs	r2, #65	; 0x41
 8001f10:	2120      	movs	r1, #32
 8001f12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2242      	movs	r2, #66	; 0x42
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e02f      	b.n	8001f88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d1d6      	bne.n	8001ee4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff fe75 	bl	8001c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	490d      	ldr	r1, [pc, #52]	; (8001f90 <I2C_IsAcknowledgeFailed+0xc8>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	2204      	movs	r2, #4
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2241      	movs	r2, #65	; 0x41
 8001f6e:	2120      	movs	r1, #32
 8001f70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2242      	movs	r2, #66	; 0x42
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	fe00e800 	.word	0xfe00e800

08001f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	0008      	movs	r0, r1
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	240a      	movs	r4, #10
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	2009      	movs	r0, #9
 8001fac:	183b      	adds	r3, r7, r0
 8001fae:	1c0a      	adds	r2, r1, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	0d51      	lsrs	r1, r2, #21
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	00d2      	lsls	r2, r2, #3
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <I2C_TransferConfig+0x68>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	43d2      	mvns	r2, r2
 8001fc8:	401a      	ands	r2, r3
 8001fca:	0011      	movs	r1, r2
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	059b      	lsls	r3, r3, #22
 8001fd2:	0d9a      	lsrs	r2, r3, #22
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	0418      	lsls	r0, r3, #16
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	4003      	ands	r3, r0
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b005      	add	sp, #20
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	03ff63ff 	.word	0x03ff63ff

08002000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2241      	movs	r2, #65	; 0x41
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	d138      	bne.n	8002088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002020:	2302      	movs	r3, #2
 8002022:	e032      	b.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2241      	movs	r2, #65	; 0x41
 8002030:	2124      	movs	r1, #36	; 0x24
 8002032:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4911      	ldr	r1, [pc, #68]	; (8002094 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2241      	movs	r2, #65	; 0x41
 8002078:	2120      	movs	r1, #32
 800207a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
  }
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	ffffefff 	.word	0xffffefff

08002098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2241      	movs	r2, #65	; 0x41
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d139      	bne.n	8002122 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e033      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2241      	movs	r2, #65	; 0x41
 80020c8:	2124      	movs	r1, #36	; 0x24
 80020ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	2120      	movs	r1, #32
 8002114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b004      	add	sp, #16
 800212a:	bd80      	pop	{r7, pc}
 800212c:	fffff0ff 	.word	0xfffff0ff

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb76 	bl	8002830 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d100      	bne.n	8002150 <HAL_RCC_OscConfig+0x20>
 800214e:	e08e      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002150:	4bc5      	ldr	r3, [pc, #788]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	220c      	movs	r2, #12
 8002156:	4013      	ands	r3, r2
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00e      	beq.n	800217a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4bc2      	ldr	r3, [pc, #776]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d117      	bne.n	8002198 <HAL_RCC_OscConfig+0x68>
 8002168:	4bbf      	ldr	r3, [pc, #764]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	23c0      	movs	r3, #192	; 0xc0
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	401a      	ands	r2, r3
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	429a      	cmp	r2, r3
 8002178:	d10e      	bne.n	8002198 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4bbb      	ldr	r3, [pc, #748]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x58>
 8002186:	e071      	b.n	800226c <HAL_RCC_OscConfig+0x13c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d000      	beq.n	8002192 <HAL_RCC_OscConfig+0x62>
 8002190:	e06c      	b.n	800226c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f000 fb4c 	bl	8002830 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x80>
 80021a0:	4bb1      	ldr	r3, [pc, #708]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4bb0      	ldr	r3, [pc, #704]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e02f      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0xa2>
 80021b8:	4bab      	ldr	r3, [pc, #684]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4baa      	ldr	r3, [pc, #680]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021be:	49ab      	ldr	r1, [pc, #684]	; (800246c <HAL_RCC_OscConfig+0x33c>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4ba8      	ldr	r3, [pc, #672]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4ba7      	ldr	r3, [pc, #668]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ca:	49a9      	ldr	r1, [pc, #676]	; (8002470 <HAL_RCC_OscConfig+0x340>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e01e      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d10e      	bne.n	80021f8 <HAL_RCC_OscConfig+0xc8>
 80021da:	4ba3      	ldr	r3, [pc, #652]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4ba2      	ldr	r3, [pc, #648]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	02c9      	lsls	r1, r1, #11
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	4b9f      	ldr	r3, [pc, #636]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0249      	lsls	r1, r1, #9
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021f8:	4b9b      	ldr	r3, [pc, #620]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b9a      	ldr	r3, [pc, #616]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80021fe:	499b      	ldr	r1, [pc, #620]	; (800246c <HAL_RCC_OscConfig+0x33c>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4b98      	ldr	r3, [pc, #608]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b97      	ldr	r3, [pc, #604]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800220a:	4999      	ldr	r1, [pc, #612]	; (8002470 <HAL_RCC_OscConfig+0x340>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f802 	bl	8001220 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002222:	f7fe fffd 	bl	8001220 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2fd      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0xf2>
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe ffed 	bl	8001220 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ffe8 	bl	8001220 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2e8      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x11c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d100      	bne.n	800227a <HAL_RCC_OscConfig+0x14a>
 8002278:	e06c      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	220c      	movs	r2, #12
 8002280:	4013      	ands	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	220c      	movs	r2, #12
 800228a:	4013      	ands	r3, r2
 800228c:	2b08      	cmp	r3, #8
 800228e:	d11f      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1a0>
 8002290:	4b75      	ldr	r3, [pc, #468]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	401a      	ands	r2, r3
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	429a      	cmp	r2, r3
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x188>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2bb      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	22f8      	movs	r2, #248	; 0xf8
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00da      	lsls	r2, r3, #3
 80022c8:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e041      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d024      	beq.n	8002322 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80022de:	2101      	movs	r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe ff9c 	bl	8001220 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe ff97 	bl	8001220 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e297      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d0f1      	beq.n	80022ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22f8      	movs	r2, #248	; 0xf8
 8002310:	4393      	bics	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00da      	lsls	r2, r3, #3
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e018      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002328:	2101      	movs	r1, #1
 800232a:	438a      	bics	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe ff77 	bl	8001220 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe ff72 	bl	8001220 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e272      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d1f1      	bne.n	8002338 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2208      	movs	r2, #8
 800235a:	4013      	ands	r3, r2
 800235c:	d036      	beq.n	80023cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800236c:	2101      	movs	r1, #1
 800236e:	430a      	orrs	r2, r1
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7fe ff55 	bl	8001220 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe ff50 	bl	8001220 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e250      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d0f1      	beq.n	800237c <HAL_RCC_OscConfig+0x24c>
 8002398:	e018      	b.n	80023cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800239c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	438a      	bics	r2, r1
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe ff3b 	bl	8001220 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe ff36 	bl	8001220 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e236      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d1f1      	bne.n	80023b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2a8>
 80023d6:	e0b5      	b.n	8002544 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d8:	231f      	movs	r3, #31
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	055b      	lsls	r3, r3, #21
 80023e8:	4013      	ands	r3, r2
 80023ea:	d111      	bne.n	8002410 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0549      	lsls	r1, r1, #21
 80023f6:	430a      	orrs	r2, r1
 80023f8:	61da      	str	r2, [r3, #28]
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_RCC_OscConfig+0x344>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4013      	ands	r3, r2
 800241a:	d11a      	bne.n	8002452 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_RCC_OscConfig+0x344>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_RCC_OscConfig+0x344>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0049      	lsls	r1, r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe fef9 	bl	8001220 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fef4 	bl	8001220 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1f4      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x344>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10e      	bne.n	8002478 <HAL_RCC_OscConfig+0x348>
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_RCC_OscConfig+0x338>)
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	e035      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	40007000 	.word	0x40007000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x36a>
 8002480:	4bca      	ldr	r3, [pc, #808]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4bc9      	ldr	r3, [pc, #804]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	4bc7      	ldr	r3, [pc, #796]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4bc6      	ldr	r3, [pc, #792]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002492:	2104      	movs	r1, #4
 8002494:	438a      	bics	r2, r1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x38c>
 80024a2:	4bc2      	ldr	r3, [pc, #776]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4bc1      	ldr	r3, [pc, #772]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024a8:	2104      	movs	r1, #4
 80024aa:	430a      	orrs	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
 80024ae:	4bbf      	ldr	r3, [pc, #764]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	4bbe      	ldr	r3, [pc, #760]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 80024bc:	4bbb      	ldr	r3, [pc, #748]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4bba      	ldr	r3, [pc, #744]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	438a      	bics	r2, r1
 80024c6:	621a      	str	r2, [r3, #32]
 80024c8:	4bb8      	ldr	r3, [pc, #736]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	4bb7      	ldr	r3, [pc, #732]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	438a      	bics	r2, r1
 80024d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fea0 	bl	8001220 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fe9b 	bl	8001220 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4aaf      	ldr	r2, [pc, #700]	; (80027b0 <HAL_RCC_OscConfig+0x680>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e19a      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	4bac      	ldr	r3, [pc, #688]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3b6>
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fe8b 	bl	8001220 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe fe86 	bl	8001220 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4aa5      	ldr	r2, [pc, #660]	; (80027b0 <HAL_RCC_OscConfig+0x680>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e185      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b9c      	ldr	r3, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCC_OscConfig+0x684>)
 8002540:	400a      	ands	r2, r1
 8002542:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12a      	bne.n	80025ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002556:	4b95      	ldr	r3, [pc, #596]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255a:	4b94      	ldr	r3, [pc, #592]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002562:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002566:	4b91      	ldr	r3, [pc, #580]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fe57 	bl	8001220 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002578:	f7fe fe52 	bl	8001220 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e152      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002594:	4b85      	ldr	r3, [pc, #532]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	22f8      	movs	r2, #248	; 0xf8
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
 80025aa:	e034      	b.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	3305      	adds	r3, #5
 80025b2:	d111      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025b4:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b8:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025ba:	2104      	movs	r1, #4
 80025bc:	438a      	bics	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c0:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	22f8      	movs	r2, #248	; 0xf8
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	00da      	lsls	r2, r3, #3
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
 80025d6:	e01e      	b.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d8:	4b74      	ldr	r3, [pc, #464]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025dc:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025de:	2104      	movs	r1, #4
 80025e0:	430a      	orrs	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025e4:	4b71      	ldr	r3, [pc, #452]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e8:	4b70      	ldr	r3, [pc, #448]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe fe16 	bl	8001220 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025fa:	f7fe fe11 	bl	8001220 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e111      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800260c:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d1f1      	bne.n	80025fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d05c      	beq.n	80026da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002620:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d00e      	beq.n	800264a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800262c:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	220c      	movs	r2, #12
 8002632:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002634:	2b08      	cmp	r3, #8
 8002636:	d114      	bne.n	8002662 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	23c0      	movs	r3, #192	; 0xc0
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	401a      	ands	r2, r3
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	429a      	cmp	r2, r3
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800264a:	4b58      	ldr	r3, [pc, #352]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	4013      	ands	r3, r2
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5a8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d03c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e6      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800266c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	0249      	lsls	r1, r1, #9
 8002674:	430a      	orrs	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fdd2 	bl	8001220 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002682:	f7fe fdcd 	bl	8001220 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0cd      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002694:	4b45      	ldr	r3, [pc, #276]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	025b      	lsls	r3, r3, #9
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x552>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026a8:	4943      	ldr	r1, [pc, #268]	; (80027b8 <HAL_RCC_OscConfig+0x688>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fdb7 	bl	8001220 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7fe fdb2 	bl	8001220 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0b2      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	025b      	lsls	r3, r3, #9
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x588>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5b4>
 80026e2:	e0a4      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	220c      	movs	r2, #12
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x5c2>
 80026f0:	e078      	b.n	80027e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d14c      	bne.n	8002794 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002700:	492e      	ldr	r1, [pc, #184]	; (80027bc <HAL_RCC_OscConfig+0x68c>)
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fd8b 	bl	8001220 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fd86 	bl	8001220 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e086      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	049b      	lsls	r3, r3, #18
 800272a:	4013      	ands	r3, r2
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	220f      	movs	r2, #15
 8002734:	4393      	bics	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800273e:	430a      	orrs	r2, r1
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_RCC_OscConfig+0x690>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	431a      	orrs	r2, r3
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	0449      	lsls	r1, r1, #17
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fd59 	bl	8001220 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fd54 	bl	8001220 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e054      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	049b      	lsls	r3, r3, #18
 800278e:	4013      	ands	r3, r2
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x644>
 8002792:	e04c      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_OscConfig+0x67c>)
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <HAL_RCC_OscConfig+0x68c>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fd3e 	bl	8001220 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x6a6>
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40021000 	.word	0x40021000
 80027b0:	00001388 	.word	0x00001388
 80027b4:	efffffff 	.word	0xefffffff
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fd2c 	bl	8001220 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e02c      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_RCC_OscConfig+0x708>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	049b      	lsls	r3, r3, #18
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x694>
 80027e2:	e024      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01f      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x708>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x708>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	23c0      	movs	r3, #192	; 0xc0
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	401a      	ands	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	429a      	cmp	r2, r3
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	220f      	movs	r2, #15
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	23f0      	movs	r3, #240	; 0xf0
 800281e:	039b      	lsls	r3, r3, #14
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b008      	add	sp, #32
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0bf      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d911      	bls.n	8002882 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0a6      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d006      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800289c:	21e0      	movs	r1, #224	; 0xe0
 800289e:	00c9      	lsls	r1, r1, #3
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	22f0      	movs	r2, #240	; 0xf0
 80028aa:	4393      	bics	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d04c      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d120      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07a      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	049b      	lsls	r3, r3, #18
 80028ea:	4013      	ands	r3, r2
 80028ec:	d114      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06e      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	025b      	lsls	r3, r3, #9
 8002902:	4013      	ands	r3, r2
 8002904:	d108      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e062      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e05b      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	4393      	bics	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe fc78 	bl	8001220 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002934:	e009      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002936:	f7fe fc73 	bl	8001220 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e042      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	220c      	movs	r2, #12
 8002950:	401a      	ands	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1ec      	bne.n	8002936 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d211      	bcs.n	800298e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d001      	beq.n	800298e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e020      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_RCC_ClockConfig+0x1a8>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ac:	f000 f820 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029b0:	0001      	movs	r1, r0
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	220f      	movs	r2, #15
 80029ba:	4013      	ands	r3, r2
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1ac>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	000a      	movs	r2, r1
 80029c2:	40da      	lsrs	r2, r3
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1b0>)
 80029c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fbe3 	bl	8001194 <HAL_InitTick>
  
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	00001388 	.word	0x00001388
 80029e4:	fffff8ff 	.word	0xfffff8ff
 80029e8:	08003e78 	.word	0x08003e78
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b08f      	sub	sp, #60	; 0x3c
 80029f4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029f6:	2314      	movs	r3, #20
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xe8>)
 80029fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029fe:	c313      	stmia	r3!, {r0, r1, r4}
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_RCC_GetSysClockFreq+0xec>)
 8002a08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a0a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a24:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d006      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x52>
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d043      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d144      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a3c:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a40:	e044      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	220f      	movs	r2, #15
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2214      	movs	r2, #20
 8002a4c:	18ba      	adds	r2, r7, r2
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	220f      	movs	r2, #15
 8002a58:	4013      	ands	r3, r2
 8002a5a:	1d3a      	adds	r2, r7, #4
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	025b      	lsls	r3, r3, #9
 8002a66:	401a      	ands	r2, r3
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d109      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a72:	481c      	ldr	r0, [pc, #112]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a74:	f7fd fb50 	bl	8000118 <__udivsi3>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	4353      	muls	r3, r2
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	e01a      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	025b      	lsls	r3, r3, #9
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	23c0      	movs	r3, #192	; 0xc0
 8002a8e:	025b      	lsls	r3, r3, #9
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a96:	4814      	ldr	r0, [pc, #80]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a98:	f7fd fb3e 	bl	8000118 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	4353      	muls	r3, r2
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	480e      	ldr	r0, [pc, #56]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002aac:	f7fd fb34 	bl	8000118 <__udivsi3>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	4353      	muls	r3, r2
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002abe:	e005      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b00f      	add	sp, #60	; 0x3c
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	08003e58 	.word	0x08003e58
 8002adc:	08003e68 	.word	0x08003e68
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	02dc6c00 	.word	0x02dc6c00

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_RCC_GetHCLKFreq+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b04:	f7ff fff2 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b08:	0001      	movs	r1, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	2207      	movs	r2, #7
 8002b12:	4013      	ands	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	40d9      	lsrs	r1, r3
 8002b1a:	000b      	movs	r3, r1
}    
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08003e88 	.word	0x08003e88

08002b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b48:	e08f      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2317      	movs	r3, #23
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	055b      	lsls	r3, r3, #21
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d111      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0549      	lsls	r1, r1, #21
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
 8002b6c:	4b60      	ldr	r3, [pc, #384]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2317      	movs	r3, #23
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0049      	lsls	r1, r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fb40 	bl	8001220 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fb3b 	bl	8001220 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e097      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bc6:	6a1a      	ldr	r2, [r3, #32]
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d034      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	23c0      	movs	r3, #192	; 0xc0
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d02c      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be6:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0249      	lsls	r1, r1, #9
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c04:	493d      	ldr	r1, [pc, #244]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0a:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fb02 	bl	8001220 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e009      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fafd 	bl	8001220 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e058      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c54:	2317      	movs	r3, #23
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c64:	4927      	ldr	r1, [pc, #156]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	2210      	movs	r2, #16
 8002c98:	4393      	bics	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	4393      	bics	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	4393      	bics	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b006      	add	sp, #24
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	fffffcff 	.word	0xfffffcff
 8002cfc:	fffeffff 	.word	0xfffeffff
 8002d00:	00001388 	.word	0x00001388
 8002d04:	efffffff 	.word	0xefffffff

08002d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e044      	b.n	8002da4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2270      	movs	r2, #112	; 0x70
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe f98d 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2224      	movs	r2, #36	; 0x24
 8002d36:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8d8 	bl	8002f00 <UART_SetConfig>
 8002d50:	0003      	movs	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e024      	b.n	8002da4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 fa51 	bl	800320c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	490d      	ldr	r1, [pc, #52]	; (8002dac <HAL_UART_Init+0xa4>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	212a      	movs	r1, #42	; 0x2a
 8002d86:	438a      	bics	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fae9 	bl	8003374 <UART_CheckIdleState>
 8002da2:	0003      	movs	r3, r0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	ffffb7ff 	.word	0xffffb7ff

08002db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	1dbb      	adds	r3, r7, #6
 8002dbe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d000      	beq.n	8002dca <HAL_UART_Transmit+0x1a>
 8002dc8:	e095      	b.n	8002ef6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_UART_Transmit+0x28>
 8002dd0:	1dbb      	adds	r3, r7, #6
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e08d      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d109      	bne.n	8002dfc <HAL_UART_Transmit+0x4c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2201      	movs	r2, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e07d      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2270      	movs	r2, #112	; 0x70
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Transmit+0x5a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e076      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2270      	movs	r2, #112	; 0x70
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f9ff 	bl	8001220 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1dba      	adds	r2, r7, #6
 8002e2a:	2150      	movs	r1, #80	; 0x50
 8002e2c:	8812      	ldrh	r2, [r2, #0]
 8002e2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1dba      	adds	r2, r7, #6
 8002e34:	2152      	movs	r1, #82	; 0x52
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	015b      	lsls	r3, r3, #5
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Transmit+0xa8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e60:	e02d      	b.n	8002ebe <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	f000 fac6 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e03d      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	05d2      	lsls	r2, r2, #23
 8002e8c:	0dd2      	lsrs	r2, r2, #23
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	3302      	adds	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e008      	b.n	8002eac <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2252      	movs	r2, #82	; 0x52
 8002eb0:	5a9b      	ldrh	r3, [r3, r2]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b299      	uxth	r1, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2252      	movs	r2, #82	; 0x52
 8002ebc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2252      	movs	r2, #82	; 0x52
 8002ec2:	5a9b      	ldrh	r3, [r3, r2]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1cb      	bne.n	8002e62 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0013      	movs	r3, r2
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	f000 fa92 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e009      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2270      	movs	r2, #112	; 0x70
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b008      	add	sp, #32
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0c:	2317      	movs	r3, #23
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4aad      	ldr	r2, [pc, #692]	; (80031e8 <UART_SetConfig+0x2e8>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4aa8      	ldr	r2, [pc, #672]	; (80031ec <UART_SetConfig+0x2ec>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a9f      	ldr	r2, [pc, #636]	; (80031f0 <UART_SetConfig+0x2f0>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a9b      	ldr	r2, [pc, #620]	; (80031f4 <UART_SetConfig+0x2f4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d125      	bne.n	8002fd6 <UART_SetConfig+0xd6>
 8002f8a:	4b9b      	ldr	r3, [pc, #620]	; (80031f8 <UART_SetConfig+0x2f8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	2203      	movs	r2, #3
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d00f      	beq.n	8002fb6 <UART_SetConfig+0xb6>
 8002f96:	d304      	bcc.n	8002fa2 <UART_SetConfig+0xa2>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d011      	beq.n	8002fc0 <UART_SetConfig+0xc0>
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0xac>
 8002fa0:	e013      	b.n	8002fca <UART_SetConfig+0xca>
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e022      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fac:	231f      	movs	r3, #31
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e01d      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fb6:	231f      	movs	r3, #31
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2204      	movs	r2, #4
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e018      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e013      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2210      	movs	r2, #16
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	e00d      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a88      	ldr	r2, [pc, #544]	; (80031fc <UART_SetConfig+0x2fc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d104      	bne.n	8002fea <UART_SetConfig+0xea>
 8002fe0:	231f      	movs	r3, #31
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e003      	b.n	8002ff2 <UART_SetConfig+0xf2>
 8002fea:	231f      	movs	r3, #31
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2210      	movs	r2, #16
 8002ff0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d000      	beq.n	8003000 <UART_SetConfig+0x100>
 8002ffe:	e07d      	b.n	80030fc <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d01c      	beq.n	8003044 <UART_SetConfig+0x144>
 800300a:	dc02      	bgt.n	8003012 <UART_SetConfig+0x112>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <UART_SetConfig+0x11c>
 8003010:	e04b      	b.n	80030aa <UART_SetConfig+0x1aa>
 8003012:	2b04      	cmp	r3, #4
 8003014:	d025      	beq.n	8003062 <UART_SetConfig+0x162>
 8003016:	2b08      	cmp	r3, #8
 8003018:	d037      	beq.n	800308a <UART_SetConfig+0x18a>
 800301a:	e046      	b.n	80030aa <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301c:	f7ff fd70 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003020:	0003      	movs	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	005a      	lsls	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	18d2      	adds	r2, r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0019      	movs	r1, r3
 8003036:	0010      	movs	r0, r2
 8003038:	f7fd f86e 	bl	8000118 <__udivsi3>
 800303c:	0003      	movs	r3, r0
 800303e:	b29b      	uxth	r3, r3
 8003040:	61bb      	str	r3, [r7, #24]
        break;
 8003042:	e037      	b.n	80030b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	4a6d      	ldr	r2, [pc, #436]	; (8003200 <UART_SetConfig+0x300>)
 800304c:	189a      	adds	r2, r3, r2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0019      	movs	r1, r3
 8003054:	0010      	movs	r0, r2
 8003056:	f7fd f85f 	bl	8000118 <__udivsi3>
 800305a:	0003      	movs	r3, r0
 800305c:	b29b      	uxth	r3, r3
 800305e:	61bb      	str	r3, [r7, #24]
        break;
 8003060:	e028      	b.n	80030b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003062:	f7ff fcc5 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003066:	0003      	movs	r3, r0
 8003068:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	005a      	lsls	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	18d2      	adds	r2, r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0019      	movs	r1, r3
 800307c:	0010      	movs	r0, r2
 800307e:	f7fd f84b 	bl	8000118 <__udivsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	b29b      	uxth	r3, r3
 8003086:	61bb      	str	r3, [r7, #24]
        break;
 8003088:	e014      	b.n	80030b4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	0252      	lsls	r2, r2, #9
 8003094:	189a      	adds	r2, r3, r2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f7fd f83b 	bl	8000118 <__udivsi3>
 80030a2:	0003      	movs	r3, r0
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e004      	b.n	80030b4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80030aa:	2317      	movs	r3, #23
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
        break;
 80030b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	d91b      	bls.n	80030f2 <UART_SetConfig+0x1f2>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4a51      	ldr	r2, [pc, #324]	; (8003204 <UART_SetConfig+0x304>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d817      	bhi.n	80030f2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	200a      	movs	r0, #10
 80030c8:	183b      	adds	r3, r7, r0
 80030ca:	210f      	movs	r1, #15
 80030cc:	438a      	bics	r2, r1
 80030ce:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2207      	movs	r2, #7
 80030d8:	4013      	ands	r3, r2
 80030da:	b299      	uxth	r1, r3
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	183a      	adds	r2, r7, r0
 80030e0:	8812      	ldrh	r2, [r2, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	183a      	adds	r2, r7, r0
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	e06c      	b.n	80031cc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80030f2:	2317      	movs	r3, #23
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e067      	b.n	80031cc <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80030fc:	231f      	movs	r3, #31
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d01b      	beq.n	800313e <UART_SetConfig+0x23e>
 8003106:	dc02      	bgt.n	800310e <UART_SetConfig+0x20e>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <UART_SetConfig+0x218>
 800310c:	e049      	b.n	80031a2 <UART_SetConfig+0x2a2>
 800310e:	2b04      	cmp	r3, #4
 8003110:	d024      	beq.n	800315c <UART_SetConfig+0x25c>
 8003112:	2b08      	cmp	r3, #8
 8003114:	d035      	beq.n	8003182 <UART_SetConfig+0x282>
 8003116:	e044      	b.n	80031a2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7ff fcf2 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 800311c:	0003      	movs	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	085a      	lsrs	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	18d2      	adds	r2, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	0019      	movs	r1, r3
 8003130:	0010      	movs	r0, r2
 8003132:	f7fc fff1 	bl	8000118 <__udivsi3>
 8003136:	0003      	movs	r3, r0
 8003138:	b29b      	uxth	r3, r3
 800313a:	61bb      	str	r3, [r7, #24]
        break;
 800313c:	e036      	b.n	80031ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	4a30      	ldr	r2, [pc, #192]	; (8003208 <UART_SetConfig+0x308>)
 8003146:	189a      	adds	r2, r3, r2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0019      	movs	r1, r3
 800314e:	0010      	movs	r0, r2
 8003150:	f7fc ffe2 	bl	8000118 <__udivsi3>
 8003154:	0003      	movs	r3, r0
 8003156:	b29b      	uxth	r3, r3
 8003158:	61bb      	str	r3, [r7, #24]
        break;
 800315a:	e027      	b.n	80031ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315c:	f7ff fc48 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003160:	0003      	movs	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	085a      	lsrs	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	18d2      	adds	r2, r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0019      	movs	r1, r3
 8003174:	0010      	movs	r0, r2
 8003176:	f7fc ffcf 	bl	8000118 <__udivsi3>
 800317a:	0003      	movs	r3, r0
 800317c:	b29b      	uxth	r3, r3
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e014      	b.n	80031ac <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0212      	lsls	r2, r2, #8
 800318c:	189a      	adds	r2, r3, r2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0019      	movs	r1, r3
 8003194:	0010      	movs	r0, r2
 8003196:	f7fc ffbf 	bl	8000118 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	b29b      	uxth	r3, r3
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e004      	b.n	80031ac <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80031a2:	2317      	movs	r3, #23
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
        break;
 80031aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d908      	bls.n	80031c4 <UART_SetConfig+0x2c4>
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <UART_SetConfig+0x304>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d804      	bhi.n	80031c4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e003      	b.n	80031cc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80031c4:	2317      	movs	r3, #23
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031d8:	2317      	movs	r3, #23
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	781b      	ldrb	r3, [r3, #0]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b008      	add	sp, #32
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	efff69f3 	.word	0xefff69f3
 80031ec:	ffffcfff 	.word	0xffffcfff
 80031f0:	fffff4ff 	.word	0xfffff4ff
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40004400 	.word	0x40004400
 8003200:	00f42400 	.word	0x00f42400
 8003204:	0000ffff 	.word	0x0000ffff
 8003208:	007a1200 	.word	0x007a1200

0800320c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d00b      	beq.n	8003236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <UART_AdvFeatureConfig+0x144>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d00b      	beq.n	8003258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a43      	ldr	r2, [pc, #268]	; (8003354 <UART_AdvFeatureConfig+0x148>)
 8003248:	4013      	ands	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2204      	movs	r2, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d00b      	beq.n	800327a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <UART_AdvFeatureConfig+0x14c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2208      	movs	r2, #8
 8003280:	4013      	ands	r3, r2
 8003282:	d00b      	beq.n	800329c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <UART_AdvFeatureConfig+0x150>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2210      	movs	r2, #16
 80032a2:	4013      	ands	r3, r2
 80032a4:	d00b      	beq.n	80032be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <UART_AdvFeatureConfig+0x154>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <UART_AdvFeatureConfig+0x158>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2240      	movs	r2, #64	; 0x40
 80032e6:	4013      	ands	r3, r2
 80032e8:	d01d      	beq.n	8003326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <UART_AdvFeatureConfig+0x15c>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	035b      	lsls	r3, r3, #13
 800330a:	429a      	cmp	r2, r3
 800330c:	d10b      	bne.n	8003326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <UART_AdvFeatureConfig+0x160>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	4013      	ands	r3, r2
 800332e:	d00b      	beq.n	8003348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <UART_AdvFeatureConfig+0x164>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}
 8003350:	fffdffff 	.word	0xfffdffff
 8003354:	fffeffff 	.word	0xfffeffff
 8003358:	fffbffff 	.word	0xfffbffff
 800335c:	ffff7fff 	.word	0xffff7fff
 8003360:	ffffefff 	.word	0xffffefff
 8003364:	ffffdfff 	.word	0xffffdfff
 8003368:	ffefffff 	.word	0xffefffff
 800336c:	ff9fffff 	.word	0xff9fffff
 8003370:	fff7ffff 	.word	0xfff7ffff

08003374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003382:	f7fd ff4d 	bl	8001220 <HAL_GetTick>
 8003386:	0003      	movs	r3, r0
 8003388:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2208      	movs	r2, #8
 8003392:	4013      	ands	r3, r2
 8003394:	2b08      	cmp	r3, #8
 8003396:	d10d      	bne.n	80033b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	0399      	lsls	r1, r3, #14
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <UART_CheckIdleState+0x88>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	0013      	movs	r3, r2
 80033a6:	2200      	movs	r2, #0
 80033a8:	f000 f82a 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d001      	beq.n	80033b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e01f      	b.n	80033f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d10d      	bne.n	80033de <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	03d9      	lsls	r1, r3, #15
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <UART_CheckIdleState+0x88>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	0013      	movs	r3, r2
 80033d0:	2200      	movs	r2, #0
 80033d2:	f000 f815 	bl	8003400 <UART_WaitOnFlagUntilTimeout>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d001      	beq.n	80033de <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00a      	b.n	80033f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2270      	movs	r2, #112	; 0x70
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b004      	add	sp, #16
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	01ffffff 	.word	0x01ffffff

08003400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003410:	e05d      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3301      	adds	r3, #1
 8003416:	d05a      	beq.n	80034ce <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7fd ff02 	bl	8001220 <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11b      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	492f      	ldr	r1, [pc, #188]	; (80034f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2270      	movs	r2, #112	; 0x70
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e043      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2204      	movs	r2, #4
 800346e:	4013      	ands	r3, r2
 8003470:	d02d      	beq.n	80034ce <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	401a      	ands	r2, r3
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	429a      	cmp	r2, r3
 8003484:	d123      	bne.n	80034ce <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4917      	ldr	r1, [pc, #92]	; (80034f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800349c:	400a      	ands	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	438a      	bics	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2270      	movs	r2, #112	; 0x70
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e00f      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	425a      	negs	r2, r3
 80034de:	4153      	adcs	r3, r2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	001a      	movs	r2, r3
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d092      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	fffffe5f 	.word	0xfffffe5f

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	2000000c 	.word	0x2000000c

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	2600      	movs	r6, #0
 800350c:	4d0c      	ldr	r5, [pc, #48]	; (8003540 <__libc_init_array+0x38>)
 800350e:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	2600      	movs	r6, #0
 800351a:	f000 fc29 	bl	8003d70 <_init>
 800351e:	4d0a      	ldr	r5, [pc, #40]	; (8003548 <__libc_init_array+0x40>)
 8003520:	4c0a      	ldr	r4, [pc, #40]	; (800354c <__libc_init_array+0x44>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	00b3      	lsls	r3, r6, #2
 800352e:	58eb      	ldr	r3, [r5, r3]
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	00b3      	lsls	r3, r6, #2
 8003538:	58eb      	ldr	r3, [r5, r3]
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003ec4 	.word	0x08003ec4
 8003544:	08003ec4 	.word	0x08003ec4
 8003548:	08003ec4 	.word	0x08003ec4
 800354c:	08003ec8 	.word	0x08003ec8

08003550 <memcpy>:
 8003550:	2300      	movs	r3, #0
 8003552:	b510      	push	{r4, lr}
 8003554:	429a      	cmp	r2, r3
 8003556:	d100      	bne.n	800355a <memcpy+0xa>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	5ccc      	ldrb	r4, [r1, r3]
 800355c:	54c4      	strb	r4, [r0, r3]
 800355e:	3301      	adds	r3, #1
 8003560:	e7f8      	b.n	8003554 <memcpy+0x4>

08003562 <memset>:
 8003562:	0003      	movs	r3, r0
 8003564:	1812      	adds	r2, r2, r0
 8003566:	4293      	cmp	r3, r2
 8003568:	d100      	bne.n	800356c <memset+0xa>
 800356a:	4770      	bx	lr
 800356c:	7019      	strb	r1, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	e7f9      	b.n	8003566 <memset+0x4>
	...

08003574 <_free_r>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	0005      	movs	r5, r0
 8003578:	2900      	cmp	r1, #0
 800357a:	d010      	beq.n	800359e <_free_r+0x2a>
 800357c:	1f0c      	subs	r4, r1, #4
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da00      	bge.n	8003586 <_free_r+0x12>
 8003584:	18e4      	adds	r4, r4, r3
 8003586:	0028      	movs	r0, r5
 8003588:	f000 f8ce 	bl	8003728 <__malloc_lock>
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <_free_r+0x90>)
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <_free_r+0x2c>
 8003594:	6063      	str	r3, [r4, #4]
 8003596:	6014      	str	r4, [r2, #0]
 8003598:	0028      	movs	r0, r5
 800359a:	f000 f8c6 	bl	800372a <__malloc_unlock>
 800359e:	bd70      	pop	{r4, r5, r6, pc}
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d909      	bls.n	80035b8 <_free_r+0x44>
 80035a4:	6821      	ldr	r1, [r4, #0]
 80035a6:	1860      	adds	r0, r4, r1
 80035a8:	4283      	cmp	r3, r0
 80035aa:	d1f3      	bne.n	8003594 <_free_r+0x20>
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	1841      	adds	r1, r0, r1
 80035b2:	6021      	str	r1, [r4, #0]
 80035b4:	e7ee      	b.n	8003594 <_free_r+0x20>
 80035b6:	0013      	movs	r3, r2
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	2a00      	cmp	r2, #0
 80035bc:	d001      	beq.n	80035c2 <_free_r+0x4e>
 80035be:	42a2      	cmp	r2, r4
 80035c0:	d9f9      	bls.n	80035b6 <_free_r+0x42>
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	1858      	adds	r0, r3, r1
 80035c6:	42a0      	cmp	r0, r4
 80035c8:	d10b      	bne.n	80035e2 <_free_r+0x6e>
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	1809      	adds	r1, r1, r0
 80035ce:	1858      	adds	r0, r3, r1
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	4282      	cmp	r2, r0
 80035d4:	d1e0      	bne.n	8003598 <_free_r+0x24>
 80035d6:	6810      	ldr	r0, [r2, #0]
 80035d8:	6852      	ldr	r2, [r2, #4]
 80035da:	1841      	adds	r1, r0, r1
 80035dc:	6019      	str	r1, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	e7da      	b.n	8003598 <_free_r+0x24>
 80035e2:	42a0      	cmp	r0, r4
 80035e4:	d902      	bls.n	80035ec <_free_r+0x78>
 80035e6:	230c      	movs	r3, #12
 80035e8:	602b      	str	r3, [r5, #0]
 80035ea:	e7d5      	b.n	8003598 <_free_r+0x24>
 80035ec:	6821      	ldr	r1, [r4, #0]
 80035ee:	1860      	adds	r0, r4, r1
 80035f0:	4282      	cmp	r2, r0
 80035f2:	d103      	bne.n	80035fc <_free_r+0x88>
 80035f4:	6810      	ldr	r0, [r2, #0]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	1841      	adds	r1, r0, r1
 80035fa:	6021      	str	r1, [r4, #0]
 80035fc:	6062      	str	r2, [r4, #4]
 80035fe:	605c      	str	r4, [r3, #4]
 8003600:	e7ca      	b.n	8003598 <_free_r+0x24>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	20000094 	.word	0x20000094

08003608 <_malloc_r>:
 8003608:	2303      	movs	r3, #3
 800360a:	b570      	push	{r4, r5, r6, lr}
 800360c:	1ccd      	adds	r5, r1, #3
 800360e:	439d      	bics	r5, r3
 8003610:	3508      	adds	r5, #8
 8003612:	0006      	movs	r6, r0
 8003614:	2d0c      	cmp	r5, #12
 8003616:	d21e      	bcs.n	8003656 <_malloc_r+0x4e>
 8003618:	250c      	movs	r5, #12
 800361a:	42a9      	cmp	r1, r5
 800361c:	d81d      	bhi.n	800365a <_malloc_r+0x52>
 800361e:	0030      	movs	r0, r6
 8003620:	f000 f882 	bl	8003728 <__malloc_lock>
 8003624:	4a25      	ldr	r2, [pc, #148]	; (80036bc <_malloc_r+0xb4>)
 8003626:	6814      	ldr	r4, [r2, #0]
 8003628:	0021      	movs	r1, r4
 800362a:	2900      	cmp	r1, #0
 800362c:	d119      	bne.n	8003662 <_malloc_r+0x5a>
 800362e:	4c24      	ldr	r4, [pc, #144]	; (80036c0 <_malloc_r+0xb8>)
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <_malloc_r+0x36>
 8003636:	0030      	movs	r0, r6
 8003638:	f000 f844 	bl	80036c4 <_sbrk_r>
 800363c:	6020      	str	r0, [r4, #0]
 800363e:	0029      	movs	r1, r5
 8003640:	0030      	movs	r0, r6
 8003642:	f000 f83f 	bl	80036c4 <_sbrk_r>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	d12b      	bne.n	80036a2 <_malloc_r+0x9a>
 800364a:	230c      	movs	r3, #12
 800364c:	0030      	movs	r0, r6
 800364e:	6033      	str	r3, [r6, #0]
 8003650:	f000 f86b 	bl	800372a <__malloc_unlock>
 8003654:	e003      	b.n	800365e <_malloc_r+0x56>
 8003656:	2d00      	cmp	r5, #0
 8003658:	dadf      	bge.n	800361a <_malloc_r+0x12>
 800365a:	230c      	movs	r3, #12
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	2000      	movs	r0, #0
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	680b      	ldr	r3, [r1, #0]
 8003664:	1b5b      	subs	r3, r3, r5
 8003666:	d419      	bmi.n	800369c <_malloc_r+0x94>
 8003668:	2b0b      	cmp	r3, #11
 800366a:	d903      	bls.n	8003674 <_malloc_r+0x6c>
 800366c:	600b      	str	r3, [r1, #0]
 800366e:	18cc      	adds	r4, r1, r3
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	e003      	b.n	800367c <_malloc_r+0x74>
 8003674:	684b      	ldr	r3, [r1, #4]
 8003676:	428c      	cmp	r4, r1
 8003678:	d10d      	bne.n	8003696 <_malloc_r+0x8e>
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	0030      	movs	r0, r6
 800367e:	f000 f854 	bl	800372a <__malloc_unlock>
 8003682:	0020      	movs	r0, r4
 8003684:	2207      	movs	r2, #7
 8003686:	300b      	adds	r0, #11
 8003688:	1d23      	adds	r3, r4, #4
 800368a:	4390      	bics	r0, r2
 800368c:	1ac3      	subs	r3, r0, r3
 800368e:	d0e7      	beq.n	8003660 <_malloc_r+0x58>
 8003690:	425a      	negs	r2, r3
 8003692:	50e2      	str	r2, [r4, r3]
 8003694:	e7e4      	b.n	8003660 <_malloc_r+0x58>
 8003696:	6063      	str	r3, [r4, #4]
 8003698:	000c      	movs	r4, r1
 800369a:	e7ef      	b.n	800367c <_malloc_r+0x74>
 800369c:	000c      	movs	r4, r1
 800369e:	6849      	ldr	r1, [r1, #4]
 80036a0:	e7c3      	b.n	800362a <_malloc_r+0x22>
 80036a2:	2303      	movs	r3, #3
 80036a4:	1cc4      	adds	r4, r0, #3
 80036a6:	439c      	bics	r4, r3
 80036a8:	42a0      	cmp	r0, r4
 80036aa:	d0e1      	beq.n	8003670 <_malloc_r+0x68>
 80036ac:	1a21      	subs	r1, r4, r0
 80036ae:	0030      	movs	r0, r6
 80036b0:	f000 f808 	bl	80036c4 <_sbrk_r>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d1db      	bne.n	8003670 <_malloc_r+0x68>
 80036b8:	e7c7      	b.n	800364a <_malloc_r+0x42>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000094 	.word	0x20000094
 80036c0:	20000098 	.word	0x20000098

080036c4 <_sbrk_r>:
 80036c4:	2300      	movs	r3, #0
 80036c6:	b570      	push	{r4, r5, r6, lr}
 80036c8:	4c06      	ldr	r4, [pc, #24]	; (80036e4 <_sbrk_r+0x20>)
 80036ca:	0005      	movs	r5, r0
 80036cc:	0008      	movs	r0, r1
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	f7fd fc50 	bl	8000f74 <_sbrk>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d103      	bne.n	80036e0 <_sbrk_r+0x1c>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d000      	beq.n	80036e0 <_sbrk_r+0x1c>
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	2000016c 	.word	0x2000016c

080036e8 <siprintf>:
 80036e8:	b40e      	push	{r1, r2, r3}
 80036ea:	b500      	push	{lr}
 80036ec:	490b      	ldr	r1, [pc, #44]	; (800371c <siprintf+0x34>)
 80036ee:	b09c      	sub	sp, #112	; 0x70
 80036f0:	ab1d      	add	r3, sp, #116	; 0x74
 80036f2:	9002      	str	r0, [sp, #8]
 80036f4:	9006      	str	r0, [sp, #24]
 80036f6:	9107      	str	r1, [sp, #28]
 80036f8:	9104      	str	r1, [sp, #16]
 80036fa:	4809      	ldr	r0, [pc, #36]	; (8003720 <siprintf+0x38>)
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <siprintf+0x3c>)
 80036fe:	cb04      	ldmia	r3!, {r2}
 8003700:	9105      	str	r1, [sp, #20]
 8003702:	6800      	ldr	r0, [r0, #0]
 8003704:	a902      	add	r1, sp, #8
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	f000 f872 	bl	80037f0 <_svfiprintf_r>
 800370c:	2300      	movs	r3, #0
 800370e:	9a02      	ldr	r2, [sp, #8]
 8003710:	7013      	strb	r3, [r2, #0]
 8003712:	b01c      	add	sp, #112	; 0x70
 8003714:	bc08      	pop	{r3}
 8003716:	b003      	add	sp, #12
 8003718:	4718      	bx	r3
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	7fffffff 	.word	0x7fffffff
 8003720:	2000000c 	.word	0x2000000c
 8003724:	ffff0208 	.word	0xffff0208

08003728 <__malloc_lock>:
 8003728:	4770      	bx	lr

0800372a <__malloc_unlock>:
 800372a:	4770      	bx	lr

0800372c <__ssputs_r>:
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	688e      	ldr	r6, [r1, #8]
 8003730:	b085      	sub	sp, #20
 8003732:	0007      	movs	r7, r0
 8003734:	000c      	movs	r4, r1
 8003736:	9203      	str	r2, [sp, #12]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	429e      	cmp	r6, r3
 800373c:	d83c      	bhi.n	80037b8 <__ssputs_r+0x8c>
 800373e:	2390      	movs	r3, #144	; 0x90
 8003740:	898a      	ldrh	r2, [r1, #12]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	421a      	tst	r2, r3
 8003746:	d034      	beq.n	80037b2 <__ssputs_r+0x86>
 8003748:	2503      	movs	r5, #3
 800374a:	6909      	ldr	r1, [r1, #16]
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	6963      	ldr	r3, [r4, #20]
 8003754:	9802      	ldr	r0, [sp, #8]
 8003756:	435d      	muls	r5, r3
 8003758:	0feb      	lsrs	r3, r5, #31
 800375a:	195d      	adds	r5, r3, r5
 800375c:	9b01      	ldr	r3, [sp, #4]
 800375e:	106d      	asrs	r5, r5, #1
 8003760:	3301      	adds	r3, #1
 8003762:	181b      	adds	r3, r3, r0
 8003764:	42ab      	cmp	r3, r5
 8003766:	d900      	bls.n	800376a <__ssputs_r+0x3e>
 8003768:	001d      	movs	r5, r3
 800376a:	0553      	lsls	r3, r2, #21
 800376c:	d532      	bpl.n	80037d4 <__ssputs_r+0xa8>
 800376e:	0029      	movs	r1, r5
 8003770:	0038      	movs	r0, r7
 8003772:	f7ff ff49 	bl	8003608 <_malloc_r>
 8003776:	1e06      	subs	r6, r0, #0
 8003778:	d109      	bne.n	800378e <__ssputs_r+0x62>
 800377a:	230c      	movs	r3, #12
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	2001      	movs	r0, #1
 8003782:	89a2      	ldrh	r2, [r4, #12]
 8003784:	4240      	negs	r0, r0
 8003786:	4313      	orrs	r3, r2
 8003788:	81a3      	strh	r3, [r4, #12]
 800378a:	b005      	add	sp, #20
 800378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378e:	9a02      	ldr	r2, [sp, #8]
 8003790:	6921      	ldr	r1, [r4, #16]
 8003792:	f7ff fedd 	bl	8003550 <memcpy>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <__ssputs_r+0xc0>)
 800379a:	401a      	ands	r2, r3
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	4313      	orrs	r3, r2
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	6126      	str	r6, [r4, #16]
 80037a6:	18f6      	adds	r6, r6, r3
 80037a8:	6026      	str	r6, [r4, #0]
 80037aa:	6165      	str	r5, [r4, #20]
 80037ac:	9e01      	ldr	r6, [sp, #4]
 80037ae:	1aed      	subs	r5, r5, r3
 80037b0:	60a5      	str	r5, [r4, #8]
 80037b2:	9b01      	ldr	r3, [sp, #4]
 80037b4:	429e      	cmp	r6, r3
 80037b6:	d900      	bls.n	80037ba <__ssputs_r+0x8e>
 80037b8:	9e01      	ldr	r6, [sp, #4]
 80037ba:	0032      	movs	r2, r6
 80037bc:	9903      	ldr	r1, [sp, #12]
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	f000 fa95 	bl	8003cee <memmove>
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	2000      	movs	r0, #0
 80037c8:	1b9b      	subs	r3, r3, r6
 80037ca:	60a3      	str	r3, [r4, #8]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	199e      	adds	r6, r3, r6
 80037d0:	6026      	str	r6, [r4, #0]
 80037d2:	e7da      	b.n	800378a <__ssputs_r+0x5e>
 80037d4:	002a      	movs	r2, r5
 80037d6:	0038      	movs	r0, r7
 80037d8:	f000 fa9c 	bl	8003d14 <_realloc_r>
 80037dc:	1e06      	subs	r6, r0, #0
 80037de:	d1e0      	bne.n	80037a2 <__ssputs_r+0x76>
 80037e0:	6921      	ldr	r1, [r4, #16]
 80037e2:	0038      	movs	r0, r7
 80037e4:	f7ff fec6 	bl	8003574 <_free_r>
 80037e8:	e7c7      	b.n	800377a <__ssputs_r+0x4e>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	fffffb7f 	.word	0xfffffb7f

080037f0 <_svfiprintf_r>:
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f2:	b0a1      	sub	sp, #132	; 0x84
 80037f4:	9003      	str	r0, [sp, #12]
 80037f6:	001d      	movs	r5, r3
 80037f8:	898b      	ldrh	r3, [r1, #12]
 80037fa:	000f      	movs	r7, r1
 80037fc:	0016      	movs	r6, r2
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	d511      	bpl.n	8003826 <_svfiprintf_r+0x36>
 8003802:	690b      	ldr	r3, [r1, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10e      	bne.n	8003826 <_svfiprintf_r+0x36>
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	f7ff fefd 	bl	8003608 <_malloc_r>
 800380e:	6038      	str	r0, [r7, #0]
 8003810:	6138      	str	r0, [r7, #16]
 8003812:	2800      	cmp	r0, #0
 8003814:	d105      	bne.n	8003822 <_svfiprintf_r+0x32>
 8003816:	230c      	movs	r3, #12
 8003818:	9a03      	ldr	r2, [sp, #12]
 800381a:	3801      	subs	r0, #1
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	b021      	add	sp, #132	; 0x84
 8003820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	2300      	movs	r3, #0
 8003828:	ac08      	add	r4, sp, #32
 800382a:	6163      	str	r3, [r4, #20]
 800382c:	3320      	adds	r3, #32
 800382e:	7663      	strb	r3, [r4, #25]
 8003830:	3310      	adds	r3, #16
 8003832:	76a3      	strb	r3, [r4, #26]
 8003834:	9507      	str	r5, [sp, #28]
 8003836:	0035      	movs	r5, r6
 8003838:	782b      	ldrb	r3, [r5, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <_svfiprintf_r+0x52>
 800383e:	2b25      	cmp	r3, #37	; 0x25
 8003840:	d146      	bne.n	80038d0 <_svfiprintf_r+0xe0>
 8003842:	1bab      	subs	r3, r5, r6
 8003844:	9305      	str	r3, [sp, #20]
 8003846:	d00c      	beq.n	8003862 <_svfiprintf_r+0x72>
 8003848:	0032      	movs	r2, r6
 800384a:	0039      	movs	r1, r7
 800384c:	9803      	ldr	r0, [sp, #12]
 800384e:	f7ff ff6d 	bl	800372c <__ssputs_r>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	d100      	bne.n	8003858 <_svfiprintf_r+0x68>
 8003856:	e0ae      	b.n	80039b6 <_svfiprintf_r+0x1c6>
 8003858:	6962      	ldr	r2, [r4, #20]
 800385a:	9b05      	ldr	r3, [sp, #20]
 800385c:	4694      	mov	ip, r2
 800385e:	4463      	add	r3, ip
 8003860:	6163      	str	r3, [r4, #20]
 8003862:	782b      	ldrb	r3, [r5, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d100      	bne.n	800386a <_svfiprintf_r+0x7a>
 8003868:	e0a5      	b.n	80039b6 <_svfiprintf_r+0x1c6>
 800386a:	2201      	movs	r2, #1
 800386c:	2300      	movs	r3, #0
 800386e:	4252      	negs	r2, r2
 8003870:	6062      	str	r2, [r4, #4]
 8003872:	a904      	add	r1, sp, #16
 8003874:	3254      	adds	r2, #84	; 0x54
 8003876:	1852      	adds	r2, r2, r1
 8003878:	1c6e      	adds	r6, r5, #1
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	60e3      	str	r3, [r4, #12]
 800387e:	60a3      	str	r3, [r4, #8]
 8003880:	7013      	strb	r3, [r2, #0]
 8003882:	65a3      	str	r3, [r4, #88]	; 0x58
 8003884:	7831      	ldrb	r1, [r6, #0]
 8003886:	2205      	movs	r2, #5
 8003888:	4853      	ldr	r0, [pc, #332]	; (80039d8 <_svfiprintf_r+0x1e8>)
 800388a:	f000 fa25 	bl	8003cd8 <memchr>
 800388e:	1c75      	adds	r5, r6, #1
 8003890:	2800      	cmp	r0, #0
 8003892:	d11f      	bne.n	80038d4 <_svfiprintf_r+0xe4>
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	06d3      	lsls	r3, r2, #27
 8003898:	d504      	bpl.n	80038a4 <_svfiprintf_r+0xb4>
 800389a:	2353      	movs	r3, #83	; 0x53
 800389c:	a904      	add	r1, sp, #16
 800389e:	185b      	adds	r3, r3, r1
 80038a0:	2120      	movs	r1, #32
 80038a2:	7019      	strb	r1, [r3, #0]
 80038a4:	0713      	lsls	r3, r2, #28
 80038a6:	d504      	bpl.n	80038b2 <_svfiprintf_r+0xc2>
 80038a8:	2353      	movs	r3, #83	; 0x53
 80038aa:	a904      	add	r1, sp, #16
 80038ac:	185b      	adds	r3, r3, r1
 80038ae:	212b      	movs	r1, #43	; 0x2b
 80038b0:	7019      	strb	r1, [r3, #0]
 80038b2:	7833      	ldrb	r3, [r6, #0]
 80038b4:	2b2a      	cmp	r3, #42	; 0x2a
 80038b6:	d016      	beq.n	80038e6 <_svfiprintf_r+0xf6>
 80038b8:	0035      	movs	r5, r6
 80038ba:	2100      	movs	r1, #0
 80038bc:	200a      	movs	r0, #10
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	782a      	ldrb	r2, [r5, #0]
 80038c2:	1c6e      	adds	r6, r5, #1
 80038c4:	3a30      	subs	r2, #48	; 0x30
 80038c6:	2a09      	cmp	r2, #9
 80038c8:	d94e      	bls.n	8003968 <_svfiprintf_r+0x178>
 80038ca:	2900      	cmp	r1, #0
 80038cc:	d018      	beq.n	8003900 <_svfiprintf_r+0x110>
 80038ce:	e010      	b.n	80038f2 <_svfiprintf_r+0x102>
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7b1      	b.n	8003838 <_svfiprintf_r+0x48>
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <_svfiprintf_r+0x1e8>)
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	1ac0      	subs	r0, r0, r3
 80038da:	2301      	movs	r3, #1
 80038dc:	4083      	lsls	r3, r0
 80038de:	4313      	orrs	r3, r2
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	002e      	movs	r6, r5
 80038e4:	e7ce      	b.n	8003884 <_svfiprintf_r+0x94>
 80038e6:	9b07      	ldr	r3, [sp, #28]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9107      	str	r1, [sp, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db01      	blt.n	80038f6 <_svfiprintf_r+0x106>
 80038f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f4:	e004      	b.n	8003900 <_svfiprintf_r+0x110>
 80038f6:	425b      	negs	r3, r3
 80038f8:	60e3      	str	r3, [r4, #12]
 80038fa:	2302      	movs	r3, #2
 80038fc:	4313      	orrs	r3, r2
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	782b      	ldrb	r3, [r5, #0]
 8003902:	2b2e      	cmp	r3, #46	; 0x2e
 8003904:	d10a      	bne.n	800391c <_svfiprintf_r+0x12c>
 8003906:	786b      	ldrb	r3, [r5, #1]
 8003908:	2b2a      	cmp	r3, #42	; 0x2a
 800390a:	d135      	bne.n	8003978 <_svfiprintf_r+0x188>
 800390c:	9b07      	ldr	r3, [sp, #28]
 800390e:	3502      	adds	r5, #2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9207      	str	r2, [sp, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db2b      	blt.n	8003972 <_svfiprintf_r+0x182>
 800391a:	9309      	str	r3, [sp, #36]	; 0x24
 800391c:	4e2f      	ldr	r6, [pc, #188]	; (80039dc <_svfiprintf_r+0x1ec>)
 800391e:	7829      	ldrb	r1, [r5, #0]
 8003920:	2203      	movs	r2, #3
 8003922:	0030      	movs	r0, r6
 8003924:	f000 f9d8 	bl	8003cd8 <memchr>
 8003928:	2800      	cmp	r0, #0
 800392a:	d006      	beq.n	800393a <_svfiprintf_r+0x14a>
 800392c:	2340      	movs	r3, #64	; 0x40
 800392e:	1b80      	subs	r0, r0, r6
 8003930:	4083      	lsls	r3, r0
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	3501      	adds	r5, #1
 8003936:	4313      	orrs	r3, r2
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	7829      	ldrb	r1, [r5, #0]
 800393c:	2206      	movs	r2, #6
 800393e:	4828      	ldr	r0, [pc, #160]	; (80039e0 <_svfiprintf_r+0x1f0>)
 8003940:	1c6e      	adds	r6, r5, #1
 8003942:	7621      	strb	r1, [r4, #24]
 8003944:	f000 f9c8 	bl	8003cd8 <memchr>
 8003948:	2800      	cmp	r0, #0
 800394a:	d03c      	beq.n	80039c6 <_svfiprintf_r+0x1d6>
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <_svfiprintf_r+0x1f4>)
 800394e:	2b00      	cmp	r3, #0
 8003950:	d125      	bne.n	800399e <_svfiprintf_r+0x1ae>
 8003952:	2207      	movs	r2, #7
 8003954:	9b07      	ldr	r3, [sp, #28]
 8003956:	3307      	adds	r3, #7
 8003958:	4393      	bics	r3, r2
 800395a:	3308      	adds	r3, #8
 800395c:	9307      	str	r3, [sp, #28]
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	9a04      	ldr	r2, [sp, #16]
 8003962:	189b      	adds	r3, r3, r2
 8003964:	6163      	str	r3, [r4, #20]
 8003966:	e766      	b.n	8003836 <_svfiprintf_r+0x46>
 8003968:	4343      	muls	r3, r0
 800396a:	2101      	movs	r1, #1
 800396c:	189b      	adds	r3, r3, r2
 800396e:	0035      	movs	r5, r6
 8003970:	e7a6      	b.n	80038c0 <_svfiprintf_r+0xd0>
 8003972:	2301      	movs	r3, #1
 8003974:	425b      	negs	r3, r3
 8003976:	e7d0      	b.n	800391a <_svfiprintf_r+0x12a>
 8003978:	2300      	movs	r3, #0
 800397a:	200a      	movs	r0, #10
 800397c:	001a      	movs	r2, r3
 800397e:	3501      	adds	r5, #1
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	7829      	ldrb	r1, [r5, #0]
 8003984:	1c6e      	adds	r6, r5, #1
 8003986:	3930      	subs	r1, #48	; 0x30
 8003988:	2909      	cmp	r1, #9
 800398a:	d903      	bls.n	8003994 <_svfiprintf_r+0x1a4>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0c5      	beq.n	800391c <_svfiprintf_r+0x12c>
 8003990:	9209      	str	r2, [sp, #36]	; 0x24
 8003992:	e7c3      	b.n	800391c <_svfiprintf_r+0x12c>
 8003994:	4342      	muls	r2, r0
 8003996:	2301      	movs	r3, #1
 8003998:	1852      	adds	r2, r2, r1
 800399a:	0035      	movs	r5, r6
 800399c:	e7f1      	b.n	8003982 <_svfiprintf_r+0x192>
 800399e:	ab07      	add	r3, sp, #28
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	003a      	movs	r2, r7
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <_svfiprintf_r+0x1f8>)
 80039a6:	0021      	movs	r1, r4
 80039a8:	9803      	ldr	r0, [sp, #12]
 80039aa:	e000      	b.n	80039ae <_svfiprintf_r+0x1be>
 80039ac:	bf00      	nop
 80039ae:	9004      	str	r0, [sp, #16]
 80039b0:	9b04      	ldr	r3, [sp, #16]
 80039b2:	3301      	adds	r3, #1
 80039b4:	d1d3      	bne.n	800395e <_svfiprintf_r+0x16e>
 80039b6:	89bb      	ldrh	r3, [r7, #12]
 80039b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039ba:	065b      	lsls	r3, r3, #25
 80039bc:	d400      	bmi.n	80039c0 <_svfiprintf_r+0x1d0>
 80039be:	e72e      	b.n	800381e <_svfiprintf_r+0x2e>
 80039c0:	2001      	movs	r0, #1
 80039c2:	4240      	negs	r0, r0
 80039c4:	e72b      	b.n	800381e <_svfiprintf_r+0x2e>
 80039c6:	ab07      	add	r3, sp, #28
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	003a      	movs	r2, r7
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <_svfiprintf_r+0x1f8>)
 80039ce:	0021      	movs	r1, r4
 80039d0:	9803      	ldr	r0, [sp, #12]
 80039d2:	f000 f879 	bl	8003ac8 <_printf_i>
 80039d6:	e7ea      	b.n	80039ae <_svfiprintf_r+0x1be>
 80039d8:	08003e90 	.word	0x08003e90
 80039dc:	08003e96 	.word	0x08003e96
 80039e0:	08003e9a 	.word	0x08003e9a
 80039e4:	00000000 	.word	0x00000000
 80039e8:	0800372d 	.word	0x0800372d

080039ec <_printf_common>:
 80039ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ee:	0015      	movs	r5, r2
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	688a      	ldr	r2, [r1, #8]
 80039f4:	690b      	ldr	r3, [r1, #16]
 80039f6:	9000      	str	r0, [sp, #0]
 80039f8:	000c      	movs	r4, r1
 80039fa:	4293      	cmp	r3, r2
 80039fc:	da00      	bge.n	8003a00 <_printf_common+0x14>
 80039fe:	0013      	movs	r3, r2
 8003a00:	0022      	movs	r2, r4
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	3243      	adds	r2, #67	; 0x43
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	d001      	beq.n	8003a10 <_printf_common+0x24>
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	069b      	lsls	r3, r3, #26
 8003a14:	d502      	bpl.n	8003a1c <_printf_common+0x30>
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	2706      	movs	r7, #6
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	401f      	ands	r7, r3
 8003a22:	d027      	beq.n	8003a74 <_printf_common+0x88>
 8003a24:	0023      	movs	r3, r4
 8003a26:	3343      	adds	r3, #67	; 0x43
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	4193      	sbcs	r3, r2
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	0692      	lsls	r2, r2, #26
 8003a32:	d430      	bmi.n	8003a96 <_printf_common+0xaa>
 8003a34:	0022      	movs	r2, r4
 8003a36:	9901      	ldr	r1, [sp, #4]
 8003a38:	3243      	adds	r2, #67	; 0x43
 8003a3a:	9800      	ldr	r0, [sp, #0]
 8003a3c:	9e08      	ldr	r6, [sp, #32]
 8003a3e:	47b0      	blx	r6
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d025      	beq.n	8003a90 <_printf_common+0xa4>
 8003a44:	2306      	movs	r3, #6
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	682a      	ldr	r2, [r5, #0]
 8003a4a:	68e1      	ldr	r1, [r4, #12]
 8003a4c:	4003      	ands	r3, r0
 8003a4e:	2500      	movs	r5, #0
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d103      	bne.n	8003a5c <_printf_common+0x70>
 8003a54:	1a8d      	subs	r5, r1, r2
 8003a56:	43eb      	mvns	r3, r5
 8003a58:	17db      	asrs	r3, r3, #31
 8003a5a:	401d      	ands	r5, r3
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	6922      	ldr	r2, [r4, #16]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	dd01      	ble.n	8003a68 <_printf_common+0x7c>
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	18ed      	adds	r5, r5, r3
 8003a68:	2700      	movs	r7, #0
 8003a6a:	42bd      	cmp	r5, r7
 8003a6c:	d120      	bne.n	8003ab0 <_printf_common+0xc4>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e010      	b.n	8003a94 <_printf_common+0xa8>
 8003a72:	3701      	adds	r7, #1
 8003a74:	68e3      	ldr	r3, [r4, #12]
 8003a76:	682a      	ldr	r2, [r5, #0]
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	42bb      	cmp	r3, r7
 8003a7c:	ddd2      	ble.n	8003a24 <_printf_common+0x38>
 8003a7e:	0022      	movs	r2, r4
 8003a80:	2301      	movs	r3, #1
 8003a82:	3219      	adds	r2, #25
 8003a84:	9901      	ldr	r1, [sp, #4]
 8003a86:	9800      	ldr	r0, [sp, #0]
 8003a88:	9e08      	ldr	r6, [sp, #32]
 8003a8a:	47b0      	blx	r6
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d1f0      	bne.n	8003a72 <_printf_common+0x86>
 8003a90:	2001      	movs	r0, #1
 8003a92:	4240      	negs	r0, r0
 8003a94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a96:	2030      	movs	r0, #48	; 0x30
 8003a98:	18e1      	adds	r1, r4, r3
 8003a9a:	3143      	adds	r1, #67	; 0x43
 8003a9c:	7008      	strb	r0, [r1, #0]
 8003a9e:	0021      	movs	r1, r4
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	3145      	adds	r1, #69	; 0x45
 8003aa4:	7809      	ldrb	r1, [r1, #0]
 8003aa6:	18a2      	adds	r2, r4, r2
 8003aa8:	3243      	adds	r2, #67	; 0x43
 8003aaa:	3302      	adds	r3, #2
 8003aac:	7011      	strb	r1, [r2, #0]
 8003aae:	e7c1      	b.n	8003a34 <_printf_common+0x48>
 8003ab0:	0022      	movs	r2, r4
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	321a      	adds	r2, #26
 8003ab6:	9901      	ldr	r1, [sp, #4]
 8003ab8:	9800      	ldr	r0, [sp, #0]
 8003aba:	9e08      	ldr	r6, [sp, #32]
 8003abc:	47b0      	blx	r6
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d0e6      	beq.n	8003a90 <_printf_common+0xa4>
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	e7d1      	b.n	8003a6a <_printf_common+0x7e>
	...

08003ac8 <_printf_i>:
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	9204      	str	r2, [sp, #16]
 8003ace:	000a      	movs	r2, r1
 8003ad0:	3243      	adds	r2, #67	; 0x43
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	9003      	str	r0, [sp, #12]
 8003ad6:	9202      	str	r2, [sp, #8]
 8003ad8:	7e0a      	ldrb	r2, [r1, #24]
 8003ada:	000c      	movs	r4, r1
 8003adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ade:	2a6e      	cmp	r2, #110	; 0x6e
 8003ae0:	d100      	bne.n	8003ae4 <_printf_i+0x1c>
 8003ae2:	e086      	b.n	8003bf2 <_printf_i+0x12a>
 8003ae4:	d81f      	bhi.n	8003b26 <_printf_i+0x5e>
 8003ae6:	2a63      	cmp	r2, #99	; 0x63
 8003ae8:	d033      	beq.n	8003b52 <_printf_i+0x8a>
 8003aea:	d808      	bhi.n	8003afe <_printf_i+0x36>
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d100      	bne.n	8003af2 <_printf_i+0x2a>
 8003af0:	e08c      	b.n	8003c0c <_printf_i+0x144>
 8003af2:	2a58      	cmp	r2, #88	; 0x58
 8003af4:	d04d      	beq.n	8003b92 <_printf_i+0xca>
 8003af6:	0025      	movs	r5, r4
 8003af8:	3542      	adds	r5, #66	; 0x42
 8003afa:	702a      	strb	r2, [r5, #0]
 8003afc:	e030      	b.n	8003b60 <_printf_i+0x98>
 8003afe:	2a64      	cmp	r2, #100	; 0x64
 8003b00:	d001      	beq.n	8003b06 <_printf_i+0x3e>
 8003b02:	2a69      	cmp	r2, #105	; 0x69
 8003b04:	d1f7      	bne.n	8003af6 <_printf_i+0x2e>
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	6825      	ldr	r5, [r4, #0]
 8003b0a:	1d0a      	adds	r2, r1, #4
 8003b0c:	0628      	lsls	r0, r5, #24
 8003b0e:	d529      	bpl.n	8003b64 <_printf_i+0x9c>
 8003b10:	6808      	ldr	r0, [r1, #0]
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	2800      	cmp	r0, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0x58>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	9a02      	ldr	r2, [sp, #8]
 8003b1c:	4240      	negs	r0, r0
 8003b1e:	7013      	strb	r3, [r2, #0]
 8003b20:	4e6b      	ldr	r6, [pc, #428]	; (8003cd0 <_printf_i+0x208>)
 8003b22:	270a      	movs	r7, #10
 8003b24:	e04f      	b.n	8003bc6 <_printf_i+0xfe>
 8003b26:	2a73      	cmp	r2, #115	; 0x73
 8003b28:	d074      	beq.n	8003c14 <_printf_i+0x14c>
 8003b2a:	d808      	bhi.n	8003b3e <_printf_i+0x76>
 8003b2c:	2a6f      	cmp	r2, #111	; 0x6f
 8003b2e:	d01f      	beq.n	8003b70 <_printf_i+0xa8>
 8003b30:	2a70      	cmp	r2, #112	; 0x70
 8003b32:	d1e0      	bne.n	8003af6 <_printf_i+0x2e>
 8003b34:	2220      	movs	r2, #32
 8003b36:	6809      	ldr	r1, [r1, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	e003      	b.n	8003b46 <_printf_i+0x7e>
 8003b3e:	2a75      	cmp	r2, #117	; 0x75
 8003b40:	d016      	beq.n	8003b70 <_printf_i+0xa8>
 8003b42:	2a78      	cmp	r2, #120	; 0x78
 8003b44:	d1d7      	bne.n	8003af6 <_printf_i+0x2e>
 8003b46:	0022      	movs	r2, r4
 8003b48:	2178      	movs	r1, #120	; 0x78
 8003b4a:	3245      	adds	r2, #69	; 0x45
 8003b4c:	7011      	strb	r1, [r2, #0]
 8003b4e:	4e61      	ldr	r6, [pc, #388]	; (8003cd4 <_printf_i+0x20c>)
 8003b50:	e022      	b.n	8003b98 <_printf_i+0xd0>
 8003b52:	0025      	movs	r5, r4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	3542      	adds	r5, #66	; 0x42
 8003b58:	1d11      	adds	r1, r2, #4
 8003b5a:	6019      	str	r1, [r3, #0]
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	702b      	strb	r3, [r5, #0]
 8003b60:	2301      	movs	r3, #1
 8003b62:	e065      	b.n	8003c30 <_printf_i+0x168>
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	0669      	lsls	r1, r5, #25
 8003b6a:	d5d3      	bpl.n	8003b14 <_printf_i+0x4c>
 8003b6c:	b200      	sxth	r0, r0
 8003b6e:	e7d1      	b.n	8003b14 <_printf_i+0x4c>
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	6825      	ldr	r5, [r4, #0]
 8003b74:	1d08      	adds	r0, r1, #4
 8003b76:	6018      	str	r0, [r3, #0]
 8003b78:	6808      	ldr	r0, [r1, #0]
 8003b7a:	062e      	lsls	r6, r5, #24
 8003b7c:	d505      	bpl.n	8003b8a <_printf_i+0xc2>
 8003b7e:	4e54      	ldr	r6, [pc, #336]	; (8003cd0 <_printf_i+0x208>)
 8003b80:	2708      	movs	r7, #8
 8003b82:	2a6f      	cmp	r2, #111	; 0x6f
 8003b84:	d01b      	beq.n	8003bbe <_printf_i+0xf6>
 8003b86:	270a      	movs	r7, #10
 8003b88:	e019      	b.n	8003bbe <_printf_i+0xf6>
 8003b8a:	066d      	lsls	r5, r5, #25
 8003b8c:	d5f7      	bpl.n	8003b7e <_printf_i+0xb6>
 8003b8e:	b280      	uxth	r0, r0
 8003b90:	e7f5      	b.n	8003b7e <_printf_i+0xb6>
 8003b92:	3145      	adds	r1, #69	; 0x45
 8003b94:	4e4e      	ldr	r6, [pc, #312]	; (8003cd0 <_printf_i+0x208>)
 8003b96:	700a      	strb	r2, [r1, #0]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	1d01      	adds	r1, r0, #4
 8003b9e:	6800      	ldr	r0, [r0, #0]
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	0615      	lsls	r5, r2, #24
 8003ba4:	d521      	bpl.n	8003bea <_printf_i+0x122>
 8003ba6:	07d3      	lsls	r3, r2, #31
 8003ba8:	d502      	bpl.n	8003bb0 <_printf_i+0xe8>
 8003baa:	2320      	movs	r3, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	2710      	movs	r7, #16
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d103      	bne.n	8003bbe <_printf_i+0xf6>
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	439a      	bics	r2, r3
 8003bbc:	6022      	str	r2, [r4, #0]
 8003bbe:	0023      	movs	r3, r4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	3343      	adds	r3, #67	; 0x43
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	6863      	ldr	r3, [r4, #4]
 8003bc8:	60a3      	str	r3, [r4, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db58      	blt.n	8003c80 <_printf_i+0x1b8>
 8003bce:	2204      	movs	r2, #4
 8003bd0:	6821      	ldr	r1, [r4, #0]
 8003bd2:	4391      	bics	r1, r2
 8003bd4:	6021      	str	r1, [r4, #0]
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d154      	bne.n	8003c84 <_printf_i+0x1bc>
 8003bda:	9d02      	ldr	r5, [sp, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05a      	beq.n	8003c96 <_printf_i+0x1ce>
 8003be0:	0025      	movs	r5, r4
 8003be2:	7833      	ldrb	r3, [r6, #0]
 8003be4:	3542      	adds	r5, #66	; 0x42
 8003be6:	702b      	strb	r3, [r5, #0]
 8003be8:	e055      	b.n	8003c96 <_printf_i+0x1ce>
 8003bea:	0655      	lsls	r5, r2, #25
 8003bec:	d5db      	bpl.n	8003ba6 <_printf_i+0xde>
 8003bee:	b280      	uxth	r0, r0
 8003bf0:	e7d9      	b.n	8003ba6 <_printf_i+0xde>
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	680d      	ldr	r5, [r1, #0]
 8003bf6:	1d10      	adds	r0, r2, #4
 8003bf8:	6949      	ldr	r1, [r1, #20]
 8003bfa:	6018      	str	r0, [r3, #0]
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	062e      	lsls	r6, r5, #24
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0x13e>
 8003c02:	6019      	str	r1, [r3, #0]
 8003c04:	e002      	b.n	8003c0c <_printf_i+0x144>
 8003c06:	066d      	lsls	r5, r5, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0x13a>
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9d02      	ldr	r5, [sp, #8]
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	e04f      	b.n	8003cb4 <_printf_i+0x1ec>
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	1d11      	adds	r1, r2, #4
 8003c18:	6019      	str	r1, [r3, #0]
 8003c1a:	6815      	ldr	r5, [r2, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6862      	ldr	r2, [r4, #4]
 8003c20:	0028      	movs	r0, r5
 8003c22:	f000 f859 	bl	8003cd8 <memchr>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d001      	beq.n	8003c2e <_printf_i+0x166>
 8003c2a:	1b40      	subs	r0, r0, r5
 8003c2c:	6060      	str	r0, [r4, #4]
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9a02      	ldr	r2, [sp, #8]
 8003c36:	7013      	strb	r3, [r2, #0]
 8003c38:	e03c      	b.n	8003cb4 <_printf_i+0x1ec>
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	002a      	movs	r2, r5
 8003c3e:	9904      	ldr	r1, [sp, #16]
 8003c40:	9803      	ldr	r0, [sp, #12]
 8003c42:	9d05      	ldr	r5, [sp, #20]
 8003c44:	47a8      	blx	r5
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d03e      	beq.n	8003cc8 <_printf_i+0x200>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	079b      	lsls	r3, r3, #30
 8003c4e:	d415      	bmi.n	8003c7c <_printf_i+0x1b4>
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	68e0      	ldr	r0, [r4, #12]
 8003c54:	4298      	cmp	r0, r3
 8003c56:	da39      	bge.n	8003ccc <_printf_i+0x204>
 8003c58:	0018      	movs	r0, r3
 8003c5a:	e037      	b.n	8003ccc <_printf_i+0x204>
 8003c5c:	0022      	movs	r2, r4
 8003c5e:	2301      	movs	r3, #1
 8003c60:	3219      	adds	r2, #25
 8003c62:	9904      	ldr	r1, [sp, #16]
 8003c64:	9803      	ldr	r0, [sp, #12]
 8003c66:	9e05      	ldr	r6, [sp, #20]
 8003c68:	47b0      	blx	r6
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d02c      	beq.n	8003cc8 <_printf_i+0x200>
 8003c6e:	3501      	adds	r5, #1
 8003c70:	68e3      	ldr	r3, [r4, #12]
 8003c72:	9a07      	ldr	r2, [sp, #28]
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	42ab      	cmp	r3, r5
 8003c78:	dcf0      	bgt.n	8003c5c <_printf_i+0x194>
 8003c7a:	e7e9      	b.n	8003c50 <_printf_i+0x188>
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	e7f7      	b.n	8003c70 <_printf_i+0x1a8>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d0ad      	beq.n	8003be0 <_printf_i+0x118>
 8003c84:	9d02      	ldr	r5, [sp, #8]
 8003c86:	0039      	movs	r1, r7
 8003c88:	f7fc facc 	bl	8000224 <__aeabi_uidivmod>
 8003c8c:	5c73      	ldrb	r3, [r6, r1]
 8003c8e:	3d01      	subs	r5, #1
 8003c90:	702b      	strb	r3, [r5, #0]
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d1f7      	bne.n	8003c86 <_printf_i+0x1be>
 8003c96:	2f08      	cmp	r7, #8
 8003c98:	d109      	bne.n	8003cae <_printf_i+0x1e6>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	07db      	lsls	r3, r3, #31
 8003c9e:	d506      	bpl.n	8003cae <_printf_i+0x1e6>
 8003ca0:	6863      	ldr	r3, [r4, #4]
 8003ca2:	6922      	ldr	r2, [r4, #16]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	dc02      	bgt.n	8003cae <_printf_i+0x1e6>
 8003ca8:	2330      	movs	r3, #48	; 0x30
 8003caa:	3d01      	subs	r5, #1
 8003cac:	702b      	strb	r3, [r5, #0]
 8003cae:	9b02      	ldr	r3, [sp, #8]
 8003cb0:	1b5b      	subs	r3, r3, r5
 8003cb2:	6123      	str	r3, [r4, #16]
 8003cb4:	9b05      	ldr	r3, [sp, #20]
 8003cb6:	aa07      	add	r2, sp, #28
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	0021      	movs	r1, r4
 8003cbc:	9b04      	ldr	r3, [sp, #16]
 8003cbe:	9803      	ldr	r0, [sp, #12]
 8003cc0:	f7ff fe94 	bl	80039ec <_printf_common>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d1b8      	bne.n	8003c3a <_printf_i+0x172>
 8003cc8:	2001      	movs	r0, #1
 8003cca:	4240      	negs	r0, r0
 8003ccc:	b009      	add	sp, #36	; 0x24
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd0:	08003ea1 	.word	0x08003ea1
 8003cd4:	08003eb2 	.word	0x08003eb2

08003cd8 <memchr>:
 8003cd8:	b2c9      	uxtb	r1, r1
 8003cda:	1882      	adds	r2, r0, r2
 8003cdc:	4290      	cmp	r0, r2
 8003cde:	d101      	bne.n	8003ce4 <memchr+0xc>
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	4770      	bx	lr
 8003ce4:	7803      	ldrb	r3, [r0, #0]
 8003ce6:	428b      	cmp	r3, r1
 8003ce8:	d0fb      	beq.n	8003ce2 <memchr+0xa>
 8003cea:	3001      	adds	r0, #1
 8003cec:	e7f6      	b.n	8003cdc <memchr+0x4>

08003cee <memmove>:
 8003cee:	b510      	push	{r4, lr}
 8003cf0:	4288      	cmp	r0, r1
 8003cf2:	d902      	bls.n	8003cfa <memmove+0xc>
 8003cf4:	188b      	adds	r3, r1, r2
 8003cf6:	4298      	cmp	r0, r3
 8003cf8:	d303      	bcc.n	8003d02 <memmove+0x14>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e007      	b.n	8003d0e <memmove+0x20>
 8003cfe:	5c8b      	ldrb	r3, [r1, r2]
 8003d00:	5483      	strb	r3, [r0, r2]
 8003d02:	3a01      	subs	r2, #1
 8003d04:	d2fb      	bcs.n	8003cfe <memmove+0x10>
 8003d06:	bd10      	pop	{r4, pc}
 8003d08:	5ccc      	ldrb	r4, [r1, r3]
 8003d0a:	54c4      	strb	r4, [r0, r3]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d1fa      	bne.n	8003d08 <memmove+0x1a>
 8003d12:	e7f8      	b.n	8003d06 <memmove+0x18>

08003d14 <_realloc_r>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	0007      	movs	r7, r0
 8003d18:	000d      	movs	r5, r1
 8003d1a:	0016      	movs	r6, r2
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d105      	bne.n	8003d2c <_realloc_r+0x18>
 8003d20:	0011      	movs	r1, r2
 8003d22:	f7ff fc71 	bl	8003608 <_malloc_r>
 8003d26:	0004      	movs	r4, r0
 8003d28:	0020      	movs	r0, r4
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d103      	bne.n	8003d38 <_realloc_r+0x24>
 8003d30:	f7ff fc20 	bl	8003574 <_free_r>
 8003d34:	0034      	movs	r4, r6
 8003d36:	e7f7      	b.n	8003d28 <_realloc_r+0x14>
 8003d38:	f000 f812 	bl	8003d60 <_malloc_usable_size_r>
 8003d3c:	002c      	movs	r4, r5
 8003d3e:	42b0      	cmp	r0, r6
 8003d40:	d2f2      	bcs.n	8003d28 <_realloc_r+0x14>
 8003d42:	0031      	movs	r1, r6
 8003d44:	0038      	movs	r0, r7
 8003d46:	f7ff fc5f 	bl	8003608 <_malloc_r>
 8003d4a:	1e04      	subs	r4, r0, #0
 8003d4c:	d0ec      	beq.n	8003d28 <_realloc_r+0x14>
 8003d4e:	0029      	movs	r1, r5
 8003d50:	0032      	movs	r2, r6
 8003d52:	f7ff fbfd 	bl	8003550 <memcpy>
 8003d56:	0029      	movs	r1, r5
 8003d58:	0038      	movs	r0, r7
 8003d5a:	f7ff fc0b 	bl	8003574 <_free_r>
 8003d5e:	e7e3      	b.n	8003d28 <_realloc_r+0x14>

08003d60 <_malloc_usable_size_r>:
 8003d60:	1f0b      	subs	r3, r1, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1f18      	subs	r0, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da01      	bge.n	8003d6e <_malloc_usable_size_r+0xe>
 8003d6a:	580b      	ldr	r3, [r1, r0]
 8003d6c:	18c0      	adds	r0, r0, r3
 8003d6e:	4770      	bx	lr

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
