
QUTMS_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08003ba4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003ba4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acb0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d2d  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000157aa  00000000  00000000  0002dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b32  00000000  00000000  0004341a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000726d1  00000000  00000000  0004cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf61d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002344  00000000  00000000  000bf698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a2c 	.word	0x08003a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003a2c 	.word	0x08003a2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <bq769x0_reg_write_byte>:
#define TIMEOUT_MINUTE 60000




HAL_StatusTypeDef bq769x0_reg_write_byte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	0008      	movs	r0, r1
 800040e:	0011      	movs	r1, r2
 8000410:	1cfb      	adds	r3, r7, #3
 8000412:	1c02      	adds	r2, r0, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	1c0a      	adds	r2, r1, #0
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800041c:	210f      	movs	r1, #15
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	701a      	strb	r2, [r3, #0]

	// TODO: do we need crc? datasheet says board doesn't support it?
	//uint8_t crc = 0x00;

	uint8_t data[2] = {reg, value};
 8000424:	200c      	movs	r0, #12
 8000426:	183b      	adds	r3, r7, r0
 8000428:	1cfa      	adds	r2, r7, #3
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	183b      	adds	r3, r7, r0
 8000430:	1cba      	adds	r2, r7, #2
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	705a      	strb	r2, [r3, #1]

	return HAL_I2C_Master_Transmit(hi2c, address, data, sizeof(data), TIMEOUT_MINUTE);
 8000436:	187b      	adds	r3, r7, r1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b299      	uxth	r1, r3
 800043c:	183a      	adds	r2, r7, r0
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <bq769x0_reg_write_byte+0x50>)
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2302      	movs	r3, #2
 8000446:	f001 f845 	bl	80014d4 <HAL_I2C_Master_Transmit>
 800044a:	0003      	movs	r3, r0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b004      	add	sp, #16
 8000452:	bd80      	pop	{r7, pc}
 8000454:	0000ea60 	.word	0x0000ea60

08000458 <bq769x0_reg_read_byte>:

	return result;
}


HAL_StatusTypeDef bq769x0_reg_read_byte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *value) {
 8000458:	b5b0      	push	{r4, r5, r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af02      	add	r7, sp, #8
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	200b      	movs	r0, #11
 8000464:	183b      	adds	r3, r7, r0
 8000466:	1c0a      	adds	r2, r1, #0
 8000468:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 800046a:	2117      	movs	r1, #23
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2230      	movs	r2, #48	; 0x30
 8000470:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1, TIMEOUT_MINUTE);
 8000472:	187b      	adds	r3, r7, r1
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b299      	uxth	r1, r3
 8000478:	2516      	movs	r5, #22
 800047a:	197c      	adds	r4, r7, r5
 800047c:	183a      	adds	r2, r7, r0
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	f001 f825 	bl	80014d4 <HAL_I2C_Master_Transmit>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	if (result != HAL_OK) {
 800048e:	197b      	adds	r3, r7, r5
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d003      	beq.n	800049e <bq769x0_reg_read_byte+0x46>
		// unable to send read request correctly
		return result;
 8000496:	2316      	movs	r3, #22
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	e00b      	b.n	80004b6 <bq769x0_reg_read_byte+0x5e>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, value, 1, TIMEOUT_MINUTE);
 800049e:	2317      	movs	r3, #23
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b299      	uxth	r1, r3
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <bq769x0_reg_read_byte+0x68>)
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	f001 f918 	bl	80016e4 <HAL_I2C_Master_Receive>
 80004b4:	0003      	movs	r3, r0
	}
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bdb0      	pop	{r4, r5, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	0000ea60 	.word	0x0000ea60

080004c4 <bq769x0_reg_read_bytes>:

HAL_StatusTypeDef bq769x0_reg_read_bytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *buffer, size_t length) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	200b      	movs	r0, #11
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	1c0a      	adds	r2, r1, #0
 80004d6:	701a      	strb	r2, [r3, #0]
	uint8_t address = BQ_I2C_ADDRESS << 1 | 0;
 80004d8:	2117      	movs	r1, #23
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2230      	movs	r2, #48	; 0x30
 80004de:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(hi2c, address, &reg, 1, TIMEOUT_MINUTE);
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b299      	uxth	r1, r3
 80004e6:	2516      	movs	r5, #22
 80004e8:	197c      	adds	r4, r7, r5
 80004ea:	183a      	adds	r2, r7, r0
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	f000 ffee 	bl	80014d4 <HAL_I2C_Master_Transmit>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]

	if (result != HAL_OK) {
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d003      	beq.n	800050c <bq769x0_reg_read_bytes+0x48>
		// unable to send read request correctly
		return result;
 8000504:	2316      	movs	r3, #22
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	e00d      	b.n	8000528 <bq769x0_reg_read_bytes+0x64>
	} else {
		return HAL_I2C_Master_Receive(hi2c, address, buffer, length, TIMEOUT_MINUTE);
 800050c:	2317      	movs	r3, #23
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b299      	uxth	r1, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b29c      	uxth	r4, r3
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <bq769x0_reg_read_bytes+0x6c>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0023      	movs	r3, r4
 8000522:	f001 f8df 	bl	80016e4 <HAL_I2C_Master_Receive>
 8000526:	0003      	movs	r3, r0
	}
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b006      	add	sp, #24
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	0000ea60 	.word	0x0000ea60

08000534 <bq769x0_read_voltage>:

HAL_StatusTypeDef bq769x0_read_voltage(I2C_HandleTypeDef *hi2c, int cell, uint16_t *voltage, uint8_t gain, uint8_t offset) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	001a      	movs	r2, r3
 8000542:	1cfb      	adds	r3, r7, #3
 8000544:	701a      	strb	r2, [r3, #0]
	uint8_t reg = BQ769X0_REG_VC1_HI + cell * 2;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	3306      	adds	r3, #6
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2117      	movs	r1, #23
 800054e:	187a      	adds	r2, r7, r1
 8000550:	18db      	adds	r3, r3, r3
 8000552:	7013      	strb	r3, [r2, #0]
	uint8_t buffer[2];

	// FIXME
	HAL_StatusTypeDef ret = bq769x0_reg_read_bytes(hi2c, reg, buffer, 2);
 8000554:	2516      	movs	r5, #22
 8000556:	197c      	adds	r4, r7, r5
 8000558:	2310      	movs	r3, #16
 800055a:	18fa      	adds	r2, r7, r3
 800055c:	187b      	adds	r3, r7, r1
 800055e:	7819      	ldrb	r1, [r3, #0]
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	2302      	movs	r3, #2
 8000564:	f7ff ffae 	bl	80004c4 <bq769x0_reg_read_bytes>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK) {
 800056c:	197b      	adds	r3, r7, r5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <bq769x0_read_voltage+0x48>
		//SYS_LOG_ERR("failed to read cell %d voltage", cell);
		return ret;
 8000574:	2316      	movs	r3, #22
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	e027      	b.n	80005cc <bq769x0_read_voltage+0x98>
	}

	uint16_t adc_value = ((buffer[0] & 0b00111111) << 8) | buffer[1];
 800057c:	2110      	movs	r1, #16
 800057e:	187b      	adds	r3, r7, r1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	b21a      	sxth	r2, r3
 8000586:	23fc      	movs	r3, #252	; 0xfc
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	4013      	ands	r3, r2
 800058c:	b21a      	sxth	r2, r3
 800058e:	187b      	adds	r3, r7, r1
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b21a      	sxth	r2, r3
 8000598:	2114      	movs	r1, #20
 800059a:	187b      	adds	r3, r7, r1
 800059c:	801a      	strh	r2, [r3, #0]
	*voltage = adc_value * (365+gain) / 1000 + offset;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	1cfa      	adds	r2, r7, #3
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	326e      	adds	r2, #110	; 0x6e
 80005a8:	32ff      	adds	r2, #255	; 0xff
 80005aa:	435a      	muls	r2, r3
 80005ac:	23fa      	movs	r3, #250	; 0xfa
 80005ae:	0099      	lsls	r1, r3, #2
 80005b0:	0010      	movs	r0, r2
 80005b2:	f7ff fe3b 	bl	800022c <__divsi3>
 80005b6:	0003      	movs	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	2328      	movs	r3, #40	; 0x28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	18d3      	adds	r3, r2, r3
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	801a      	strh	r2, [r3, #0]

	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b006      	add	sp, #24
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}

080005d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	240c      	movs	r4, #12
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	0018      	movs	r0, r3
 80005e0:	2314      	movs	r3, #20
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f002 fe1a 	bl	800321e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	02c9      	lsls	r1, r1, #11
 80005f4:	430a      	orrs	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	02db      	lsls	r3, r3, #11
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x8c>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0289      	lsls	r1, r1, #10
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	029b      	lsls	r3, r3, #10
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	01db      	lsls	r3, r3, #7
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <MX_GPIO_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	0019      	movs	r1, r3
 800062c:	f000 fe9e 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	01d2      	lsls	r2, r2, #7
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2201      	movs	r2, #1
 800063c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	193b      	adds	r3, r7, r4
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <MX_GPIO_Init+0x90>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fd23 	bl	800109c <HAL_GPIO_Init>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b009      	add	sp, #36	; 0x24
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400

08000668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_I2C1_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_I2C1_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_I2C1_Init+0x74>)
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <MX_I2C1_Init+0x7c>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_I2C1_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x74>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fe7f 	bl	80013a8 <HAL_I2C_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 fa7b 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x74>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fb00 	bl	8001cbc <HAL_I2CEx_ConfigAnalogFilter>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 fa72 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_I2C1_Init+0x74>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fb43 	bl	8001d54 <HAL_I2CEx_ConfigDigitalFilter>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fa69 	bl	8000ba8 <Error_Handler>
  }

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000098 	.word	0x20000098
 80006e0:	40005400 	.word	0x40005400
 80006e4:	2000090e 	.word	0x2000090e

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	2314      	movs	r3, #20
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fd8f 	bl	800321e <memset>
  if(i2cHandle->Instance==I2C1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <HAL_I2C_MspInit+0x90>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d131      	bne.n	800076e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_I2C_MspInit+0x94>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_I2C_MspInit+0x94>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	02c9      	lsls	r1, r1, #11
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_I2C_MspInit+0x94>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	02db      	lsls	r3, r3, #11
 8000720:	4013      	ands	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000726:	2114      	movs	r1, #20
 8000728:	187b      	adds	r3, r7, r1
 800072a:	22c0      	movs	r2, #192	; 0xc0
 800072c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2212      	movs	r2, #18
 8000732:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2201      	movs	r2, #1
 8000738:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2203      	movs	r2, #3
 800073e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	187b      	adds	r3, r7, r1
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_I2C_MspInit+0x98>)
 800074a:	0019      	movs	r1, r3
 800074c:	0010      	movs	r0, r2
 800074e:	f000 fca5 	bl	800109c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_I2C_MspInit+0x94>)
 8000754:	69da      	ldr	r2, [r3, #28]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_I2C_MspInit+0x94>)
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0389      	lsls	r1, r1, #14
 800075c:	430a      	orrs	r2, r1
 800075e:	61da      	str	r2, [r3, #28]
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_I2C_MspInit+0x94>)
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	039b      	lsls	r3, r3, #14
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b00a      	add	sp, #40	; 0x28
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b0c6      	sub	sp, #280	; 0x118
 8000788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fb4d 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f9b1 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f7ff ff1f 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000796:	f7ff ff67 	bl	8000668 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800079a:	f000 fa85 	bl	8000ca8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf(msg, "startup.\r\n");
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4ac8      	ldr	r2, [pc, #800]	; (8000ac4 <main+0x340>)
 80007a2:	ca03      	ldmia	r2!, {r0, r1}
 80007a4:	c303      	stmia	r3!, {r0, r1}
 80007a6:	8811      	ldrh	r1, [r2, #0]
 80007a8:	8019      	strh	r1, [r3, #0]
 80007aa:	7892      	ldrb	r2, [r2, #2]
 80007ac:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg,
				 strlen((char*)msg), HAL_MAX_DELAY);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fca9 	bl	8000108 <strlen>
 80007b6:	0003      	movs	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	2301      	movs	r3, #1
 80007bc:	425b      	negs	r3, r3
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	48c1      	ldr	r0, [pc, #772]	; (8000ac8 <main+0x344>)
 80007c2:	f002 f953 	bl	8002a6c <HAL_UART_Transmit>

	int idx = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	2286      	movs	r2, #134	; 0x86
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	18ba      	adds	r2, r7, r2
 80007ce:	6013      	str	r3, [r2, #0]
	uint8_t sys_stat = 0;
 80007d0:	4bbe      	ldr	r3, [pc, #760]	; (8000acc <main+0x348>)
 80007d2:	2288      	movs	r2, #136	; 0x88
 80007d4:	0052      	lsls	r2, r2, #1
 80007d6:	4694      	mov	ip, r2
 80007d8:	44bc      	add	ip, r7
 80007da:	4463      	add	r3, ip
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT, &sys_stat);
 80007e0:	250c      	movs	r5, #12
 80007e2:	35ff      	adds	r5, #255	; 0xff
 80007e4:	197c      	adds	r4, r7, r5
 80007e6:	1cfa      	adds	r2, r7, #3
 80007e8:	4bb9      	ldr	r3, [pc, #740]	; (8000ad0 <main+0x34c>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff fe33 	bl	8000458 <bq769x0_reg_read_byte>
 80007f2:	0003      	movs	r3, r0
 80007f4:	7023      	strb	r3, [r4, #0]

	if (result != HAL_OK) {
 80007f6:	197b      	adds	r3, r7, r5
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d014      	beq.n	8000828 <main+0xa4>
		sprintf(msg, "error reading sys_stat.\r\n");
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4ab4      	ldr	r2, [pc, #720]	; (8000ad4 <main+0x350>)
 8000802:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000804:	c313      	stmia	r3!, {r0, r1, r4}
 8000806:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000808:	c313      	stmia	r3!, {r0, r1, r4}
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
						 strlen((char*)msg), HAL_MAX_DELAY);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff fc79 	bl	8000108 <strlen>
 8000816:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 8000818:	b29a      	uxth	r2, r3
 800081a:	2301      	movs	r3, #1
 800081c:	425b      	negs	r3, r3
 800081e:	1d39      	adds	r1, r7, #4
 8000820:	48a9      	ldr	r0, [pc, #676]	; (8000ac8 <main+0x344>)
 8000822:	f002 f923 	bl	8002a6c <HAL_UART_Transmit>
 8000826:	e04d      	b.n	80008c4 <main+0x140>
	} else {
		sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 8000828:	4ba8      	ldr	r3, [pc, #672]	; (8000acc <main+0x348>)
 800082a:	2288      	movs	r2, #136	; 0x88
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	4694      	mov	ip, r2
 8000830:	44bc      	add	ip, r7
 8000832:	4463      	add	r3, ip
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001a      	movs	r2, r3
 8000838:	49a7      	ldr	r1, [pc, #668]	; (8000ad8 <main+0x354>)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fdb1 	bl	80033a4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
						 strlen((char*)msg), HAL_MAX_DELAY);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fc5f 	bl	8000108 <strlen>
 800084a:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 800084c:	b29a      	uxth	r2, r3
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	1d39      	adds	r1, r7, #4
 8000854:	489c      	ldr	r0, [pc, #624]	; (8000ac8 <main+0x344>)
 8000856:	f002 f909 	bl	8002a6c <HAL_UART_Transmit>

		if (sys_stat > 0) {
 800085a:	4b9c      	ldr	r3, [pc, #624]	; (8000acc <main+0x348>)
 800085c:	2288      	movs	r2, #136	; 0x88
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	4694      	mov	ip, r2
 8000862:	44bc      	add	ip, r7
 8000864:	4463      	add	r3, ip
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d02b      	beq.n	80008c4 <main+0x140>
			uint8_t clear = sys_stat & 0b00010011;
 800086c:	4b97      	ldr	r3, [pc, #604]	; (8000acc <main+0x348>)
 800086e:	2288      	movs	r2, #136	; 0x88
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	4694      	mov	ip, r2
 8000874:	44bc      	add	ip, r7
 8000876:	4463      	add	r3, ip
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	2085      	movs	r0, #133	; 0x85
 800087c:	0040      	lsls	r0, r0, #1
 800087e:	183b      	adds	r3, r7, r0
 8000880:	2113      	movs	r1, #19
 8000882:	400a      	ands	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
			// SCD
			HAL_StatusTypeDef result = bq769x0_reg_write_byte(&hi2c1, BQ_SYS_STAT, clear);
 8000886:	250a      	movs	r5, #10
 8000888:	35ff      	adds	r5, #255	; 0xff
 800088a:	197c      	adds	r4, r7, r5
 800088c:	183b      	adds	r3, r7, r0
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b8f      	ldr	r3, [pc, #572]	; (8000ad0 <main+0x34c>)
 8000892:	2100      	movs	r1, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fdb5 	bl	8000404 <bq769x0_reg_write_byte>
 800089a:	0003      	movs	r3, r0
 800089c:	7023      	strb	r3, [r4, #0]
			sprintf(msg, "result: %d\r\n", result);
 800089e:	197b      	adds	r3, r7, r5
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	498e      	ldr	r1, [pc, #568]	; (8000adc <main+0x358>)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fd7c 	bl	80033a4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
							 strlen((char*)msg), HAL_MAX_DELAY);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fc2a 	bl	8000108 <strlen>
 80008b4:	0003      	movs	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
 80008bc:	1d39      	adds	r1, r7, #4
 80008be:	4882      	ldr	r0, [pc, #520]	; (8000ac8 <main+0x344>)
 80008c0:	f002 f8d4 	bl	8002a6c <HAL_UART_Transmit>
		}
	}


	result = bq769x0_reg_read_byte(&hi2c1, BQ_SYS_STAT, &sys_stat);
 80008c4:	250c      	movs	r5, #12
 80008c6:	35ff      	adds	r5, #255	; 0xff
 80008c8:	197c      	adds	r4, r7, r5
 80008ca:	1cfa      	adds	r2, r7, #3
 80008cc:	4b80      	ldr	r3, [pc, #512]	; (8000ad0 <main+0x34c>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff fdc1 	bl	8000458 <bq769x0_reg_read_byte>
 80008d6:	0003      	movs	r3, r0
 80008d8:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80008da:	197b      	adds	r3, r7, r5
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d014      	beq.n	800090c <main+0x188>
			sprintf(msg, "error reading sys_stat.\r\n");
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4a7b      	ldr	r2, [pc, #492]	; (8000ad4 <main+0x350>)
 80008e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e8:	c313      	stmia	r3!, {r0, r1, r4}
 80008ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ec:	c313      	stmia	r3!, {r0, r1, r4}
 80008ee:	8812      	ldrh	r2, [r2, #0]
 80008f0:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
							 strlen((char*)msg), HAL_MAX_DELAY);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fc07 	bl	8000108 <strlen>
 80008fa:	0003      	movs	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2301      	movs	r3, #1
 8000900:	425b      	negs	r3, r3
 8000902:	1d39      	adds	r1, r7, #4
 8000904:	4870      	ldr	r0, [pc, #448]	; (8000ac8 <main+0x344>)
 8000906:	f002 f8b1 	bl	8002a6c <HAL_UART_Transmit>
 800090a:	e018      	b.n	800093e <main+0x1ba>
		} else {
			sprintf(msg, "sys_stat: %d\r\n", sys_stat);
 800090c:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <main+0x348>)
 800090e:	2288      	movs	r2, #136	; 0x88
 8000910:	0052      	lsls	r2, r2, #1
 8000912:	4694      	mov	ip, r2
 8000914:	44bc      	add	ip, r7
 8000916:	4463      	add	r3, ip
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	001a      	movs	r2, r3
 800091c:	496e      	ldr	r1, [pc, #440]	; (8000ad8 <main+0x354>)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fd3f 	bl	80033a4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
							 strlen((char*)msg), HAL_MAX_DELAY);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fbed 	bl	8000108 <strlen>
 800092e:	0003      	movs	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 8000930:	b29a      	uxth	r2, r3
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	1d39      	adds	r1, r7, #4
 8000938:	4863      	ldr	r0, [pc, #396]	; (8000ac8 <main+0x344>)
 800093a:	f002 f897 	bl	8002a6c <HAL_UART_Transmit>
		}

uint8_t gain = 0;
 800093e:	2484      	movs	r4, #132	; 0x84
 8000940:	0064      	lsls	r4, r4, #1
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
uint8_t offset = 0;
 8000948:	2508      	movs	r5, #8
 800094a:	35ff      	adds	r5, #255	; 0xff
 800094c:	197b      	adds	r3, r7, r5
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

	uint8_t reading = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <main+0x35c>)
 8000954:	2288      	movs	r2, #136	; 0x88
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	4694      	mov	ip, r2
 800095a:	44bc      	add	ip, r7
 800095c:	4463      	add	r3, ip
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
	bq769x0_reg_read_byte(&hi2c1, BQ_ADCOFFSET, &reading);
 8000962:	1cba      	adds	r2, r7, #2
 8000964:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <main+0x34c>)
 8000966:	2151      	movs	r1, #81	; 0x51
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff fd75 	bl	8000458 <bq769x0_reg_read_byte>
	offset = reading;
 800096e:	197b      	adds	r3, r7, r5
 8000970:	4a5b      	ldr	r2, [pc, #364]	; (8000ae0 <main+0x35c>)
 8000972:	2188      	movs	r1, #136	; 0x88
 8000974:	0049      	lsls	r1, r1, #1
 8000976:	468c      	mov	ip, r1
 8000978:	44bc      	add	ip, r7
 800097a:	4462      	add	r2, ip
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	701a      	strb	r2, [r3, #0]

	reading = 0;
 8000980:	4b57      	ldr	r3, [pc, #348]	; (8000ae0 <main+0x35c>)
 8000982:	2288      	movs	r2, #136	; 0x88
 8000984:	0052      	lsls	r2, r2, #1
 8000986:	4694      	mov	ip, r2
 8000988:	44bc      	add	ip, r7
 800098a:	4463      	add	r3, ip
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	bq769x0_reg_read_byte(&hi2c1, BQ_ADCGAIN2, &reading);
 8000990:	1cba      	adds	r2, r7, #2
 8000992:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <main+0x34c>)
 8000994:	2159      	movs	r1, #89	; 0x59
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fd5e 	bl	8000458 <bq769x0_reg_read_byte>
	gain = (reading & 0b11100000) >> 5;
 800099c:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <main+0x35c>)
 800099e:	2288      	movs	r2, #136	; 0x88
 80009a0:	0052      	lsls	r2, r2, #1
 80009a2:	4694      	mov	ip, r2
 80009a4:	44bc      	add	ip, r7
 80009a6:	4463      	add	r3, ip
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0952      	lsrs	r2, r2, #5
 80009ae:	701a      	strb	r2, [r3, #0]

	reading = 0;
 80009b0:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <main+0x35c>)
 80009b2:	2288      	movs	r2, #136	; 0x88
 80009b4:	0052      	lsls	r2, r2, #1
 80009b6:	4694      	mov	ip, r2
 80009b8:	44bc      	add	ip, r7
 80009ba:	4463      	add	r3, ip
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
	bq769x0_reg_read_byte(&hi2c1, BQ_ADCGAIN1, &reading);
 80009c0:	1cba      	adds	r2, r7, #2
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <main+0x34c>)
 80009c4:	2150      	movs	r1, #80	; 0x50
 80009c6:	0018      	movs	r0, r3
 80009c8:	f7ff fd46 	bl	8000458 <bq769x0_reg_read_byte>
	gain |= ((reading & 0b00001100) << 1);
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <main+0x35c>)
 80009ce:	2288      	movs	r2, #136	; 0x88
 80009d0:	0052      	lsls	r2, r2, #1
 80009d2:	4694      	mov	ip, r2
 80009d4:	44bc      	add	ip, r7
 80009d6:	4463      	add	r3, ip
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	2218      	movs	r2, #24
 80009e0:	4013      	ands	r3, r2
 80009e2:	b25a      	sxtb	r2, r3
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	701a      	strb	r2, [r3, #0]


	sprintf(msg, "gain: %d, offset: %d.\r\n", gain, offset);
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	197b      	adds	r3, r7, r5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	493a      	ldr	r1, [pc, #232]	; (8000ae4 <main+0x360>)
 80009fc:	1d38      	adds	r0, r7, #4
 80009fe:	f002 fcd1 	bl	80033a4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
						 strlen((char*)msg), HAL_MAX_DELAY);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fb7f 	bl	8000108 <strlen>
 8000a0a:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	2301      	movs	r3, #1
 8000a10:	425b      	negs	r3, r3
 8000a12:	1d39      	adds	r1, r7, #4
 8000a14:	482c      	ldr	r0, [pc, #176]	; (8000ac8 <main+0x344>)
 8000a16:	f002 f829 	bl	8002a6c <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint16_t voltage = 0;
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <main+0x364>)
 8000a1c:	2288      	movs	r2, #136	; 0x88
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	4694      	mov	ip, r2
 8000a22:	44bc      	add	ip, r7
 8000a24:	4463      	add	r3, ip
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
	  HAL_StatusTypeDef volRes = bq769x0_read_voltage(&hi2c1, 7, &voltage, gain, offset);
 8000a2a:	1dfc      	adds	r4, r7, #7
 8000a2c:	34ff      	adds	r4, #255	; 0xff
 8000a2e:	2384      	movs	r3, #132	; 0x84
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	7819      	ldrb	r1, [r3, #0]
 8000a36:	003a      	movs	r2, r7
 8000a38:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <main+0x34c>)
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	33ff      	adds	r3, #255	; 0xff
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	000b      	movs	r3, r1
 8000a46:	2107      	movs	r1, #7
 8000a48:	f7ff fd74 	bl	8000534 <bq769x0_read_voltage>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	7023      	strb	r3, [r4, #0]

		sprintf(msg, "result: %d, voltage: %d.\r\n", volRes, voltage);
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	33ff      	adds	r3, #255	; 0xff
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <main+0x364>)
 8000a58:	2188      	movs	r1, #136	; 0x88
 8000a5a:	0049      	lsls	r1, r1, #1
 8000a5c:	468c      	mov	ip, r1
 8000a5e:	44bc      	add	ip, r7
 8000a60:	4463      	add	r3, ip
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4921      	ldr	r1, [pc, #132]	; (8000aec <main+0x368>)
 8000a66:	1d38      	adds	r0, r7, #4
 8000a68:	f002 fc9c 	bl	80033a4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg,
					 strlen((char*)msg), HAL_MAX_DELAY);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fb4a 	bl	8000108 <strlen>
 8000a74:	0003      	movs	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*)msg,
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <main+0x344>)
 8000a80:	f001 fff4 	bl	8002a6c <HAL_UART_Transmit>
		idx++;
 8000a84:	2286      	movs	r2, #134	; 0x86
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	18bb      	adds	r3, r7, r2
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	18ba      	adds	r2, r7, r2
 8000a90:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	01db      	lsls	r3, r3, #7
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <main+0x36c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f000 fc66 	bl	800136c <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000aa0:	23fa      	movs	r3, #250	; 0xfa
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fa23 	bl	8000ef0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	01db      	lsls	r3, r3, #7
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <main+0x36c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	f000 fc5a 	bl	800136c <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000ab8:	23fa      	movs	r3, #250	; 0xfa
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fa17 	bl	8000ef0 <HAL_Delay>
  {
 8000ac2:	e7aa      	b.n	8000a1a <main+0x296>
 8000ac4:	08003a44 	.word	0x08003a44
 8000ac8:	200000e4 	.word	0x200000e4
 8000acc:	fffffef3 	.word	0xfffffef3
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	08003a50 	.word	0x08003a50
 8000ad8:	08003a6c 	.word	0x08003a6c
 8000adc:	08003a7c 	.word	0x08003a7c
 8000ae0:	fffffef2 	.word	0xfffffef2
 8000ae4:	08003a8c 	.word	0x08003a8c
 8000ae8:	fffffef0 	.word	0xfffffef0
 8000aec:	08003aa4 	.word	0x08003aa4
 8000af0:	48000400 	.word	0x48000400

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b099      	sub	sp, #100	; 0x64
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	242c      	movs	r4, #44	; 0x2c
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2334      	movs	r3, #52	; 0x34
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f002 fb8a 	bl	800321e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0a:	231c      	movs	r3, #28
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2310      	movs	r3, #16
 8000b12:	001a      	movs	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	f002 fb82 	bl	800321e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	2318      	movs	r3, #24
 8000b20:	001a      	movs	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	f002 fb7b 	bl	800321e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2210      	movs	r2, #16
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 f951 	bl	8001dec <HAL_RCC_OscConfig>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b4e:	f000 f82b 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	211c      	movs	r1, #28
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2207      	movs	r2, #7
 8000b58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2100      	movs	r1, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fcc1 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 f815 	bl	8000ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2221      	movs	r2, #33	; 0x21
 8000b82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	0018      	movs	r0, r3
 8000b94:	f001 fe28 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b9c:	f000 f804 	bl	8000ba8 <Error_Handler>
  }
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b019      	add	sp, #100	; 0x64
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	619a      	str	r2, [r3, #24]
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd4:	69da      	ldr	r2, [r3, #28]
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0549      	lsls	r1, r1, #21
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	61da      	str	r2, [r3, #28]
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_MspInit+0x44>)
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	055b      	lsls	r3, r3, #21
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f948 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 faaa 	bl	80031b8 <__errno>
 8000c64:	0003      	movs	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	18d2      	adds	r2, r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b006      	add	sp, #24
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20001800 	.word	0x20001800
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	20000170 	.word	0x20000170

08000c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART1_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cb4:	2296      	movs	r2, #150	; 0x96
 8000cb6:	0212      	lsls	r2, r2, #8
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fe69 	bl	80029c4 <HAL_UART_Init>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f7ff ff57 	bl	8000ba8 <Error_Handler>
  }

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000e4 	.word	0x200000e4
 8000d04:	40013800 	.word	0x40013800

08000d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	2314      	movs	r3, #20
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	2314      	movs	r3, #20
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f002 fa7f 	bl	800321e <memset>
  if(uartHandle->Instance==USART1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d133      	bne.n	8000d92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	01c9      	lsls	r1, r1, #7
 8000d34:	430a      	orrs	r2, r1
 8000d36:	619a      	str	r2, [r3, #24]
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0289      	lsls	r1, r1, #10
 8000d50:	430a      	orrs	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d62:	2114      	movs	r1, #20
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	22c0      	movs	r2, #192	; 0xc0
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2202      	movs	r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	187a      	adds	r2, r7, r1
 8000d86:	2390      	movs	r3, #144	; 0x90
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f985 	bl	800109c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b00a      	add	sp, #40	; 0x28
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40021000 	.word	0x40021000

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000daa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000dac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <LoopForever+0xa>)
    CMP R1, R2
 8000db0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000db2:	d105      	bne.n	8000dc0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000db6:	4913      	ldr	r1, [pc, #76]	; (8000e04 <LoopForever+0x12>)
    STR R1, [R0]
 8000db8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000dbc:	4913      	ldr	r1, [pc, #76]	; (8000e0c <LoopForever+0x1a>)
    STR R1, [R0]
 8000dbe:	6001      	str	r1, [r0, #0]

08000dc0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dc2:	4914      	ldr	r1, [pc, #80]	; (8000e14 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <LoopForever+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dd8:	4c11      	ldr	r4, [pc, #68]	; (8000e20 <LoopForever+0x2e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000de6:	f7ff ff59 	bl	8000c9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dea:	f002 f9eb 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fcc9 	bl	8000784 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000df8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000dfc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e00:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e04:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e08:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e0c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e18:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000e1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e20:	2000016c 	.word	0x2000016c

08000e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_IRQHandler>
	...

08000e28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_Init+0x24>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_Init+0x24>)
 8000e32:	2110      	movs	r1, #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f809 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3e:	f7ff feb9 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x5c>)
 8000e5a:	681c      	ldr	r4, [r3, #0]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	0019      	movs	r1, r3
 8000e62:	23fa      	movs	r3, #250	; 0xfa
 8000e64:	0098      	lsls	r0, r3, #2
 8000e66:	f7ff f957 	bl	8000118 <__udivsi3>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	0020      	movs	r0, r4
 8000e70:	f7ff f952 	bl	8000118 <__udivsi3>
 8000e74:	0003      	movs	r3, r0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 f903 	bl	8001082 <HAL_SYSTICK_Config>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e00f      	b.n	8000ea4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d80b      	bhi.n	8000ea2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f8e0 	bl	8001058 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_InitTick+0x64>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_IncTick+0x1c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	18d2      	adds	r2, r2, r3
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_IncTick+0x20>)
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000164 	.word	0x20000164

08000edc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <HAL_GetTick+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000164 	.word	0x20000164

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fff0 	bl	8000edc <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_Delay+0x40>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	001a      	movs	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	189b      	adds	r3, r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	f7ff ffe0 	bl	8000edc <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b7f      	cmp	r3, #127	; 0x7f
 8000f48:	d828      	bhi.n	8000f9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <__NVIC_SetPriority+0xd4>)
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	33c0      	adds	r3, #192	; 0xc0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	589b      	ldr	r3, [r3, r2]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	2203      	movs	r2, #3
 8000f62:	400a      	ands	r2, r1
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	21ff      	movs	r1, #255	; 0xff
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	401a      	ands	r2, r3
 8000f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	401a      	ands	r2, r3
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	4003      	ands	r3, r0
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	481f      	ldr	r0, [pc, #124]	; (8001008 <__NVIC_SetPriority+0xd4>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	430a      	orrs	r2, r1
 8000f94:	33c0      	adds	r3, #192	; 0xc0
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f9a:	e031      	b.n	8001000 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3306      	adds	r3, #6
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	18d3      	adds	r3, r2, r3
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1dfa      	adds	r2, r7, #7
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	0011      	movs	r1, r2
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	21ff      	movs	r1, #255	; 0xff
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	43d2      	mvns	r2, r2
 8000fca:	401a      	ands	r2, r3
 8000fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2303      	movs	r3, #3
 8000fde:	4003      	ands	r3, r0
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <__NVIC_SetPriority+0xd8>)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	001c      	movs	r4, r3
 8000fec:	230f      	movs	r3, #15
 8000fee:	4023      	ands	r3, r4
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	3306      	adds	r3, #6
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	18c3      	adds	r3, r0, r3
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b003      	add	sp, #12
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <SysTick_Config+0x40>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e010      	b.n	8001048 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <SysTick_Config+0x44>)
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	3a01      	subs	r2, #1
 800102c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	2301      	movs	r3, #1
 8001030:	425b      	negs	r3, r3
 8001032:	2103      	movs	r1, #3
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff7d 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SysTick_Config+0x44>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x44>)
 8001042:	2207      	movs	r2, #7
 8001044:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001046:	2300      	movs	r3, #0
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	00ffffff 	.word	0x00ffffff
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	210f      	movs	r1, #15
 8001064:	187b      	adds	r3, r7, r1
 8001066:	1c02      	adds	r2, r0, #0
 8001068:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	187b      	adds	r3, r7, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25b      	sxtb	r3, r3
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ffbf 	bl	8001010 <SysTick_Config>
 8001092:	0003      	movs	r3, r0
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e149      	b.n	8001340 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x28>
 80010c2:	e13a      	b.n	800133a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0xea>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	58d3      	ldr	r3, [r2, r3]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2207      	movs	r2, #7
 8001198:	4013      	ands	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400b      	ands	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	055b      	lsls	r3, r3, #21
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x174>
 800120e:	e094      	b.n	800133a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x2c0>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	589b      	ldr	r3, [r3, r2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	2390      	movs	r3, #144	; 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	429a      	cmp	r2, r3
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1d6>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a41      	ldr	r2, [pc, #260]	; (8001360 <HAL_GPIO_Init+0x2c4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1d2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a40      	ldr	r2, [pc, #256]	; (8001364 <HAL_GPIO_Init+0x2c8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1ce>
 8001266:	2302      	movs	r3, #2
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x1d8>
 800126a:	2305      	movs	r3, #5
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x1d8>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x1d8>
 8001272:	2300      	movs	r3, #0
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	2103      	movs	r1, #3
 8001278:	400a      	ands	r2, r1
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x2c0>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	025b      	lsls	r3, r3, #9
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	035b      	lsls	r3, r3, #13
 80012fe:	4013      	ands	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4013      	ands	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	40da      	lsrs	r2, r3
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	d000      	beq.n	800134e <HAL_GPIO_Init+0x2b2>
 800134c:	e6ae      	b.n	80010ac <HAL_GPIO_Init+0x10>
  } 
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b006      	add	sp, #24
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	0008      	movs	r0, r1
 8001376:	0011      	movs	r1, r2
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	1c02      	adds	r2, r0, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1c7b      	adds	r3, r7, #1
 8001380:	1c0a      	adds	r2, r1, #0
 8001382:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001384:	1c7b      	adds	r3, r7, #1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138c:	1cbb      	adds	r3, r7, #2
 800138e:	881a      	ldrh	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e082      	b.n	80014c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2241      	movs	r2, #65	; 0x41
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f989 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2241      	movs	r2, #65	; 0x41
 80013da:	2124      	movs	r1, #36	; 0x24
 80013dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	438a      	bics	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4934      	ldr	r1, [pc, #208]	; (80014c8 <HAL_I2C_Init+0x120>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4931      	ldr	r1, [pc, #196]	; (80014cc <HAL_I2C_Init+0x124>)
 8001408:	400a      	ands	r2, r1
 800140a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d108      	bne.n	8001426 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0209      	lsls	r1, r1, #8
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e007      	b.n	8001436 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2184      	movs	r1, #132	; 0x84
 8001430:	0209      	lsls	r1, r1, #8
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d104      	bne.n	8001448 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	491f      	ldr	r1, [pc, #124]	; (80014d0 <HAL_I2C_Init+0x128>)
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	491a      	ldr	r1, [pc, #104]	; (80014cc <HAL_I2C_Init+0x124>)
 8001464:	400a      	ands	r2, r1
 8001466:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	431a      	orrs	r2, r3
 8001472:	0011      	movs	r1, r2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69d9      	ldr	r1, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2241      	movs	r2, #65	; 0x41
 80014ac:	2120      	movs	r1, #32
 80014ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2242      	movs	r2, #66	; 0x42
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	f0ffffff 	.word	0xf0ffffff
 80014cc:	ffff7fff 	.word	0xffff7fff
 80014d0:	02008000 	.word	0x02008000

080014d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	0008      	movs	r0, r1
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	0019      	movs	r1, r3
 80014e2:	230a      	movs	r3, #10
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	2308      	movs	r3, #8
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	1c0a      	adds	r2, r1, #0
 80014f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2241      	movs	r2, #65	; 0x41
 80014f6:	5c9b      	ldrb	r3, [r3, r2]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d000      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x2c>
 80014fe:	e0e7      	b.n	80016d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	5c9b      	ldrb	r3, [r3, r2]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_I2C_Master_Transmit+0x3a>
 800150a:	2302      	movs	r3, #2
 800150c:	e0e1      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	2101      	movs	r1, #1
 8001514:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001516:	f7ff fce1 	bl	8000edc <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	0219      	lsls	r1, r3, #8
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2319      	movs	r3, #25
 800152a:	2201      	movs	r2, #1
 800152c:	f000 fa04 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0cc      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2241      	movs	r2, #65	; 0x41
 800153c:	2121      	movs	r1, #33	; 0x21
 800153e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2242      	movs	r2, #66	; 0x42
 8001544:	2110      	movs	r1, #16
 8001546:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2208      	movs	r2, #8
 8001558:	18ba      	adds	r2, r7, r2
 800155a:	8812      	ldrh	r2, [r2, #0]
 800155c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d911      	bls.n	8001592 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001578:	b2da      	uxtb	r2, r3
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	045c      	lsls	r4, r3, #17
 800157e:	230a      	movs	r3, #10
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	8819      	ldrh	r1, [r3, #0]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_I2C_Master_Transmit+0x208>)
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	0023      	movs	r3, r4
 800158c:	f000 fb60 	bl	8001c50 <I2C_TransferConfig>
 8001590:	e075      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	049c      	lsls	r4, r3, #18
 80015a6:	230a      	movs	r3, #10
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_I2C_Master_Transmit+0x208>)
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	0023      	movs	r3, r4
 80015b4:	f000 fb4c 	bl	8001c50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015b8:	e061      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f9f8 	bl	80019b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e081      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001602:	b29b      	uxth	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03a      	beq.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d136      	bne.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	0013      	movs	r3, r2
 800161a:	2200      	movs	r2, #0
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	f000 f98b 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e053      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d911      	bls.n	8001658 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163e:	b2da      	uxtb	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	045c      	lsls	r4, r3, #17
 8001644:	230a      	movs	r3, #10
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	0023      	movs	r3, r4
 8001652:	f000 fafd 	bl	8001c50 <I2C_TransferConfig>
 8001656:	e012      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	049c      	lsls	r4, r3, #18
 800166c:	230a      	movs	r3, #10
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	2300      	movs	r3, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	0023      	movs	r3, r4
 800167a:	f000 fae9 	bl	8001c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d198      	bne.n	80015ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f9d0 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e01a      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2220      	movs	r2, #32
 80016a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	490c      	ldr	r1, [pc, #48]	; (80016e0 <HAL_I2C_Master_Transmit+0x20c>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	2120      	movs	r1, #32
 80016ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2242      	movs	r2, #66	; 0x42
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b007      	add	sp, #28
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	80002000 	.word	0x80002000
 80016e0:	fe00e800 	.word	0xfe00e800

080016e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	0008      	movs	r0, r1
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	0019      	movs	r1, r3
 80016f2:	230a      	movs	r3, #10
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	1c02      	adds	r2, r0, #0
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	1c0a      	adds	r2, r1, #0
 8001700:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2241      	movs	r2, #65	; 0x41
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	d000      	beq.n	8001710 <HAL_I2C_Master_Receive+0x2c>
 800170e:	e0e8      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_I2C_Master_Receive+0x3a>
 800171a:	2302      	movs	r3, #2
 800171c:	e0e2      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2240      	movs	r2, #64	; 0x40
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001726:	f7ff fbd9 	bl	8000edc <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	0219      	lsls	r1, r3, #8
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2319      	movs	r3, #25
 800173a:	2201      	movs	r2, #1
 800173c:	f000 f8fc 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cd      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2241      	movs	r2, #65	; 0x41
 800174c:	2122      	movs	r1, #34	; 0x22
 800174e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2242      	movs	r2, #66	; 0x42
 8001754:	2110      	movs	r1, #16
 8001756:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2208      	movs	r2, #8
 8001768:	18ba      	adds	r2, r7, r2
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d911      	bls.n	80017a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	045c      	lsls	r4, r3, #17
 800178e:	230a      	movs	r3, #10
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	8819      	ldrh	r1, [r3, #0]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_I2C_Master_Receive+0x208>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	0023      	movs	r3, r4
 800179c:	f000 fa58 	bl	8001c50 <I2C_TransferConfig>
 80017a0:	e076      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	049c      	lsls	r4, r3, #18
 80017b6:	230a      	movs	r3, #10
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	8819      	ldrh	r1, [r3, #0]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_I2C_Master_Receive+0x208>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	0023      	movs	r3, r4
 80017c4:	f000 fa44 	bl	8001c50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80017c8:	e062      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 f96b 	bl	8001aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e082      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	2b00      	cmp	r3, #0
 8001820:	d136      	bne.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	0013      	movs	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	f000 f882 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e053      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d911      	bls.n	800186a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	b2da      	uxtb	r2, r3
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	045c      	lsls	r4, r3, #17
 8001856:	230a      	movs	r3, #10
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	8819      	ldrh	r1, [r3, #0]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	0023      	movs	r3, r4
 8001864:	f000 f9f4 	bl	8001c50 <I2C_TransferConfig>
 8001868:	e012      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	b2da      	uxtb	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049c      	lsls	r4, r3, #18
 800187e:	230a      	movs	r3, #10
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	0023      	movs	r3, r4
 800188c:	f000 f9e0 	bl	8001c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d197      	bne.n	80017ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f8c7 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e01a      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	490b      	ldr	r1, [pc, #44]	; (80018f0 <HAL_I2C_Master_Receive+0x20c>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2120      	movs	r1, #32
 80018cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2242      	movs	r2, #66	; 0x42
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b007      	add	sp, #28
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	80002400 	.word	0x80002400
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d103      	bne.n	8001912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	2b01      	cmp	r3, #1
 800191e:	d007      	beq.n	8001930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	619a      	str	r2, [r3, #24]
  }
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001948:	e021      	b.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	d01e      	beq.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff fac4 	bl	8000edc <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d113      	bne.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	2220      	movs	r2, #32
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2241      	movs	r2, #65	; 0x41
 8001976:	2120      	movs	r1, #32
 8001978:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2242      	movs	r2, #66	; 0x42
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	4013      	ands	r3, r2
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	425a      	negs	r2, r3
 800199e:	4153      	adcs	r3, r2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	001a      	movs	r2, r3
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d0ce      	beq.n	800194a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c2:	e02b      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f8da 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e029      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	d01e      	beq.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff fa7d 	bl	8000edc <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d113      	bne.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	2220      	movs	r2, #32
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2241      	movs	r2, #65	; 0x41
 8001a04:	2120      	movs	r1, #32
 8001a06:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2242      	movs	r2, #66	; 0x42
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d1cc      	bne.n	80019c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a40:	e028      	b.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f89b 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e026      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff fa41 	bl	8000edc <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d113      	bne.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	2220      	movs	r2, #32
 8001a72:	431a      	orrs	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2242      	movs	r2, #66	; 0x42
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d1cf      	bne.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ab8:	e055      	b.n	8001b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f85f 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e053      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d129      	bne.n	8001b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d105      	bne.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e03f      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2220      	movs	r2, #32
 8001afc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	491d      	ldr	r1, [pc, #116]	; (8001b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2241      	movs	r2, #65	; 0x41
 8001b18:	2120      	movs	r1, #32
 8001b1a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2242      	movs	r2, #66	; 0x42
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e022      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7ff f9d4 	bl	8000edc <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2241      	movs	r2, #65	; 0x41
 8001b56:	2120      	movs	r1, #32
 8001b58:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d1a2      	bne.n	8001aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	fe00e800 	.word	0xfe00e800

08001b84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2210      	movs	r2, #16
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d151      	bne.n	8001c42 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b9e:	e021      	b.n	8001be4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	d01e      	beq.n	8001be4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f999 	bl	8000edc <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_IsAcknowledgeFailed+0x38>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d113      	bne.n	8001be4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2241      	movs	r2, #65	; 0x41
 8001bcc:	2120      	movs	r1, #32
 8001bce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2242      	movs	r2, #66	; 0x42
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	2100      	movs	r1, #0
 8001bde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e02f      	b.n	8001c44 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2220      	movs	r2, #32
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d1d6      	bne.n	8001ba0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff fe75 	bl	80018f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	490d      	ldr	r1, [pc, #52]	; (8001c4c <I2C_IsAcknowledgeFailed+0xc8>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	2204      	movs	r2, #4
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	2120      	movs	r1, #32
 8001c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2242      	movs	r2, #66	; 0x42
 8001c32:	2100      	movs	r1, #0
 8001c34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	fe00e800 	.word	0xfe00e800

08001c50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	0008      	movs	r0, r1
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	240a      	movs	r4, #10
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	1c02      	adds	r2, r0, #0
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	2009      	movs	r0, #9
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	1c0a      	adds	r2, r1, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	0d51      	lsrs	r1, r2, #21
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	00d2      	lsls	r2, r2, #3
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <I2C_TransferConfig+0x68>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	43d2      	mvns	r2, r2
 8001c84:	401a      	ands	r2, r3
 8001c86:	0011      	movs	r1, r2
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	059b      	lsls	r3, r3, #22
 8001c8e:	0d9a      	lsrs	r2, r3, #22
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	0418      	lsls	r0, r3, #16
 8001c96:	23ff      	movs	r3, #255	; 0xff
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	4003      	ands	r3, r0
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b005      	add	sp, #20
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	03ff63ff 	.word	0x03ff63ff

08001cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d138      	bne.n	8001d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e032      	b.n	8001d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2240      	movs	r2, #64	; 0x40
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2241      	movs	r2, #65	; 0x41
 8001cec:	2124      	movs	r1, #36	; 0x24
 8001cee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4911      	ldr	r1, [pc, #68]	; (8001d50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2241      	movs	r2, #65	; 0x41
 8001d34:	2120      	movs	r1, #32
 8001d36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	ffffefff 	.word	0xffffefff

08001d54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d139      	bne.n	8001dde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	5c9b      	ldrb	r3, [r3, r2]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e033      	b.n	8001de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2241      	movs	r2, #65	; 0x41
 8001d84:	2124      	movs	r1, #36	; 0x24
 8001d86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	; 0x41
 8001dce:	2120      	movs	r1, #32
 8001dd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
  }
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	fffff0ff 	.word	0xfffff0ff

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f000 fb76 	bl	80024ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d100      	bne.n	8001e0c <HAL_RCC_OscConfig+0x20>
 8001e0a:	e08e      	b.n	8001f2a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e0c:	4bc5      	ldr	r3, [pc, #788]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	220c      	movs	r2, #12
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d00e      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e18:	4bc2      	ldr	r3, [pc, #776]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d117      	bne.n	8001e54 <HAL_RCC_OscConfig+0x68>
 8001e24:	4bbf      	ldr	r3, [pc, #764]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	23c0      	movs	r3, #192	; 0xc0
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d10e      	bne.n	8001e54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	4bbb      	ldr	r3, [pc, #748]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	029b      	lsls	r3, r3, #10
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_RCC_OscConfig+0x58>
 8001e42:	e071      	b.n	8001f28 <HAL_RCC_OscConfig+0x13c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d000      	beq.n	8001e4e <HAL_RCC_OscConfig+0x62>
 8001e4c:	e06c      	b.n	8001f28 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 fb4c 	bl	80024ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x80>
 8001e5c:	4bb1      	ldr	r3, [pc, #708]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4bb0      	ldr	r3, [pc, #704]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0249      	lsls	r1, r1, #9
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e02f      	b.n	8001ecc <HAL_RCC_OscConfig+0xe0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0xa2>
 8001e74:	4bab      	ldr	r3, [pc, #684]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4baa      	ldr	r3, [pc, #680]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	49ab      	ldr	r1, [pc, #684]	; (8002128 <HAL_RCC_OscConfig+0x33c>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	4ba8      	ldr	r3, [pc, #672]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4ba7      	ldr	r3, [pc, #668]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e86:	49a9      	ldr	r1, [pc, #676]	; (800212c <HAL_RCC_OscConfig+0x340>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e01e      	b.n	8001ecc <HAL_RCC_OscConfig+0xe0>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc8>
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4ba2      	ldr	r3, [pc, #648]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	02c9      	lsls	r1, r1, #11
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b9f      	ldr	r3, [pc, #636]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xe0>
 8001eb4:	4b9b      	ldr	r3, [pc, #620]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b9a      	ldr	r3, [pc, #616]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001eba:	499b      	ldr	r1, [pc, #620]	; (8002128 <HAL_RCC_OscConfig+0x33c>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b98      	ldr	r3, [pc, #608]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b97      	ldr	r3, [pc, #604]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	4999      	ldr	r1, [pc, #612]	; (800212c <HAL_RCC_OscConfig+0x340>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f802 	bl	8000edc <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ede:	f7fe fffd 	bl	8000edc <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e2fd      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0xf2>
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe ffed 	bl	8000edc <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe ffe8 	bl	8000edc <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2e8      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x11c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x14a>
 8001f34:	e06c      	b.n	8002010 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00e      	beq.n	8001f5e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f40:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11f      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1a0>
 8001f4c:	4b75      	ldr	r3, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	401a      	ands	r2, r3
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b71      	ldr	r3, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x188>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e2bb      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	22f8      	movs	r2, #248	; 0xf8
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00da      	lsls	r2, r3, #3
 8001f84:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e041      	b.n	8002010 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d024      	beq.n	8001fde <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff9c 	bl	8000edc <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe ff97 	bl	8000edc <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e297      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0f1      	beq.n	8001faa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	22f8      	movs	r2, #248	; 0xf8
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00da      	lsls	r2, r3, #3
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff77 	bl	8000edc <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe ff72 	bl	8000edc <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e272      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d1f1      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2208      	movs	r2, #8
 8002016:	4013      	ands	r3, r2
 8002018:	d036      	beq.n	8002088 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d019      	beq.n	8002056 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7fe ff55 	bl	8000edc <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe ff50 	bl	8000edc <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e250      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d0f1      	beq.n	8002038 <HAL_RCC_OscConfig+0x24c>
 8002054:	e018      	b.n	8002088 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800205c:	2101      	movs	r1, #1
 800205e:	438a      	bics	r2, r1
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe ff3b 	bl	8000edc <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe ff36 	bl	8000edc <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e236      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d1f1      	bne.n	800206c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d100      	bne.n	8002094 <HAL_RCC_OscConfig+0x2a8>
 8002092:	e0b5      	b.n	8002200 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002094:	231f      	movs	r3, #31
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	4013      	ands	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0549      	lsls	r1, r1, #21
 80020b2:	430a      	orrs	r2, r1
 80020b4:	61da      	str	r2, [r3, #28]
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	055b      	lsls	r3, r3, #21
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020c4:	231f      	movs	r3, #31
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d11a      	bne.n	800210e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fef9 	bl	8000edc <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fef4 	bl	8000edc <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1f4      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <HAL_RCC_OscConfig+0x348>
 8002116:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800211c:	2101      	movs	r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	e035      	b.n	8002190 <HAL_RCC_OscConfig+0x3a4>
 8002124:	40021000 	.word	0x40021000
 8002128:	fffeffff 	.word	0xfffeffff
 800212c:	fffbffff 	.word	0xfffbffff
 8002130:	40007000 	.word	0x40007000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x36a>
 800213c:	4bca      	ldr	r3, [pc, #808]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	4bc9      	ldr	r3, [pc, #804]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	621a      	str	r2, [r3, #32]
 8002148:	4bc7      	ldr	r3, [pc, #796]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4bc6      	ldr	r3, [pc, #792]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800214e:	2104      	movs	r1, #4
 8002150:	438a      	bics	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
 8002154:	e01c      	b.n	8002190 <HAL_RCC_OscConfig+0x3a4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b05      	cmp	r3, #5
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x38c>
 800215e:	4bc2      	ldr	r3, [pc, #776]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	4bc1      	ldr	r3, [pc, #772]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002164:	2104      	movs	r1, #4
 8002166:	430a      	orrs	r2, r1
 8002168:	621a      	str	r2, [r3, #32]
 800216a:	4bbf      	ldr	r3, [pc, #764]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	4bbe      	ldr	r3, [pc, #760]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002170:	2101      	movs	r1, #1
 8002172:	430a      	orrs	r2, r1
 8002174:	621a      	str	r2, [r3, #32]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0x3a4>
 8002178:	4bbb      	ldr	r3, [pc, #748]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4bba      	ldr	r3, [pc, #744]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800217e:	2101      	movs	r1, #1
 8002180:	438a      	bics	r2, r1
 8002182:	621a      	str	r2, [r3, #32]
 8002184:	4bb8      	ldr	r3, [pc, #736]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	4bb7      	ldr	r3, [pc, #732]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800218a:	2104      	movs	r1, #4
 800218c:	438a      	bics	r2, r1
 800218e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d014      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe fea0 	bl	8000edc <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fe9b 	bl	8000edc <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4aaf      	ldr	r2, [pc, #700]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e19a      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	4bac      	ldr	r3, [pc, #688]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3b6>
 80021c0:	e013      	b.n	80021ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fe8b 	bl	8000edc <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe fe86 	bl	8000edc <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4aa5      	ldr	r2, [pc, #660]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e185      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4ba1      	ldr	r3, [pc, #644]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ea:	231f      	movs	r3, #31
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b9c      	ldr	r3, [pc, #624]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	4b9b      	ldr	r3, [pc, #620]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	499d      	ldr	r1, [pc, #628]	; (8002470 <HAL_RCC_OscConfig+0x684>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d12a      	bne.n	8002268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002212:	4b95      	ldr	r3, [pc, #596]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002216:	4b94      	ldr	r3, [pc, #592]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002218:	2104      	movs	r1, #4
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800221e:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	4b91      	ldr	r3, [pc, #580]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7fe fe57 	bl	8000edc <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002234:	f7fe fe52 	bl	8000edc <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e152      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d0f1      	beq.n	8002234 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002250:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	22f8      	movs	r2, #248	; 0xf8
 8002256:	4393      	bics	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	00da      	lsls	r2, r3, #3
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002262:	430a      	orrs	r2, r1
 8002264:	635a      	str	r2, [r3, #52]	; 0x34
 8002266:	e034      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	3305      	adds	r3, #5
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002270:	4b7d      	ldr	r3, [pc, #500]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800227c:	4b7a      	ldr	r3, [pc, #488]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	22f8      	movs	r2, #248	; 0xf8
 8002282:	4393      	bics	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	00da      	lsls	r2, r3, #3
 800228c:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800228e:	430a      	orrs	r2, r1
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
 8002292:	e01e      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002294:	4b74      	ldr	r3, [pc, #464]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002298:	4b73      	ldr	r3, [pc, #460]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800229a:	2104      	movs	r1, #4
 800229c:	430a      	orrs	r2, r1
 800229e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022a0:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	438a      	bics	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fe16 	bl	8000edc <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022b6:	f7fe fe11 	bl	8000edc <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e111      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022c8:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f1      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d05c      	beq.n	8002396 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	220c      	movs	r2, #12
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d00e      	beq.n	8002306 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022e8:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	220c      	movs	r2, #12
 80022ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d114      	bne.n	800231e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022f4:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	401a      	ands	r2, r3
 80022fe:	23c0      	movs	r3, #192	; 0xc0
 8002300:	025b      	lsls	r3, r3, #9
 8002302:	429a      	cmp	r2, r3
 8002304:	d10b      	bne.n	800231e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	4013      	ands	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_RCC_OscConfig+0x5a8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d03c      	beq.n	8002394 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0e6      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01b      	beq.n	800235e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	0249      	lsls	r1, r1, #9
 8002330:	430a      	orrs	r2, r1
 8002332:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fdd2 	bl	8000edc <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233e:	f7fe fdcd 	bl	8000edc <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0cd      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	4013      	ands	r3, r2
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x552>
 800235c:	e01b      	b.n	8002396 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002364:	4943      	ldr	r1, [pc, #268]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 8002366:	400a      	ands	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fdb7 	bl	8000edc <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002374:	f7fe fdb2 	bl	8000edc <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0b2      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	4013      	ands	r3, r2
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x588>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002394:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d100      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5b4>
 800239e:	e0a4      	b.n	80024ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	220c      	movs	r2, #12
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d100      	bne.n	80023ae <HAL_RCC_OscConfig+0x5c2>
 80023ac:	e078      	b.n	80024a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d14c      	bne.n	8002450 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	492e      	ldr	r1, [pc, #184]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fd8b 	bl	8000edc <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fd86 	bl	8000edc <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e086      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	049b      	lsls	r3, r3, #18
 80023e6:	4013      	ands	r3, r2
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	220f      	movs	r2, #15
 80023f0:	4393      	bics	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_RCC_OscConfig+0x690>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	431a      	orrs	r2, r3
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0449      	lsls	r1, r1, #17
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fd59 	bl	8000edc <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fd54 	bl	8000edc <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e054      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	049b      	lsls	r3, r3, #18
 800244a:	4013      	ands	r3, r2
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x644>
 800244e:	e04c      	b.n	80024ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_RCC_OscConfig+0x67c>)
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fd3e 	bl	8000edc <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x6a6>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	00001388 	.word	0x00001388
 8002470:	efffffff 	.word	0xefffffff
 8002474:	fffeffff 	.word	0xfffeffff
 8002478:	feffffff 	.word	0xfeffffff
 800247c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fd2c 	bl	8000edc <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x708>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	049b      	lsls	r3, r3, #18
 800249a:	4013      	ands	r3, r2
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x694>
 800249e:	e024      	b.n	80024ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e01f      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_OscConfig+0x708>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x708>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	025b      	lsls	r3, r3, #9
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d10e      	bne.n	80024e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	220f      	movs	r2, #15
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	23f0      	movs	r3, #240	; 0xf0
 80024da:	039b      	lsls	r3, r3, #14
 80024dc:	401a      	ands	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b008      	add	sp, #32
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0bf      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	4013      	ands	r3, r2
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d911      	bls.n	800253e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	4393      	bics	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0a6      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d015      	beq.n	8002574 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	4013      	ands	r3, r2
 8002550:	d006      	beq.n	8002560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002558:	21e0      	movs	r1, #224	; 0xe0
 800255a:	00c9      	lsls	r1, r1, #3
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	22f0      	movs	r2, #240	; 0xf0
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	d04c      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	4013      	ands	r3, r2
 8002590:	d120      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07a      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	049b      	lsls	r3, r3, #18
 80025a6:	4013      	ands	r3, r2
 80025a8:	d114      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06e      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 80025b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	025b      	lsls	r3, r3, #9
 80025be:	4013      	ands	r3, r2
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e062      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e05b      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fc78 	bl	8000edc <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7fe fc73 	bl	8000edc <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <HAL_RCC_ClockConfig+0x1a4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e042      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	401a      	ands	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1ec      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d211      	bcs.n	800264a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x19c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e020      	b.n	800268c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_RCC_ClockConfig+0x1a8>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002668:	f000 f820 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266c:	0001      	movs	r1, r0
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x1a0>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	220f      	movs	r2, #15
 8002676:	4013      	ands	r3, r2
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1ac>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	000a      	movs	r2, r1
 800267e:	40da      	lsrs	r2, r3
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fbe3 	bl	8000e50 <HAL_InitTick>
  
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	00001388 	.word	0x00001388
 80026a0:	fffff8ff 	.word	0xfffff8ff
 80026a4:	08003ae0 	.word	0x08003ae0
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b08f      	sub	sp, #60	; 0x3c
 80026b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026b2:	2314      	movs	r3, #20
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <HAL_RCC_GetSysClockFreq+0xe8>)
 80026b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ba:	c313      	stmia	r3!, {r0, r1, r4}
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4a35      	ldr	r2, [pc, #212]	; (8002798 <HAL_RCC_GetSysClockFreq+0xec>)
 80026c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c6:	c313      	stmia	r3!, {r0, r1, r4}
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCC_GetSysClockFreq+0xf0>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	220c      	movs	r2, #12
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d006      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x52>
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d043      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0xd0>
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d144      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026fc:	e044      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	220f      	movs	r2, #15
 8002704:	4013      	ands	r3, r2
 8002706:	2214      	movs	r2, #20
 8002708:	18ba      	adds	r2, r7, r2
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	220f      	movs	r2, #15
 8002714:	4013      	ands	r3, r2
 8002716:	1d3a      	adds	r2, r7, #4
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800271c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271e:	23c0      	movs	r3, #192	; 0xc0
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	401a      	ands	r2, r3
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	025b      	lsls	r3, r3, #9
 8002728:	429a      	cmp	r2, r3
 800272a:	d109      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800272c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272e:	481c      	ldr	r0, [pc, #112]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002730:	f7fd fcf2 	bl	8000118 <__udivsi3>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	4353      	muls	r3, r2
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	e01a      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	23c0      	movs	r3, #192	; 0xc0
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	401a      	ands	r2, r3
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	429a      	cmp	r2, r3
 800274e:	d109      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002754:	f7fd fce0 	bl	8000118 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	001a      	movs	r2, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	4353      	muls	r3, r2
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
 8002762:	e008      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	480e      	ldr	r0, [pc, #56]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002768:	f7fd fcd6 	bl	8000118 <__udivsi3>
 800276c:	0003      	movs	r3, r0
 800276e:	001a      	movs	r2, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	4353      	muls	r3, r2
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800277a:	e005      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002780:	e002      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002786:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b00f      	add	sp, #60	; 0x3c
 8002790:	bd90      	pop	{r4, r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	08003ac0 	.word	0x08003ac0
 8002798:	08003ad0 	.word	0x08003ad0
 800279c:	40021000 	.word	0x40021000
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	02dc6c00 	.word	0x02dc6c00

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000000 	.word	0x20000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	0001      	movs	r1, r0
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	2207      	movs	r2, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	40d9      	lsrs	r1, r3
 80027d6:	000b      	movs	r3, r1
}    
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003af0 	.word	0x08003af0

080027e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	025b      	lsls	r3, r3, #9
 8002800:	4013      	ands	r3, r2
 8002802:	d100      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002804:	e08f      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	055b      	lsls	r3, r3, #21
 8002816:	4013      	ands	r3, r2
 8002818:	d111      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4b64      	ldr	r3, [pc, #400]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0549      	lsls	r1, r1, #21
 8002824:	430a      	orrs	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
 8002828:	4b60      	ldr	r3, [pc, #384]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	055b      	lsls	r3, r3, #21
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2317      	movs	r3, #23
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4013      	ands	r3, r2
 8002848:	d11a      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0049      	lsls	r1, r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002858:	f7fe fb40 	bl	8000edc <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fb3b 	bl	8000edc <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	; 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e097      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d0f0      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002880:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	23c0      	movs	r3, #192	; 0xc0
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d034      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d02c      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a2:	4b42      	ldr	r3, [pc, #264]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ac:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	0249      	lsls	r1, r1, #9
 80028b6:	430a      	orrs	r2, r1
 80028b8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028c0:	493d      	ldr	r1, [pc, #244]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	4013      	ands	r3, r2
 80028d2:	d013      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fb02 	bl	8000edc <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	e009      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fafd 	bl	8000edc <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e058      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f0      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800290c:	430a      	orrs	r2, r1
 800290e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002910:	2317      	movs	r3, #23
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002920:	4927      	ldr	r1, [pc, #156]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002922:	400a      	ands	r2, r1
 8002924:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2203      	movs	r2, #3
 8002936:	4393      	bics	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	2210      	movs	r2, #16
 8002954:	4393      	bics	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800295e:	430a      	orrs	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	4393      	bics	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800297e:	430a      	orrs	r2, r1
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4013      	ands	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	4393      	bics	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
 80029b4:	fffffcff 	.word	0xfffffcff
 80029b8:	fffeffff 	.word	0xfffeffff
 80029bc:	00001388 	.word	0x00001388
 80029c0:	efffffff 	.word	0xefffffff

080029c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e044      	b.n	8002a60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2270      	movs	r2, #112	; 0x70
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe f98d 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2101      	movs	r1, #1
 8002a00:	438a      	bics	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 f8d8 	bl	8002bbc <UART_SetConfig>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e024      	b.n	8002a60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 fa51 	bl	8002ec8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	490d      	ldr	r1, [pc, #52]	; (8002a68 <HAL_UART_Init+0xa4>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	212a      	movs	r1, #42	; 0x2a
 8002a42:	438a      	bics	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fae9 	bl	8003030 <UART_CheckIdleState>
 8002a5e:	0003      	movs	r3, r0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	ffffb7ff 	.word	0xffffb7ff

08002a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	1dbb      	adds	r3, r7, #6
 8002a7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d000      	beq.n	8002a86 <HAL_UART_Transmit+0x1a>
 8002a84:	e095      	b.n	8002bb2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_UART_Transmit+0x28>
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e08d      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d109      	bne.n	8002ab8 <HAL_UART_Transmit+0x4c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e07d      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2270      	movs	r2, #112	; 0x70
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Transmit+0x5a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e076      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2270      	movs	r2, #112	; 0x70
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2221      	movs	r2, #33	; 0x21
 8002ad8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ada:	f7fe f9ff 	bl	8000edc <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1dba      	adds	r2, r7, #6
 8002ae6:	2150      	movs	r1, #80	; 0x50
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1dba      	adds	r2, r7, #6
 8002af0:	2152      	movs	r1, #82	; 0x52
 8002af2:	8812      	ldrh	r2, [r2, #0]
 8002af4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	015b      	lsls	r3, r3, #5
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Transmit+0xa8>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b1c:	e02d      	b.n	8002b7a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0013      	movs	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	f000 fac6 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e03d      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	05d2      	lsls	r2, r2, #23
 8002b48:	0dd2      	lsrs	r2, r2, #23
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3302      	adds	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e008      	b.n	8002b68 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2252      	movs	r2, #82	; 0x52
 8002b6c:	5a9b      	ldrh	r3, [r3, r2]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b299      	uxth	r1, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2252      	movs	r2, #82	; 0x52
 8002b78:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2252      	movs	r2, #82	; 0x52
 8002b7e:	5a9b      	ldrh	r3, [r3, r2]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1cb      	bne.n	8002b1e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	0013      	movs	r3, r2
 8002b90:	2200      	movs	r2, #0
 8002b92:	2140      	movs	r1, #64	; 0x40
 8002b94:	f000 fa92 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e009      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2270      	movs	r2, #112	; 0x70
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b008      	add	sp, #32
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4aad      	ldr	r2, [pc, #692]	; (8002ea4 <UART_SetConfig+0x2e8>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4aa8      	ldr	r2, [pc, #672]	; (8002ea8 <UART_SetConfig+0x2ec>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a9f      	ldr	r2, [pc, #636]	; (8002eac <UART_SetConfig+0x2f0>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a9b      	ldr	r2, [pc, #620]	; (8002eb0 <UART_SetConfig+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d125      	bne.n	8002c92 <UART_SetConfig+0xd6>
 8002c46:	4b9b      	ldr	r3, [pc, #620]	; (8002eb4 <UART_SetConfig+0x2f8>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d00f      	beq.n	8002c72 <UART_SetConfig+0xb6>
 8002c52:	d304      	bcc.n	8002c5e <UART_SetConfig+0xa2>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d011      	beq.n	8002c7c <UART_SetConfig+0xc0>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0xac>
 8002c5c:	e013      	b.n	8002c86 <UART_SetConfig+0xca>
 8002c5e:	231f      	movs	r3, #31
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e022      	b.n	8002cae <UART_SetConfig+0xf2>
 8002c68:	231f      	movs	r3, #31
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e01d      	b.n	8002cae <UART_SetConfig+0xf2>
 8002c72:	231f      	movs	r3, #31
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2204      	movs	r2, #4
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e018      	b.n	8002cae <UART_SetConfig+0xf2>
 8002c7c:	231f      	movs	r3, #31
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2208      	movs	r2, #8
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e013      	b.n	8002cae <UART_SetConfig+0xf2>
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	e00d      	b.n	8002cae <UART_SetConfig+0xf2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a88      	ldr	r2, [pc, #544]	; (8002eb8 <UART_SetConfig+0x2fc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d104      	bne.n	8002ca6 <UART_SetConfig+0xea>
 8002c9c:	231f      	movs	r3, #31
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e003      	b.n	8002cae <UART_SetConfig+0xf2>
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2210      	movs	r2, #16
 8002cac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d000      	beq.n	8002cbc <UART_SetConfig+0x100>
 8002cba:	e07d      	b.n	8002db8 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002cbc:	231f      	movs	r3, #31
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d01c      	beq.n	8002d00 <UART_SetConfig+0x144>
 8002cc6:	dc02      	bgt.n	8002cce <UART_SetConfig+0x112>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <UART_SetConfig+0x11c>
 8002ccc:	e04b      	b.n	8002d66 <UART_SetConfig+0x1aa>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d025      	beq.n	8002d1e <UART_SetConfig+0x162>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d037      	beq.n	8002d46 <UART_SetConfig+0x18a>
 8002cd6:	e046      	b.n	8002d66 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f7ff fd70 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	005a      	lsls	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	18d2      	adds	r2, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	0010      	movs	r0, r2
 8002cf4:	f7fd fa10 	bl	8000118 <__udivsi3>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	61bb      	str	r3, [r7, #24]
        break;
 8002cfe:	e037      	b.n	8002d70 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	4a6d      	ldr	r2, [pc, #436]	; (8002ebc <UART_SetConfig+0x300>)
 8002d08:	189a      	adds	r2, r3, r2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f7fd fa01 	bl	8000118 <__udivsi3>
 8002d16:	0003      	movs	r3, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	61bb      	str	r3, [r7, #24]
        break;
 8002d1c:	e028      	b.n	8002d70 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1e:	f7ff fcc5 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002d22:	0003      	movs	r3, r0
 8002d24:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	005a      	lsls	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	18d2      	adds	r2, r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f7fd f9ed 	bl	8000118 <__udivsi3>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	61bb      	str	r3, [r7, #24]
        break;
 8002d44:	e014      	b.n	8002d70 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	0252      	lsls	r2, r2, #9
 8002d50:	189a      	adds	r2, r3, r2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0019      	movs	r1, r3
 8002d58:	0010      	movs	r0, r2
 8002d5a:	f7fd f9dd 	bl	8000118 <__udivsi3>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	61bb      	str	r3, [r7, #24]
        break;
 8002d64:	e004      	b.n	8002d70 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002d66:	2317      	movs	r3, #23
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
        break;
 8002d6e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d91b      	bls.n	8002dae <UART_SetConfig+0x1f2>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <UART_SetConfig+0x304>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d817      	bhi.n	8002dae <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	200a      	movs	r0, #10
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	210f      	movs	r1, #15
 8002d88:	438a      	bics	r2, r1
 8002d8a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2207      	movs	r2, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	b299      	uxth	r1, r3
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	183a      	adds	r2, r7, r0
 8002d9c:	8812      	ldrh	r2, [r2, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	183a      	adds	r2, r7, r0
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	e06c      	b.n	8002e88 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002dae:	2317      	movs	r3, #23
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e067      	b.n	8002e88 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002db8:	231f      	movs	r3, #31
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d01b      	beq.n	8002dfa <UART_SetConfig+0x23e>
 8002dc2:	dc02      	bgt.n	8002dca <UART_SetConfig+0x20e>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <UART_SetConfig+0x218>
 8002dc8:	e049      	b.n	8002e5e <UART_SetConfig+0x2a2>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d024      	beq.n	8002e18 <UART_SetConfig+0x25c>
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d035      	beq.n	8002e3e <UART_SetConfig+0x282>
 8002dd2:	e044      	b.n	8002e5e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7ff fcf2 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	085a      	lsrs	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	18d2      	adds	r2, r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f7fd f993 	bl	8000118 <__udivsi3>
 8002df2:	0003      	movs	r3, r0
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	61bb      	str	r3, [r7, #24]
        break;
 8002df8:	e036      	b.n	8002e68 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <UART_SetConfig+0x308>)
 8002e02:	189a      	adds	r2, r3, r2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f7fd f984 	bl	8000118 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	61bb      	str	r3, [r7, #24]
        break;
 8002e16:	e027      	b.n	8002e68 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e18:	f7ff fc48 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	085a      	lsrs	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	18d2      	adds	r2, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0019      	movs	r1, r3
 8002e30:	0010      	movs	r0, r2
 8002e32:	f7fd f971 	bl	8000118 <__udivsi3>
 8002e36:	0003      	movs	r3, r0
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
        break;
 8002e3c:	e014      	b.n	8002e68 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0212      	lsls	r2, r2, #8
 8002e48:	189a      	adds	r2, r3, r2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f7fd f961 	bl	8000118 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	61bb      	str	r3, [r7, #24]
        break;
 8002e5c:	e004      	b.n	8002e68 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002e5e:	2317      	movs	r3, #23
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
        break;
 8002e66:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d908      	bls.n	8002e80 <UART_SetConfig+0x2c4>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <UART_SetConfig+0x304>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d804      	bhi.n	8002e80 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e003      	b.n	8002e88 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002e80:	2317      	movs	r3, #23
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e94:	2317      	movs	r3, #23
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b008      	add	sp, #32
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	efff69f3 	.word	0xefff69f3
 8002ea8:	ffffcfff 	.word	0xffffcfff
 8002eac:	fffff4ff 	.word	0xfffff4ff
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	0000ffff 	.word	0x0000ffff
 8002ec4:	007a1200 	.word	0x007a1200

08002ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	; (800300c <UART_AdvFeatureConfig+0x144>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a43      	ldr	r2, [pc, #268]	; (8003010 <UART_AdvFeatureConfig+0x148>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2204      	movs	r2, #4
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <UART_AdvFeatureConfig+0x14c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a34      	ldr	r2, [pc, #208]	; (8003018 <UART_AdvFeatureConfig+0x150>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <UART_AdvFeatureConfig+0x154>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <UART_AdvFeatureConfig+0x158>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <UART_AdvFeatureConfig+0x15c>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	035b      	lsls	r3, r3, #13
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10b      	bne.n	8002fe2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <UART_AdvFeatureConfig+0x160>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d00b      	beq.n	8003004 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <UART_AdvFeatureConfig+0x164>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}
 800300c:	fffdffff 	.word	0xfffdffff
 8003010:	fffeffff 	.word	0xfffeffff
 8003014:	fffbffff 	.word	0xfffbffff
 8003018:	ffff7fff 	.word	0xffff7fff
 800301c:	ffffefff 	.word	0xffffefff
 8003020:	ffffdfff 	.word	0xffffdfff
 8003024:	ffefffff 	.word	0xffefffff
 8003028:	ff9fffff 	.word	0xff9fffff
 800302c:	fff7ffff 	.word	0xfff7ffff

08003030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800303e:	f7fd ff4d 	bl	8000edc <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	4013      	ands	r3, r2
 8003050:	2b08      	cmp	r3, #8
 8003052:	d10d      	bne.n	8003070 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	0399      	lsls	r1, r3, #14
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <UART_CheckIdleState+0x88>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	0013      	movs	r3, r2
 8003062:	2200      	movs	r2, #0
 8003064:	f000 f82a 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d001      	beq.n	8003070 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e01f      	b.n	80030b0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2204      	movs	r2, #4
 8003078:	4013      	ands	r3, r2
 800307a:	2b04      	cmp	r3, #4
 800307c:	d10d      	bne.n	800309a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	03d9      	lsls	r1, r3, #15
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <UART_CheckIdleState+0x88>)
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	0013      	movs	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	f000 f815 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e00a      	b.n	80030b0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2270      	movs	r2, #112	; 0x70
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	01ffffff 	.word	0x01ffffff

080030bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030cc:	e05d      	b.n	800318a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3301      	adds	r3, #1
 80030d2:	d05a      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d4:	f7fd ff02 	bl	8000edc <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11b      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	492f      	ldr	r1, [pc, #188]	; (80031b4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	438a      	bics	r2, r1
 8003108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2270      	movs	r2, #112	; 0x70
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e043      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2204      	movs	r2, #4
 800312a:	4013      	ands	r3, r2
 800312c:	d02d      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	401a      	ands	r2, r3
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	429a      	cmp	r2, r3
 8003140:	d123      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4917      	ldr	r1, [pc, #92]	; (80031b4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	438a      	bics	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2270      	movs	r2, #112	; 0x70
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e00f      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	425a      	negs	r2, r3
 800319a:	4153      	adcs	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	001a      	movs	r2, r3
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d092      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	fffffe5f 	.word	0xfffffe5f

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4d0c      	ldr	r5, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	2600      	movs	r6, #0
 80031d6:	f000 fc29 	bl	8003a2c <_init>
 80031da:	4d0a      	ldr	r5, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	00b3      	lsls	r3, r6, #2
 80031ea:	58eb      	ldr	r3, [r5, r3]
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	00b3      	lsls	r3, r6, #2
 80031f4:	58eb      	ldr	r3, [r5, r3]
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003b2c 	.word	0x08003b2c
 8003200:	08003b2c 	.word	0x08003b2c
 8003204:	08003b2c 	.word	0x08003b2c
 8003208:	08003b30 	.word	0x08003b30

0800320c <memcpy>:
 800320c:	2300      	movs	r3, #0
 800320e:	b510      	push	{r4, lr}
 8003210:	429a      	cmp	r2, r3
 8003212:	d100      	bne.n	8003216 <memcpy+0xa>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	5ccc      	ldrb	r4, [r1, r3]
 8003218:	54c4      	strb	r4, [r0, r3]
 800321a:	3301      	adds	r3, #1
 800321c:	e7f8      	b.n	8003210 <memcpy+0x4>

0800321e <memset>:
 800321e:	0003      	movs	r3, r0
 8003220:	1812      	adds	r2, r2, r0
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <memset+0xa>
 8003226:	4770      	bx	lr
 8003228:	7019      	strb	r1, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	e7f9      	b.n	8003222 <memset+0x4>
	...

08003230 <_free_r>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	0005      	movs	r5, r0
 8003234:	2900      	cmp	r1, #0
 8003236:	d010      	beq.n	800325a <_free_r+0x2a>
 8003238:	1f0c      	subs	r4, r1, #4
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da00      	bge.n	8003242 <_free_r+0x12>
 8003240:	18e4      	adds	r4, r4, r3
 8003242:	0028      	movs	r0, r5
 8003244:	f000 f8ce 	bl	80033e4 <__malloc_lock>
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <_free_r+0x90>)
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <_free_r+0x2c>
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	6014      	str	r4, [r2, #0]
 8003254:	0028      	movs	r0, r5
 8003256:	f000 f8c6 	bl	80033e6 <__malloc_unlock>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	42a3      	cmp	r3, r4
 800325e:	d909      	bls.n	8003274 <_free_r+0x44>
 8003260:	6821      	ldr	r1, [r4, #0]
 8003262:	1860      	adds	r0, r4, r1
 8003264:	4283      	cmp	r3, r0
 8003266:	d1f3      	bne.n	8003250 <_free_r+0x20>
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	1841      	adds	r1, r0, r1
 800326e:	6021      	str	r1, [r4, #0]
 8003270:	e7ee      	b.n	8003250 <_free_r+0x20>
 8003272:	0013      	movs	r3, r2
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	2a00      	cmp	r2, #0
 8003278:	d001      	beq.n	800327e <_free_r+0x4e>
 800327a:	42a2      	cmp	r2, r4
 800327c:	d9f9      	bls.n	8003272 <_free_r+0x42>
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	1858      	adds	r0, r3, r1
 8003282:	42a0      	cmp	r0, r4
 8003284:	d10b      	bne.n	800329e <_free_r+0x6e>
 8003286:	6820      	ldr	r0, [r4, #0]
 8003288:	1809      	adds	r1, r1, r0
 800328a:	1858      	adds	r0, r3, r1
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	4282      	cmp	r2, r0
 8003290:	d1e0      	bne.n	8003254 <_free_r+0x24>
 8003292:	6810      	ldr	r0, [r2, #0]
 8003294:	6852      	ldr	r2, [r2, #4]
 8003296:	1841      	adds	r1, r0, r1
 8003298:	6019      	str	r1, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	e7da      	b.n	8003254 <_free_r+0x24>
 800329e:	42a0      	cmp	r0, r4
 80032a0:	d902      	bls.n	80032a8 <_free_r+0x78>
 80032a2:	230c      	movs	r3, #12
 80032a4:	602b      	str	r3, [r5, #0]
 80032a6:	e7d5      	b.n	8003254 <_free_r+0x24>
 80032a8:	6821      	ldr	r1, [r4, #0]
 80032aa:	1860      	adds	r0, r4, r1
 80032ac:	4282      	cmp	r2, r0
 80032ae:	d103      	bne.n	80032b8 <_free_r+0x88>
 80032b0:	6810      	ldr	r0, [r2, #0]
 80032b2:	6852      	ldr	r2, [r2, #4]
 80032b4:	1841      	adds	r1, r0, r1
 80032b6:	6021      	str	r1, [r4, #0]
 80032b8:	6062      	str	r2, [r4, #4]
 80032ba:	605c      	str	r4, [r3, #4]
 80032bc:	e7ca      	b.n	8003254 <_free_r+0x24>
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	20000090 	.word	0x20000090

080032c4 <_malloc_r>:
 80032c4:	2303      	movs	r3, #3
 80032c6:	b570      	push	{r4, r5, r6, lr}
 80032c8:	1ccd      	adds	r5, r1, #3
 80032ca:	439d      	bics	r5, r3
 80032cc:	3508      	adds	r5, #8
 80032ce:	0006      	movs	r6, r0
 80032d0:	2d0c      	cmp	r5, #12
 80032d2:	d21e      	bcs.n	8003312 <_malloc_r+0x4e>
 80032d4:	250c      	movs	r5, #12
 80032d6:	42a9      	cmp	r1, r5
 80032d8:	d81d      	bhi.n	8003316 <_malloc_r+0x52>
 80032da:	0030      	movs	r0, r6
 80032dc:	f000 f882 	bl	80033e4 <__malloc_lock>
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <_malloc_r+0xb4>)
 80032e2:	6814      	ldr	r4, [r2, #0]
 80032e4:	0021      	movs	r1, r4
 80032e6:	2900      	cmp	r1, #0
 80032e8:	d119      	bne.n	800331e <_malloc_r+0x5a>
 80032ea:	4c24      	ldr	r4, [pc, #144]	; (800337c <_malloc_r+0xb8>)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <_malloc_r+0x36>
 80032f2:	0030      	movs	r0, r6
 80032f4:	f000 f844 	bl	8003380 <_sbrk_r>
 80032f8:	6020      	str	r0, [r4, #0]
 80032fa:	0029      	movs	r1, r5
 80032fc:	0030      	movs	r0, r6
 80032fe:	f000 f83f 	bl	8003380 <_sbrk_r>
 8003302:	1c43      	adds	r3, r0, #1
 8003304:	d12b      	bne.n	800335e <_malloc_r+0x9a>
 8003306:	230c      	movs	r3, #12
 8003308:	0030      	movs	r0, r6
 800330a:	6033      	str	r3, [r6, #0]
 800330c:	f000 f86b 	bl	80033e6 <__malloc_unlock>
 8003310:	e003      	b.n	800331a <_malloc_r+0x56>
 8003312:	2d00      	cmp	r5, #0
 8003314:	dadf      	bge.n	80032d6 <_malloc_r+0x12>
 8003316:	230c      	movs	r3, #12
 8003318:	6033      	str	r3, [r6, #0]
 800331a:	2000      	movs	r0, #0
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	680b      	ldr	r3, [r1, #0]
 8003320:	1b5b      	subs	r3, r3, r5
 8003322:	d419      	bmi.n	8003358 <_malloc_r+0x94>
 8003324:	2b0b      	cmp	r3, #11
 8003326:	d903      	bls.n	8003330 <_malloc_r+0x6c>
 8003328:	600b      	str	r3, [r1, #0]
 800332a:	18cc      	adds	r4, r1, r3
 800332c:	6025      	str	r5, [r4, #0]
 800332e:	e003      	b.n	8003338 <_malloc_r+0x74>
 8003330:	684b      	ldr	r3, [r1, #4]
 8003332:	428c      	cmp	r4, r1
 8003334:	d10d      	bne.n	8003352 <_malloc_r+0x8e>
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	0030      	movs	r0, r6
 800333a:	f000 f854 	bl	80033e6 <__malloc_unlock>
 800333e:	0020      	movs	r0, r4
 8003340:	2207      	movs	r2, #7
 8003342:	300b      	adds	r0, #11
 8003344:	1d23      	adds	r3, r4, #4
 8003346:	4390      	bics	r0, r2
 8003348:	1ac3      	subs	r3, r0, r3
 800334a:	d0e7      	beq.n	800331c <_malloc_r+0x58>
 800334c:	425a      	negs	r2, r3
 800334e:	50e2      	str	r2, [r4, r3]
 8003350:	e7e4      	b.n	800331c <_malloc_r+0x58>
 8003352:	6063      	str	r3, [r4, #4]
 8003354:	000c      	movs	r4, r1
 8003356:	e7ef      	b.n	8003338 <_malloc_r+0x74>
 8003358:	000c      	movs	r4, r1
 800335a:	6849      	ldr	r1, [r1, #4]
 800335c:	e7c3      	b.n	80032e6 <_malloc_r+0x22>
 800335e:	2303      	movs	r3, #3
 8003360:	1cc4      	adds	r4, r0, #3
 8003362:	439c      	bics	r4, r3
 8003364:	42a0      	cmp	r0, r4
 8003366:	d0e1      	beq.n	800332c <_malloc_r+0x68>
 8003368:	1a21      	subs	r1, r4, r0
 800336a:	0030      	movs	r0, r6
 800336c:	f000 f808 	bl	8003380 <_sbrk_r>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d1db      	bne.n	800332c <_malloc_r+0x68>
 8003374:	e7c7      	b.n	8003306 <_malloc_r+0x42>
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000090 	.word	0x20000090
 800337c:	20000094 	.word	0x20000094

08003380 <_sbrk_r>:
 8003380:	2300      	movs	r3, #0
 8003382:	b570      	push	{r4, r5, r6, lr}
 8003384:	4c06      	ldr	r4, [pc, #24]	; (80033a0 <_sbrk_r+0x20>)
 8003386:	0005      	movs	r5, r0
 8003388:	0008      	movs	r0, r1
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	f7fd fc50 	bl	8000c30 <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d103      	bne.n	800339c <_sbrk_r+0x1c>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d000      	beq.n	800339c <_sbrk_r+0x1c>
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	20000168 	.word	0x20000168

080033a4 <siprintf>:
 80033a4:	b40e      	push	{r1, r2, r3}
 80033a6:	b500      	push	{lr}
 80033a8:	490b      	ldr	r1, [pc, #44]	; (80033d8 <siprintf+0x34>)
 80033aa:	b09c      	sub	sp, #112	; 0x70
 80033ac:	ab1d      	add	r3, sp, #116	; 0x74
 80033ae:	9002      	str	r0, [sp, #8]
 80033b0:	9006      	str	r0, [sp, #24]
 80033b2:	9107      	str	r1, [sp, #28]
 80033b4:	9104      	str	r1, [sp, #16]
 80033b6:	4809      	ldr	r0, [pc, #36]	; (80033dc <siprintf+0x38>)
 80033b8:	4909      	ldr	r1, [pc, #36]	; (80033e0 <siprintf+0x3c>)
 80033ba:	cb04      	ldmia	r3!, {r2}
 80033bc:	9105      	str	r1, [sp, #20]
 80033be:	6800      	ldr	r0, [r0, #0]
 80033c0:	a902      	add	r1, sp, #8
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	f000 f872 	bl	80034ac <_svfiprintf_r>
 80033c8:	2300      	movs	r3, #0
 80033ca:	9a02      	ldr	r2, [sp, #8]
 80033cc:	7013      	strb	r3, [r2, #0]
 80033ce:	b01c      	add	sp, #112	; 0x70
 80033d0:	bc08      	pop	{r3}
 80033d2:	b003      	add	sp, #12
 80033d4:	4718      	bx	r3
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	7fffffff 	.word	0x7fffffff
 80033dc:	2000000c 	.word	0x2000000c
 80033e0:	ffff0208 	.word	0xffff0208

080033e4 <__malloc_lock>:
 80033e4:	4770      	bx	lr

080033e6 <__malloc_unlock>:
 80033e6:	4770      	bx	lr

080033e8 <__ssputs_r>:
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	688e      	ldr	r6, [r1, #8]
 80033ec:	b085      	sub	sp, #20
 80033ee:	0007      	movs	r7, r0
 80033f0:	000c      	movs	r4, r1
 80033f2:	9203      	str	r2, [sp, #12]
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	429e      	cmp	r6, r3
 80033f8:	d83c      	bhi.n	8003474 <__ssputs_r+0x8c>
 80033fa:	2390      	movs	r3, #144	; 0x90
 80033fc:	898a      	ldrh	r2, [r1, #12]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	421a      	tst	r2, r3
 8003402:	d034      	beq.n	800346e <__ssputs_r+0x86>
 8003404:	2503      	movs	r5, #3
 8003406:	6909      	ldr	r1, [r1, #16]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	1a5b      	subs	r3, r3, r1
 800340c:	9302      	str	r3, [sp, #8]
 800340e:	6963      	ldr	r3, [r4, #20]
 8003410:	9802      	ldr	r0, [sp, #8]
 8003412:	435d      	muls	r5, r3
 8003414:	0feb      	lsrs	r3, r5, #31
 8003416:	195d      	adds	r5, r3, r5
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	106d      	asrs	r5, r5, #1
 800341c:	3301      	adds	r3, #1
 800341e:	181b      	adds	r3, r3, r0
 8003420:	42ab      	cmp	r3, r5
 8003422:	d900      	bls.n	8003426 <__ssputs_r+0x3e>
 8003424:	001d      	movs	r5, r3
 8003426:	0553      	lsls	r3, r2, #21
 8003428:	d532      	bpl.n	8003490 <__ssputs_r+0xa8>
 800342a:	0029      	movs	r1, r5
 800342c:	0038      	movs	r0, r7
 800342e:	f7ff ff49 	bl	80032c4 <_malloc_r>
 8003432:	1e06      	subs	r6, r0, #0
 8003434:	d109      	bne.n	800344a <__ssputs_r+0x62>
 8003436:	230c      	movs	r3, #12
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	2340      	movs	r3, #64	; 0x40
 800343c:	2001      	movs	r0, #1
 800343e:	89a2      	ldrh	r2, [r4, #12]
 8003440:	4240      	negs	r0, r0
 8003442:	4313      	orrs	r3, r2
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	b005      	add	sp, #20
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344a:	9a02      	ldr	r2, [sp, #8]
 800344c:	6921      	ldr	r1, [r4, #16]
 800344e:	f7ff fedd 	bl	800320c <memcpy>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <__ssputs_r+0xc0>)
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	4313      	orrs	r3, r2
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	9b02      	ldr	r3, [sp, #8]
 8003460:	6126      	str	r6, [r4, #16]
 8003462:	18f6      	adds	r6, r6, r3
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	6165      	str	r5, [r4, #20]
 8003468:	9e01      	ldr	r6, [sp, #4]
 800346a:	1aed      	subs	r5, r5, r3
 800346c:	60a5      	str	r5, [r4, #8]
 800346e:	9b01      	ldr	r3, [sp, #4]
 8003470:	429e      	cmp	r6, r3
 8003472:	d900      	bls.n	8003476 <__ssputs_r+0x8e>
 8003474:	9e01      	ldr	r6, [sp, #4]
 8003476:	0032      	movs	r2, r6
 8003478:	9903      	ldr	r1, [sp, #12]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f000 fa95 	bl	80039aa <memmove>
 8003480:	68a3      	ldr	r3, [r4, #8]
 8003482:	2000      	movs	r0, #0
 8003484:	1b9b      	subs	r3, r3, r6
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	199e      	adds	r6, r3, r6
 800348c:	6026      	str	r6, [r4, #0]
 800348e:	e7da      	b.n	8003446 <__ssputs_r+0x5e>
 8003490:	002a      	movs	r2, r5
 8003492:	0038      	movs	r0, r7
 8003494:	f000 fa9c 	bl	80039d0 <_realloc_r>
 8003498:	1e06      	subs	r6, r0, #0
 800349a:	d1e0      	bne.n	800345e <__ssputs_r+0x76>
 800349c:	6921      	ldr	r1, [r4, #16]
 800349e:	0038      	movs	r0, r7
 80034a0:	f7ff fec6 	bl	8003230 <_free_r>
 80034a4:	e7c7      	b.n	8003436 <__ssputs_r+0x4e>
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	fffffb7f 	.word	0xfffffb7f

080034ac <_svfiprintf_r>:
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	b0a1      	sub	sp, #132	; 0x84
 80034b0:	9003      	str	r0, [sp, #12]
 80034b2:	001d      	movs	r5, r3
 80034b4:	898b      	ldrh	r3, [r1, #12]
 80034b6:	000f      	movs	r7, r1
 80034b8:	0016      	movs	r6, r2
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	d511      	bpl.n	80034e2 <_svfiprintf_r+0x36>
 80034be:	690b      	ldr	r3, [r1, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10e      	bne.n	80034e2 <_svfiprintf_r+0x36>
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	f7ff fefd 	bl	80032c4 <_malloc_r>
 80034ca:	6038      	str	r0, [r7, #0]
 80034cc:	6138      	str	r0, [r7, #16]
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d105      	bne.n	80034de <_svfiprintf_r+0x32>
 80034d2:	230c      	movs	r3, #12
 80034d4:	9a03      	ldr	r2, [sp, #12]
 80034d6:	3801      	subs	r0, #1
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	b021      	add	sp, #132	; 0x84
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	2300      	movs	r3, #0
 80034e4:	ac08      	add	r4, sp, #32
 80034e6:	6163      	str	r3, [r4, #20]
 80034e8:	3320      	adds	r3, #32
 80034ea:	7663      	strb	r3, [r4, #25]
 80034ec:	3310      	adds	r3, #16
 80034ee:	76a3      	strb	r3, [r4, #26]
 80034f0:	9507      	str	r5, [sp, #28]
 80034f2:	0035      	movs	r5, r6
 80034f4:	782b      	ldrb	r3, [r5, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <_svfiprintf_r+0x52>
 80034fa:	2b25      	cmp	r3, #37	; 0x25
 80034fc:	d146      	bne.n	800358c <_svfiprintf_r+0xe0>
 80034fe:	1bab      	subs	r3, r5, r6
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	d00c      	beq.n	800351e <_svfiprintf_r+0x72>
 8003504:	0032      	movs	r2, r6
 8003506:	0039      	movs	r1, r7
 8003508:	9803      	ldr	r0, [sp, #12]
 800350a:	f7ff ff6d 	bl	80033e8 <__ssputs_r>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d100      	bne.n	8003514 <_svfiprintf_r+0x68>
 8003512:	e0ae      	b.n	8003672 <_svfiprintf_r+0x1c6>
 8003514:	6962      	ldr	r2, [r4, #20]
 8003516:	9b05      	ldr	r3, [sp, #20]
 8003518:	4694      	mov	ip, r2
 800351a:	4463      	add	r3, ip
 800351c:	6163      	str	r3, [r4, #20]
 800351e:	782b      	ldrb	r3, [r5, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d100      	bne.n	8003526 <_svfiprintf_r+0x7a>
 8003524:	e0a5      	b.n	8003672 <_svfiprintf_r+0x1c6>
 8003526:	2201      	movs	r2, #1
 8003528:	2300      	movs	r3, #0
 800352a:	4252      	negs	r2, r2
 800352c:	6062      	str	r2, [r4, #4]
 800352e:	a904      	add	r1, sp, #16
 8003530:	3254      	adds	r2, #84	; 0x54
 8003532:	1852      	adds	r2, r2, r1
 8003534:	1c6e      	adds	r6, r5, #1
 8003536:	6023      	str	r3, [r4, #0]
 8003538:	60e3      	str	r3, [r4, #12]
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	7013      	strb	r3, [r2, #0]
 800353e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003540:	7831      	ldrb	r1, [r6, #0]
 8003542:	2205      	movs	r2, #5
 8003544:	4853      	ldr	r0, [pc, #332]	; (8003694 <_svfiprintf_r+0x1e8>)
 8003546:	f000 fa25 	bl	8003994 <memchr>
 800354a:	1c75      	adds	r5, r6, #1
 800354c:	2800      	cmp	r0, #0
 800354e:	d11f      	bne.n	8003590 <_svfiprintf_r+0xe4>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	06d3      	lsls	r3, r2, #27
 8003554:	d504      	bpl.n	8003560 <_svfiprintf_r+0xb4>
 8003556:	2353      	movs	r3, #83	; 0x53
 8003558:	a904      	add	r1, sp, #16
 800355a:	185b      	adds	r3, r3, r1
 800355c:	2120      	movs	r1, #32
 800355e:	7019      	strb	r1, [r3, #0]
 8003560:	0713      	lsls	r3, r2, #28
 8003562:	d504      	bpl.n	800356e <_svfiprintf_r+0xc2>
 8003564:	2353      	movs	r3, #83	; 0x53
 8003566:	a904      	add	r1, sp, #16
 8003568:	185b      	adds	r3, r3, r1
 800356a:	212b      	movs	r1, #43	; 0x2b
 800356c:	7019      	strb	r1, [r3, #0]
 800356e:	7833      	ldrb	r3, [r6, #0]
 8003570:	2b2a      	cmp	r3, #42	; 0x2a
 8003572:	d016      	beq.n	80035a2 <_svfiprintf_r+0xf6>
 8003574:	0035      	movs	r5, r6
 8003576:	2100      	movs	r1, #0
 8003578:	200a      	movs	r0, #10
 800357a:	68e3      	ldr	r3, [r4, #12]
 800357c:	782a      	ldrb	r2, [r5, #0]
 800357e:	1c6e      	adds	r6, r5, #1
 8003580:	3a30      	subs	r2, #48	; 0x30
 8003582:	2a09      	cmp	r2, #9
 8003584:	d94e      	bls.n	8003624 <_svfiprintf_r+0x178>
 8003586:	2900      	cmp	r1, #0
 8003588:	d018      	beq.n	80035bc <_svfiprintf_r+0x110>
 800358a:	e010      	b.n	80035ae <_svfiprintf_r+0x102>
 800358c:	3501      	adds	r5, #1
 800358e:	e7b1      	b.n	80034f4 <_svfiprintf_r+0x48>
 8003590:	4b40      	ldr	r3, [pc, #256]	; (8003694 <_svfiprintf_r+0x1e8>)
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	1ac0      	subs	r0, r0, r3
 8003596:	2301      	movs	r3, #1
 8003598:	4083      	lsls	r3, r0
 800359a:	4313      	orrs	r3, r2
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	002e      	movs	r6, r5
 80035a0:	e7ce      	b.n	8003540 <_svfiprintf_r+0x94>
 80035a2:	9b07      	ldr	r3, [sp, #28]
 80035a4:	1d19      	adds	r1, r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	9107      	str	r1, [sp, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db01      	blt.n	80035b2 <_svfiprintf_r+0x106>
 80035ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80035b0:	e004      	b.n	80035bc <_svfiprintf_r+0x110>
 80035b2:	425b      	negs	r3, r3
 80035b4:	60e3      	str	r3, [r4, #12]
 80035b6:	2302      	movs	r3, #2
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	782b      	ldrb	r3, [r5, #0]
 80035be:	2b2e      	cmp	r3, #46	; 0x2e
 80035c0:	d10a      	bne.n	80035d8 <_svfiprintf_r+0x12c>
 80035c2:	786b      	ldrb	r3, [r5, #1]
 80035c4:	2b2a      	cmp	r3, #42	; 0x2a
 80035c6:	d135      	bne.n	8003634 <_svfiprintf_r+0x188>
 80035c8:	9b07      	ldr	r3, [sp, #28]
 80035ca:	3502      	adds	r5, #2
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	9207      	str	r2, [sp, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db2b      	blt.n	800362e <_svfiprintf_r+0x182>
 80035d6:	9309      	str	r3, [sp, #36]	; 0x24
 80035d8:	4e2f      	ldr	r6, [pc, #188]	; (8003698 <_svfiprintf_r+0x1ec>)
 80035da:	7829      	ldrb	r1, [r5, #0]
 80035dc:	2203      	movs	r2, #3
 80035de:	0030      	movs	r0, r6
 80035e0:	f000 f9d8 	bl	8003994 <memchr>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d006      	beq.n	80035f6 <_svfiprintf_r+0x14a>
 80035e8:	2340      	movs	r3, #64	; 0x40
 80035ea:	1b80      	subs	r0, r0, r6
 80035ec:	4083      	lsls	r3, r0
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	3501      	adds	r5, #1
 80035f2:	4313      	orrs	r3, r2
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	7829      	ldrb	r1, [r5, #0]
 80035f8:	2206      	movs	r2, #6
 80035fa:	4828      	ldr	r0, [pc, #160]	; (800369c <_svfiprintf_r+0x1f0>)
 80035fc:	1c6e      	adds	r6, r5, #1
 80035fe:	7621      	strb	r1, [r4, #24]
 8003600:	f000 f9c8 	bl	8003994 <memchr>
 8003604:	2800      	cmp	r0, #0
 8003606:	d03c      	beq.n	8003682 <_svfiprintf_r+0x1d6>
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <_svfiprintf_r+0x1f4>)
 800360a:	2b00      	cmp	r3, #0
 800360c:	d125      	bne.n	800365a <_svfiprintf_r+0x1ae>
 800360e:	2207      	movs	r2, #7
 8003610:	9b07      	ldr	r3, [sp, #28]
 8003612:	3307      	adds	r3, #7
 8003614:	4393      	bics	r3, r2
 8003616:	3308      	adds	r3, #8
 8003618:	9307      	str	r3, [sp, #28]
 800361a:	6963      	ldr	r3, [r4, #20]
 800361c:	9a04      	ldr	r2, [sp, #16]
 800361e:	189b      	adds	r3, r3, r2
 8003620:	6163      	str	r3, [r4, #20]
 8003622:	e766      	b.n	80034f2 <_svfiprintf_r+0x46>
 8003624:	4343      	muls	r3, r0
 8003626:	2101      	movs	r1, #1
 8003628:	189b      	adds	r3, r3, r2
 800362a:	0035      	movs	r5, r6
 800362c:	e7a6      	b.n	800357c <_svfiprintf_r+0xd0>
 800362e:	2301      	movs	r3, #1
 8003630:	425b      	negs	r3, r3
 8003632:	e7d0      	b.n	80035d6 <_svfiprintf_r+0x12a>
 8003634:	2300      	movs	r3, #0
 8003636:	200a      	movs	r0, #10
 8003638:	001a      	movs	r2, r3
 800363a:	3501      	adds	r5, #1
 800363c:	6063      	str	r3, [r4, #4]
 800363e:	7829      	ldrb	r1, [r5, #0]
 8003640:	1c6e      	adds	r6, r5, #1
 8003642:	3930      	subs	r1, #48	; 0x30
 8003644:	2909      	cmp	r1, #9
 8003646:	d903      	bls.n	8003650 <_svfiprintf_r+0x1a4>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0c5      	beq.n	80035d8 <_svfiprintf_r+0x12c>
 800364c:	9209      	str	r2, [sp, #36]	; 0x24
 800364e:	e7c3      	b.n	80035d8 <_svfiprintf_r+0x12c>
 8003650:	4342      	muls	r2, r0
 8003652:	2301      	movs	r3, #1
 8003654:	1852      	adds	r2, r2, r1
 8003656:	0035      	movs	r5, r6
 8003658:	e7f1      	b.n	800363e <_svfiprintf_r+0x192>
 800365a:	ab07      	add	r3, sp, #28
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	003a      	movs	r2, r7
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <_svfiprintf_r+0x1f8>)
 8003662:	0021      	movs	r1, r4
 8003664:	9803      	ldr	r0, [sp, #12]
 8003666:	e000      	b.n	800366a <_svfiprintf_r+0x1be>
 8003668:	bf00      	nop
 800366a:	9004      	str	r0, [sp, #16]
 800366c:	9b04      	ldr	r3, [sp, #16]
 800366e:	3301      	adds	r3, #1
 8003670:	d1d3      	bne.n	800361a <_svfiprintf_r+0x16e>
 8003672:	89bb      	ldrh	r3, [r7, #12]
 8003674:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003676:	065b      	lsls	r3, r3, #25
 8003678:	d400      	bmi.n	800367c <_svfiprintf_r+0x1d0>
 800367a:	e72e      	b.n	80034da <_svfiprintf_r+0x2e>
 800367c:	2001      	movs	r0, #1
 800367e:	4240      	negs	r0, r0
 8003680:	e72b      	b.n	80034da <_svfiprintf_r+0x2e>
 8003682:	ab07      	add	r3, sp, #28
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	003a      	movs	r2, r7
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <_svfiprintf_r+0x1f8>)
 800368a:	0021      	movs	r1, r4
 800368c:	9803      	ldr	r0, [sp, #12]
 800368e:	f000 f879 	bl	8003784 <_printf_i>
 8003692:	e7ea      	b.n	800366a <_svfiprintf_r+0x1be>
 8003694:	08003af8 	.word	0x08003af8
 8003698:	08003afe 	.word	0x08003afe
 800369c:	08003b02 	.word	0x08003b02
 80036a0:	00000000 	.word	0x00000000
 80036a4:	080033e9 	.word	0x080033e9

080036a8 <_printf_common>:
 80036a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036aa:	0015      	movs	r5, r2
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	688a      	ldr	r2, [r1, #8]
 80036b0:	690b      	ldr	r3, [r1, #16]
 80036b2:	9000      	str	r0, [sp, #0]
 80036b4:	000c      	movs	r4, r1
 80036b6:	4293      	cmp	r3, r2
 80036b8:	da00      	bge.n	80036bc <_printf_common+0x14>
 80036ba:	0013      	movs	r3, r2
 80036bc:	0022      	movs	r2, r4
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	3243      	adds	r2, #67	; 0x43
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d001      	beq.n	80036cc <_printf_common+0x24>
 80036c8:	3301      	adds	r3, #1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	069b      	lsls	r3, r3, #26
 80036d0:	d502      	bpl.n	80036d8 <_printf_common+0x30>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	3302      	adds	r3, #2
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	2706      	movs	r7, #6
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	401f      	ands	r7, r3
 80036de:	d027      	beq.n	8003730 <_printf_common+0x88>
 80036e0:	0023      	movs	r3, r4
 80036e2:	3343      	adds	r3, #67	; 0x43
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	4193      	sbcs	r3, r2
 80036ea:	6822      	ldr	r2, [r4, #0]
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d430      	bmi.n	8003752 <_printf_common+0xaa>
 80036f0:	0022      	movs	r2, r4
 80036f2:	9901      	ldr	r1, [sp, #4]
 80036f4:	3243      	adds	r2, #67	; 0x43
 80036f6:	9800      	ldr	r0, [sp, #0]
 80036f8:	9e08      	ldr	r6, [sp, #32]
 80036fa:	47b0      	blx	r6
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d025      	beq.n	800374c <_printf_common+0xa4>
 8003700:	2306      	movs	r3, #6
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	682a      	ldr	r2, [r5, #0]
 8003706:	68e1      	ldr	r1, [r4, #12]
 8003708:	4003      	ands	r3, r0
 800370a:	2500      	movs	r5, #0
 800370c:	2b04      	cmp	r3, #4
 800370e:	d103      	bne.n	8003718 <_printf_common+0x70>
 8003710:	1a8d      	subs	r5, r1, r2
 8003712:	43eb      	mvns	r3, r5
 8003714:	17db      	asrs	r3, r3, #31
 8003716:	401d      	ands	r5, r3
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	6922      	ldr	r2, [r4, #16]
 800371c:	4293      	cmp	r3, r2
 800371e:	dd01      	ble.n	8003724 <_printf_common+0x7c>
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	18ed      	adds	r5, r5, r3
 8003724:	2700      	movs	r7, #0
 8003726:	42bd      	cmp	r5, r7
 8003728:	d120      	bne.n	800376c <_printf_common+0xc4>
 800372a:	2000      	movs	r0, #0
 800372c:	e010      	b.n	8003750 <_printf_common+0xa8>
 800372e:	3701      	adds	r7, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	682a      	ldr	r2, [r5, #0]
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	42bb      	cmp	r3, r7
 8003738:	ddd2      	ble.n	80036e0 <_printf_common+0x38>
 800373a:	0022      	movs	r2, r4
 800373c:	2301      	movs	r3, #1
 800373e:	3219      	adds	r2, #25
 8003740:	9901      	ldr	r1, [sp, #4]
 8003742:	9800      	ldr	r0, [sp, #0]
 8003744:	9e08      	ldr	r6, [sp, #32]
 8003746:	47b0      	blx	r6
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d1f0      	bne.n	800372e <_printf_common+0x86>
 800374c:	2001      	movs	r0, #1
 800374e:	4240      	negs	r0, r0
 8003750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003752:	2030      	movs	r0, #48	; 0x30
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	3143      	adds	r1, #67	; 0x43
 8003758:	7008      	strb	r0, [r1, #0]
 800375a:	0021      	movs	r1, r4
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	3145      	adds	r1, #69	; 0x45
 8003760:	7809      	ldrb	r1, [r1, #0]
 8003762:	18a2      	adds	r2, r4, r2
 8003764:	3243      	adds	r2, #67	; 0x43
 8003766:	3302      	adds	r3, #2
 8003768:	7011      	strb	r1, [r2, #0]
 800376a:	e7c1      	b.n	80036f0 <_printf_common+0x48>
 800376c:	0022      	movs	r2, r4
 800376e:	2301      	movs	r3, #1
 8003770:	321a      	adds	r2, #26
 8003772:	9901      	ldr	r1, [sp, #4]
 8003774:	9800      	ldr	r0, [sp, #0]
 8003776:	9e08      	ldr	r6, [sp, #32]
 8003778:	47b0      	blx	r6
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d0e6      	beq.n	800374c <_printf_common+0xa4>
 800377e:	3701      	adds	r7, #1
 8003780:	e7d1      	b.n	8003726 <_printf_common+0x7e>
	...

08003784 <_printf_i>:
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	9204      	str	r2, [sp, #16]
 800378a:	000a      	movs	r2, r1
 800378c:	3243      	adds	r2, #67	; 0x43
 800378e:	9305      	str	r3, [sp, #20]
 8003790:	9003      	str	r0, [sp, #12]
 8003792:	9202      	str	r2, [sp, #8]
 8003794:	7e0a      	ldrb	r2, [r1, #24]
 8003796:	000c      	movs	r4, r1
 8003798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800379a:	2a6e      	cmp	r2, #110	; 0x6e
 800379c:	d100      	bne.n	80037a0 <_printf_i+0x1c>
 800379e:	e086      	b.n	80038ae <_printf_i+0x12a>
 80037a0:	d81f      	bhi.n	80037e2 <_printf_i+0x5e>
 80037a2:	2a63      	cmp	r2, #99	; 0x63
 80037a4:	d033      	beq.n	800380e <_printf_i+0x8a>
 80037a6:	d808      	bhi.n	80037ba <_printf_i+0x36>
 80037a8:	2a00      	cmp	r2, #0
 80037aa:	d100      	bne.n	80037ae <_printf_i+0x2a>
 80037ac:	e08c      	b.n	80038c8 <_printf_i+0x144>
 80037ae:	2a58      	cmp	r2, #88	; 0x58
 80037b0:	d04d      	beq.n	800384e <_printf_i+0xca>
 80037b2:	0025      	movs	r5, r4
 80037b4:	3542      	adds	r5, #66	; 0x42
 80037b6:	702a      	strb	r2, [r5, #0]
 80037b8:	e030      	b.n	800381c <_printf_i+0x98>
 80037ba:	2a64      	cmp	r2, #100	; 0x64
 80037bc:	d001      	beq.n	80037c2 <_printf_i+0x3e>
 80037be:	2a69      	cmp	r2, #105	; 0x69
 80037c0:	d1f7      	bne.n	80037b2 <_printf_i+0x2e>
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6825      	ldr	r5, [r4, #0]
 80037c6:	1d0a      	adds	r2, r1, #4
 80037c8:	0628      	lsls	r0, r5, #24
 80037ca:	d529      	bpl.n	8003820 <_printf_i+0x9c>
 80037cc:	6808      	ldr	r0, [r1, #0]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	2800      	cmp	r0, #0
 80037d2:	da03      	bge.n	80037dc <_printf_i+0x58>
 80037d4:	232d      	movs	r3, #45	; 0x2d
 80037d6:	9a02      	ldr	r2, [sp, #8]
 80037d8:	4240      	negs	r0, r0
 80037da:	7013      	strb	r3, [r2, #0]
 80037dc:	4e6b      	ldr	r6, [pc, #428]	; (800398c <_printf_i+0x208>)
 80037de:	270a      	movs	r7, #10
 80037e0:	e04f      	b.n	8003882 <_printf_i+0xfe>
 80037e2:	2a73      	cmp	r2, #115	; 0x73
 80037e4:	d074      	beq.n	80038d0 <_printf_i+0x14c>
 80037e6:	d808      	bhi.n	80037fa <_printf_i+0x76>
 80037e8:	2a6f      	cmp	r2, #111	; 0x6f
 80037ea:	d01f      	beq.n	800382c <_printf_i+0xa8>
 80037ec:	2a70      	cmp	r2, #112	; 0x70
 80037ee:	d1e0      	bne.n	80037b2 <_printf_i+0x2e>
 80037f0:	2220      	movs	r2, #32
 80037f2:	6809      	ldr	r1, [r1, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	e003      	b.n	8003802 <_printf_i+0x7e>
 80037fa:	2a75      	cmp	r2, #117	; 0x75
 80037fc:	d016      	beq.n	800382c <_printf_i+0xa8>
 80037fe:	2a78      	cmp	r2, #120	; 0x78
 8003800:	d1d7      	bne.n	80037b2 <_printf_i+0x2e>
 8003802:	0022      	movs	r2, r4
 8003804:	2178      	movs	r1, #120	; 0x78
 8003806:	3245      	adds	r2, #69	; 0x45
 8003808:	7011      	strb	r1, [r2, #0]
 800380a:	4e61      	ldr	r6, [pc, #388]	; (8003990 <_printf_i+0x20c>)
 800380c:	e022      	b.n	8003854 <_printf_i+0xd0>
 800380e:	0025      	movs	r5, r4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	3542      	adds	r5, #66	; 0x42
 8003814:	1d11      	adds	r1, r2, #4
 8003816:	6019      	str	r1, [r3, #0]
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	702b      	strb	r3, [r5, #0]
 800381c:	2301      	movs	r3, #1
 800381e:	e065      	b.n	80038ec <_printf_i+0x168>
 8003820:	6808      	ldr	r0, [r1, #0]
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	0669      	lsls	r1, r5, #25
 8003826:	d5d3      	bpl.n	80037d0 <_printf_i+0x4c>
 8003828:	b200      	sxth	r0, r0
 800382a:	e7d1      	b.n	80037d0 <_printf_i+0x4c>
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	1d08      	adds	r0, r1, #4
 8003832:	6018      	str	r0, [r3, #0]
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	062e      	lsls	r6, r5, #24
 8003838:	d505      	bpl.n	8003846 <_printf_i+0xc2>
 800383a:	4e54      	ldr	r6, [pc, #336]	; (800398c <_printf_i+0x208>)
 800383c:	2708      	movs	r7, #8
 800383e:	2a6f      	cmp	r2, #111	; 0x6f
 8003840:	d01b      	beq.n	800387a <_printf_i+0xf6>
 8003842:	270a      	movs	r7, #10
 8003844:	e019      	b.n	800387a <_printf_i+0xf6>
 8003846:	066d      	lsls	r5, r5, #25
 8003848:	d5f7      	bpl.n	800383a <_printf_i+0xb6>
 800384a:	b280      	uxth	r0, r0
 800384c:	e7f5      	b.n	800383a <_printf_i+0xb6>
 800384e:	3145      	adds	r1, #69	; 0x45
 8003850:	4e4e      	ldr	r6, [pc, #312]	; (800398c <_printf_i+0x208>)
 8003852:	700a      	strb	r2, [r1, #0]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	1d01      	adds	r1, r0, #4
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	0615      	lsls	r5, r2, #24
 8003860:	d521      	bpl.n	80038a6 <_printf_i+0x122>
 8003862:	07d3      	lsls	r3, r2, #31
 8003864:	d502      	bpl.n	800386c <_printf_i+0xe8>
 8003866:	2320      	movs	r3, #32
 8003868:	431a      	orrs	r2, r3
 800386a:	6022      	str	r2, [r4, #0]
 800386c:	2710      	movs	r7, #16
 800386e:	2800      	cmp	r0, #0
 8003870:	d103      	bne.n	800387a <_printf_i+0xf6>
 8003872:	2320      	movs	r3, #32
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	439a      	bics	r2, r3
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	0023      	movs	r3, r4
 800387c:	2200      	movs	r2, #0
 800387e:	3343      	adds	r3, #67	; 0x43
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db58      	blt.n	800393c <_printf_i+0x1b8>
 800388a:	2204      	movs	r2, #4
 800388c:	6821      	ldr	r1, [r4, #0]
 800388e:	4391      	bics	r1, r2
 8003890:	6021      	str	r1, [r4, #0]
 8003892:	2800      	cmp	r0, #0
 8003894:	d154      	bne.n	8003940 <_printf_i+0x1bc>
 8003896:	9d02      	ldr	r5, [sp, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05a      	beq.n	8003952 <_printf_i+0x1ce>
 800389c:	0025      	movs	r5, r4
 800389e:	7833      	ldrb	r3, [r6, #0]
 80038a0:	3542      	adds	r5, #66	; 0x42
 80038a2:	702b      	strb	r3, [r5, #0]
 80038a4:	e055      	b.n	8003952 <_printf_i+0x1ce>
 80038a6:	0655      	lsls	r5, r2, #25
 80038a8:	d5db      	bpl.n	8003862 <_printf_i+0xde>
 80038aa:	b280      	uxth	r0, r0
 80038ac:	e7d9      	b.n	8003862 <_printf_i+0xde>
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	680d      	ldr	r5, [r1, #0]
 80038b2:	1d10      	adds	r0, r2, #4
 80038b4:	6949      	ldr	r1, [r1, #20]
 80038b6:	6018      	str	r0, [r3, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	062e      	lsls	r6, r5, #24
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0x13e>
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0x144>
 80038c2:	066d      	lsls	r5, r5, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0x13a>
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9d02      	ldr	r5, [sp, #8]
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	e04f      	b.n	8003970 <_printf_i+0x1ec>
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	1d11      	adds	r1, r2, #4
 80038d4:	6019      	str	r1, [r3, #0]
 80038d6:	6815      	ldr	r5, [r2, #0]
 80038d8:	2100      	movs	r1, #0
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	0028      	movs	r0, r5
 80038de:	f000 f859 	bl	8003994 <memchr>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d001      	beq.n	80038ea <_printf_i+0x166>
 80038e6:	1b40      	subs	r0, r0, r5
 80038e8:	6060      	str	r0, [r4, #4]
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	6123      	str	r3, [r4, #16]
 80038ee:	2300      	movs	r3, #0
 80038f0:	9a02      	ldr	r2, [sp, #8]
 80038f2:	7013      	strb	r3, [r2, #0]
 80038f4:	e03c      	b.n	8003970 <_printf_i+0x1ec>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	002a      	movs	r2, r5
 80038fa:	9904      	ldr	r1, [sp, #16]
 80038fc:	9803      	ldr	r0, [sp, #12]
 80038fe:	9d05      	ldr	r5, [sp, #20]
 8003900:	47a8      	blx	r5
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	d03e      	beq.n	8003984 <_printf_i+0x200>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	079b      	lsls	r3, r3, #30
 800390a:	d415      	bmi.n	8003938 <_printf_i+0x1b4>
 800390c:	9b07      	ldr	r3, [sp, #28]
 800390e:	68e0      	ldr	r0, [r4, #12]
 8003910:	4298      	cmp	r0, r3
 8003912:	da39      	bge.n	8003988 <_printf_i+0x204>
 8003914:	0018      	movs	r0, r3
 8003916:	e037      	b.n	8003988 <_printf_i+0x204>
 8003918:	0022      	movs	r2, r4
 800391a:	2301      	movs	r3, #1
 800391c:	3219      	adds	r2, #25
 800391e:	9904      	ldr	r1, [sp, #16]
 8003920:	9803      	ldr	r0, [sp, #12]
 8003922:	9e05      	ldr	r6, [sp, #20]
 8003924:	47b0      	blx	r6
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d02c      	beq.n	8003984 <_printf_i+0x200>
 800392a:	3501      	adds	r5, #1
 800392c:	68e3      	ldr	r3, [r4, #12]
 800392e:	9a07      	ldr	r2, [sp, #28]
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	42ab      	cmp	r3, r5
 8003934:	dcf0      	bgt.n	8003918 <_printf_i+0x194>
 8003936:	e7e9      	b.n	800390c <_printf_i+0x188>
 8003938:	2500      	movs	r5, #0
 800393a:	e7f7      	b.n	800392c <_printf_i+0x1a8>
 800393c:	2800      	cmp	r0, #0
 800393e:	d0ad      	beq.n	800389c <_printf_i+0x118>
 8003940:	9d02      	ldr	r5, [sp, #8]
 8003942:	0039      	movs	r1, r7
 8003944:	f7fc fc6e 	bl	8000224 <__aeabi_uidivmod>
 8003948:	5c73      	ldrb	r3, [r6, r1]
 800394a:	3d01      	subs	r5, #1
 800394c:	702b      	strb	r3, [r5, #0]
 800394e:	2800      	cmp	r0, #0
 8003950:	d1f7      	bne.n	8003942 <_printf_i+0x1be>
 8003952:	2f08      	cmp	r7, #8
 8003954:	d109      	bne.n	800396a <_printf_i+0x1e6>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	07db      	lsls	r3, r3, #31
 800395a:	d506      	bpl.n	800396a <_printf_i+0x1e6>
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	6922      	ldr	r2, [r4, #16]
 8003960:	4293      	cmp	r3, r2
 8003962:	dc02      	bgt.n	800396a <_printf_i+0x1e6>
 8003964:	2330      	movs	r3, #48	; 0x30
 8003966:	3d01      	subs	r5, #1
 8003968:	702b      	strb	r3, [r5, #0]
 800396a:	9b02      	ldr	r3, [sp, #8]
 800396c:	1b5b      	subs	r3, r3, r5
 800396e:	6123      	str	r3, [r4, #16]
 8003970:	9b05      	ldr	r3, [sp, #20]
 8003972:	aa07      	add	r2, sp, #28
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	0021      	movs	r1, r4
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	9803      	ldr	r0, [sp, #12]
 800397c:	f7ff fe94 	bl	80036a8 <_printf_common>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d1b8      	bne.n	80038f6 <_printf_i+0x172>
 8003984:	2001      	movs	r0, #1
 8003986:	4240      	negs	r0, r0
 8003988:	b009      	add	sp, #36	; 0x24
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398c:	08003b09 	.word	0x08003b09
 8003990:	08003b1a 	.word	0x08003b1a

08003994 <memchr>:
 8003994:	b2c9      	uxtb	r1, r1
 8003996:	1882      	adds	r2, r0, r2
 8003998:	4290      	cmp	r0, r2
 800399a:	d101      	bne.n	80039a0 <memchr+0xc>
 800399c:	2000      	movs	r0, #0
 800399e:	4770      	bx	lr
 80039a0:	7803      	ldrb	r3, [r0, #0]
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d0fb      	beq.n	800399e <memchr+0xa>
 80039a6:	3001      	adds	r0, #1
 80039a8:	e7f6      	b.n	8003998 <memchr+0x4>

080039aa <memmove>:
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4288      	cmp	r0, r1
 80039ae:	d902      	bls.n	80039b6 <memmove+0xc>
 80039b0:	188b      	adds	r3, r1, r2
 80039b2:	4298      	cmp	r0, r3
 80039b4:	d303      	bcc.n	80039be <memmove+0x14>
 80039b6:	2300      	movs	r3, #0
 80039b8:	e007      	b.n	80039ca <memmove+0x20>
 80039ba:	5c8b      	ldrb	r3, [r1, r2]
 80039bc:	5483      	strb	r3, [r0, r2]
 80039be:	3a01      	subs	r2, #1
 80039c0:	d2fb      	bcs.n	80039ba <memmove+0x10>
 80039c2:	bd10      	pop	{r4, pc}
 80039c4:	5ccc      	ldrb	r4, [r1, r3]
 80039c6:	54c4      	strb	r4, [r0, r3]
 80039c8:	3301      	adds	r3, #1
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d1fa      	bne.n	80039c4 <memmove+0x1a>
 80039ce:	e7f8      	b.n	80039c2 <memmove+0x18>

080039d0 <_realloc_r>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	0007      	movs	r7, r0
 80039d4:	000d      	movs	r5, r1
 80039d6:	0016      	movs	r6, r2
 80039d8:	2900      	cmp	r1, #0
 80039da:	d105      	bne.n	80039e8 <_realloc_r+0x18>
 80039dc:	0011      	movs	r1, r2
 80039de:	f7ff fc71 	bl	80032c4 <_malloc_r>
 80039e2:	0004      	movs	r4, r0
 80039e4:	0020      	movs	r0, r4
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e8:	2a00      	cmp	r2, #0
 80039ea:	d103      	bne.n	80039f4 <_realloc_r+0x24>
 80039ec:	f7ff fc20 	bl	8003230 <_free_r>
 80039f0:	0034      	movs	r4, r6
 80039f2:	e7f7      	b.n	80039e4 <_realloc_r+0x14>
 80039f4:	f000 f812 	bl	8003a1c <_malloc_usable_size_r>
 80039f8:	002c      	movs	r4, r5
 80039fa:	42b0      	cmp	r0, r6
 80039fc:	d2f2      	bcs.n	80039e4 <_realloc_r+0x14>
 80039fe:	0031      	movs	r1, r6
 8003a00:	0038      	movs	r0, r7
 8003a02:	f7ff fc5f 	bl	80032c4 <_malloc_r>
 8003a06:	1e04      	subs	r4, r0, #0
 8003a08:	d0ec      	beq.n	80039e4 <_realloc_r+0x14>
 8003a0a:	0029      	movs	r1, r5
 8003a0c:	0032      	movs	r2, r6
 8003a0e:	f7ff fbfd 	bl	800320c <memcpy>
 8003a12:	0029      	movs	r1, r5
 8003a14:	0038      	movs	r0, r7
 8003a16:	f7ff fc0b 	bl	8003230 <_free_r>
 8003a1a:	e7e3      	b.n	80039e4 <_realloc_r+0x14>

08003a1c <_malloc_usable_size_r>:
 8003a1c:	1f0b      	subs	r3, r1, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1f18      	subs	r0, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da01      	bge.n	8003a2a <_malloc_usable_size_r+0xe>
 8003a26:	580b      	ldr	r3, [r1, r0]
 8003a28:	18c0      	adds	r0, r0, r3
 8003a2a:	4770      	bx	lr

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
